
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000770  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a0  080008a8  000108a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a0  080008a0  000108a8  2**0
                  CONTENTS
  4 .ARM          00000000  080008a0  080008a0  000108a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a0  080008a8  000108a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a0  080008a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000094b  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000225  00000000  00000000  0001121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  00011448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001372  00000000  00000000  000115b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ad1  00000000  00000000  00012922  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000051ad  00000000  00000000  000133f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000185a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000268  00000000  00000000  0001861c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000888 	.word	0x08000888

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000888 	.word	0x08000888

08000170 <main>:
 */

#include "stm32f103xx.h" //For the MCU
#include "stm32f1xx_gpio.h"

int main (void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLED, gpioBtn; // Variable for the GPIO Handle

	// GPIO Button Configuration
	gpioBtn.pGPIOx = GPIOA; // Initialize variable and select port
 8000176:	4b19      	ldr	r3, [pc, #100]	; (80001dc <main+0x6c>)
 8000178:	60bb      	str	r3, [r7, #8]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800017a:	2307      	movs	r3, #7
 800017c:	733b      	strb	r3, [r7, #12]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 800017e:	2300      	movs	r3, #0
 8000180:	737b      	strb	r3, [r7, #13]
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 8000182:	2302      	movs	r3, #2
 8000184:	73bb      	strb	r3, [r7, #14]

	// GPIO LED Configuration
	gpioLED.pGPIOx = GPIOC; // Initialize variable and select port
 8000186:	4b16      	ldr	r3, [pc, #88]	; (80001e0 <main+0x70>)
 8000188:	613b      	str	r3, [r7, #16]
	gpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800018a:	230d      	movs	r3, #13
 800018c:	753b      	strb	r3, [r7, #20]
	gpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_SPEED_10;
 800018e:	2301      	movs	r3, #1
 8000190:	757b      	strb	r3, [r7, #21]
	gpioLED.GPIO_PinConfig.GPIO_Config = GPIO_OP_TYPE_PP;
 8000192:	2300      	movs	r3, #0
 8000194:	75bb      	strb	r3, [r7, #22]

	GPIO_PeriClkCtrl(GPIOA,ENABLE); // Clock enable for GPIO Button
 8000196:	2101      	movs	r1, #1
 8000198:	4810      	ldr	r0, [pc, #64]	; (80001dc <main+0x6c>)
 800019a:	f000 f85b 	bl	8000254 <GPIO_PeriClkCtrl>
	GPIO_PeriClkCtrl(GPIOC,ENABLE); // Clock enable for GPIO LED
 800019e:	2101      	movs	r1, #1
 80001a0:	480f      	ldr	r0, [pc, #60]	; (80001e0 <main+0x70>)
 80001a2:	f000 f857 	bl	8000254 <GPIO_PeriClkCtrl>

	GPIO_Init(&gpioBtn); // GPIO Button Initialization
 80001a6:	f107 0308 	add.w	r3, r7, #8
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f900 	bl	80003b0 <GPIO_Init>
	GPIO_Init(&gpioLED); // GPIO LED Initialization
 80001b0:	f107 0310 	add.w	r3, r7, #16
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 f8fb 	bl	80003b0 <GPIO_Init>

	// Button interrupt configuration
	EXTI_Handle_t BtnInter;
	InterHandler(&gpioBtn, &BtnInter, INTER_FALLING_EDGE); //Trigger Interrupt in the falling edge
 80001ba:	1d39      	adds	r1, r7, #4
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	2202      	movs	r2, #2
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f9b0 	bl	8000528 <InterHandler>

	// IRQ Configuration
	GPIO_IRQPriority(IRQ_NO_EXTI9_5, NVIC_PRIO_15);
 80001c8:	210f      	movs	r1, #15
 80001ca:	2017      	movs	r0, #23
 80001cc:	f000 faea 	bl	80007a4 <GPIO_IRQPriority>
	GPIO_IRQConfig(IRQ_NO_EXTI9_5, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	2017      	movs	r0, #23
 80001d4:	f000 fa62 	bl	800069c <GPIO_IRQConfig>

	while (1);
 80001d8:	e7fe      	b.n	80001d8 <main+0x68>
 80001da:	bf00      	nop
 80001dc:	40010800 	.word	0x40010800
 80001e0:	40011000 	.word	0x40011000

080001e4 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler (void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_7);
 80001e8:	2007      	movs	r0, #7
 80001ea:	f000 fb09 	bl	8000800 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_13);
 80001ee:	210d      	movs	r1, #13
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <EXTI0_IRQHandler+0x18>)
 80001f2:	f000 fa3f 	bl	8000674 <GPIO_ToggleOutputPin>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40011000 	.word	0x40011000

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 8000206:	490e      	ldr	r1, [pc, #56]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800020c:	e002      	b.n	8000214 <LoopCopyDataInit>

0800020e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800020e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000212:	3304      	adds	r3, #4

08000214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000218:	d3f9      	bcc.n	800020e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021a:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 800021c:	4c0b      	ldr	r4, [pc, #44]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000220:	e001      	b.n	8000226 <LoopFillZerobss>

08000222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000224:	3204      	adds	r2, #4

08000226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000228:	d3fb      	bcc.n	8000222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800022a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fb07 	bl	8000840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ff9d 	bl	8000170 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	080008a8 	.word	0x080008a8
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	2000001c 	.word	0x2000001c

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000260:	78fb      	ldrb	r3, [r7, #3]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d148      	bne.n	80002f8 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a4a      	ldr	r2, [pc, #296]	; (8000394 <GPIO_PeriClkCtrl+0x140>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d106      	bne.n	800027c <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 800026e:	4b4a      	ldr	r3, [pc, #296]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a49      	ldr	r2, [pc, #292]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 800027a:	e085      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a47      	ldr	r2, [pc, #284]	; (800039c <GPIO_PeriClkCtrl+0x148>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d106      	bne.n	8000292 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000284:	4b44      	ldr	r3, [pc, #272]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a43      	ldr	r2, [pc, #268]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
}
 8000290:	e07a      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a42      	ldr	r2, [pc, #264]	; (80003a0 <GPIO_PeriClkCtrl+0x14c>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800029a:	4b3f      	ldr	r3, [pc, #252]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a3e      	ldr	r2, [pc, #248]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6193      	str	r3, [r2, #24]
}
 80002a6:	e06f      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a3e      	ldr	r2, [pc, #248]	; (80003a4 <GPIO_PeriClkCtrl+0x150>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80002b0:	4b39      	ldr	r3, [pc, #228]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a38      	ldr	r2, [pc, #224]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
}
 80002bc:	e064      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a39      	ldr	r2, [pc, #228]	; (80003a8 <GPIO_PeriClkCtrl+0x154>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 80002c6:	4b34      	ldr	r3, [pc, #208]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a33      	ldr	r2, [pc, #204]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d0:	6193      	str	r3, [r2, #24]
}
 80002d2:	e059      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a35      	ldr	r2, [pc, #212]	; (80003ac <GPIO_PeriClkCtrl+0x158>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80002dc:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e6:	6193      	str	r3, [r2, #24]
}
 80002e8:	e04e      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 80002ea:	4b2b      	ldr	r3, [pc, #172]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 80002f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f4:	6193      	str	r3, [r2, #24]
}
 80002f6:	e047      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClkCtrl+0x140>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 8000300:	4b25      	ldr	r3, [pc, #148]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a24      	ldr	r2, [pc, #144]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000306:	f023 0304 	bic.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
}
 800030c:	e03c      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a22      	ldr	r2, [pc, #136]	; (800039c <GPIO_PeriClkCtrl+0x148>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800031c:	f023 0308 	bic.w	r3, r3, #8
 8000320:	6193      	str	r3, [r2, #24]
}
 8000322:	e031      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <GPIO_PeriClkCtrl+0x14c>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a19      	ldr	r2, [pc, #100]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000332:	f023 0310 	bic.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
}
 8000338:	e026      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <GPIO_PeriClkCtrl+0x150>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000348:	f023 0320 	bic.w	r3, r3, #32
 800034c:	6193      	str	r3, [r2, #24]
}
 800034e:	e01b      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <GPIO_PeriClkCtrl+0x154>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800035e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000362:	6193      	str	r3, [r2, #24]
}
 8000364:	e010      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a10      	ldr	r2, [pc, #64]	; (80003ac <GPIO_PeriClkCtrl+0x158>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a09      	ldr	r2, [pc, #36]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000378:	6193      	str	r3, [r2, #24]
}
 800037a:	e005      	b.n	8000388 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a05      	ldr	r2, [pc, #20]	; (8000398 <GPIO_PeriClkCtrl+0x144>)
 8000382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000386:	6193      	str	r3, [r2, #24]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40010800 	.word	0x40010800
 8000398:	40021000 	.word	0x40021000
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40011000 	.word	0x40011000
 80003a4:	40011400 	.word	0x40011400
 80003a8:	40011800 	.word	0x40011800
 80003ac:	40011c00 	.word	0x40011c00

080003b0 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b08d      	sub	sp, #52	; 0x34
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d84b      	bhi.n	8000460 <GPIO_Init+0xb0>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	791b      	ldrb	r3, [r3, #4]
 80003cc:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	799b      	ldrb	r3, [r3, #6]
 80003d8:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 80003da:	7dfb      	ldrb	r3, [r7, #23]
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 80003e0:	7dfb      	ldrb	r3, [r7, #23]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	3302      	adds	r3, #2
 80003e8:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 80003ea:	7d3b      	ldrb	r3, [r7, #20]
 80003ec:	2203      	movs	r2, #3
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 80003f4:	7cfb      	ldrb	r3, [r7, #19]
 80003f6:	2203      	movs	r2, #3
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 80003fe:	7dba      	ldrb	r2, [r7, #22]
 8000400:	7d3b      	ldrb	r3, [r7, #20]
 8000402:	fa02 f303 	lsl.w	r3, r2, r3
 8000406:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6819      	ldr	r1, [r3, #0]
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	43da      	mvns	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6819      	ldr	r1, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000426:	430a      	orrs	r2, r1
 8000428:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 800042e:	7d7a      	ldrb	r2, [r7, #21]
 8000430:	7cfb      	ldrb	r3, [r7, #19]
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	43da      	mvns	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	400a      	ands	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	6819      	ldr	r1, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
 800045e:	e058      	b.n	8000512 <GPIO_Init+0x162>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	3b08      	subs	r3, #8
 8000466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	795b      	ldrb	r3, [r3, #5]
 800046e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	799b      	ldrb	r3, [r3, #6]
 8000476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 800047a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 8000484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	b2db      	uxtb	r3, r3
 800048c:	3302      	adds	r3, #2
 800048e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 8000492:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000496:	2203      	movs	r2, #3
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 80004a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004a4:	2203      	movs	r2, #3
 80004a6:	fa02 f303 	lsl.w	r3, r2, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 80004ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80004b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6859      	ldr	r1, [r3, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	69fa      	ldr	r2, [r7, #28]
 80004c8:	400a      	ands	r2, r1
 80004ca:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	6859      	ldr	r1, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004d8:	430a      	orrs	r2, r1
 80004da:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 80004dc:	2300      	movs	r3, #0
 80004de:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 80004e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80004e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004e8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ec:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6859      	ldr	r1, [r3, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	69ba      	ldr	r2, [r7, #24]
 80004fa:	400a      	ands	r2, r1
 80004fc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800050a:	430a      	orrs	r2, r1
 800050c:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2202      	movs	r2, #2
 8000516:	715a      	strb	r2, [r3, #5]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2203      	movs	r2, #3
 800051c:	715a      	strb	r2, [r3, #5]

	}
}
 800051e:	bf00      	nop
 8000520:	3734      	adds	r7, #52	; 0x34
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <InterHandler>:
 * @param [in]		Type of interrupt
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void InterHandler(GPIO_Handle_t *pGPIOHandle, EXTI_Handle_t *pEXTIHandle, uint8_t InterType){
 8000528:	b480      	push	{r7}
 800052a:	b087      	sub	sp, #28
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	4613      	mov	r3, r2
 8000534:	71fb      	strb	r3, [r7, #7]

	uint8_t positions = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	75fb      	strb	r3, [r7, #23]


	if (InterType == 1){ //Rising edge detection
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d10e      	bne.n	8000560 <InterHandler+0x38>
		pEXTIHandle->EXTIx->RTSR = 1 << positions;
 8000542:	7dfb      	ldrb	r3, [r7, #23]
 8000544:	2201      	movs	r2, #1
 8000546:	409a      	lsls	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	609a      	str	r2, [r3, #8]
		pEXTIHandle->EXTIx->FTSR = ~(1 << positions); // Disable falling edge
 800054e:	7dfb      	ldrb	r3, [r7, #23]
 8000550:	2201      	movs	r2, #1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	43da      	mvns	r2, r3
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	e01d      	b.n	800059c <InterHandler+0x74>

	} else if (InterType ==2) { //Falling edge detection
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d10e      	bne.n	8000584 <InterHandler+0x5c>
		pEXTIHandle->EXTIx->FTSR = 1 << positions;
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	2201      	movs	r2, #1
 800056a:	409a      	lsls	r2, r3
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60da      	str	r2, [r3, #12]
		pEXTIHandle->EXTIx->RTSR = ~(1 << positions); // Disable rising edge
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	2201      	movs	r2, #1
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43da      	mvns	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	e00b      	b.n	800059c <InterHandler+0x74>

	} else { //Detection for both edges
		pEXTIHandle->EXTIx->FTSR = 1 << positions;
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	2201      	movs	r2, #1
 8000588:	409a      	lsls	r2, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	60da      	str	r2, [r3, #12]
		pEXTIHandle->EXTIx->RTSR = 1 << positions;
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	2201      	movs	r2, #1
 8000594:	409a      	lsls	r2, r3
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	609a      	str	r2, [r3, #8]
	}

	// Configure the GPIO port selection in AFIO_EXTICR
	uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4); // To define the EXTI (0-15)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	089b      	lsrs	r3, r3, #2
 80005a2:	75bb      	strb	r3, [r7, #22]
	uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4); // To define the position in the register
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	f003 0303 	and.w	r3, r3, #3
 80005ac:	757b      	strb	r3, [r7, #21]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a26      	ldr	r2, [pc, #152]	; (800064c <InterHandler+0x124>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d02b      	beq.n	8000610 <InterHandler+0xe8>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <InterHandler+0x128>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d024      	beq.n	800060c <InterHandler+0xe4>
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a23      	ldr	r2, [pc, #140]	; (8000654 <InterHandler+0x12c>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01d      	beq.n	8000608 <InterHandler+0xe0>
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <InterHandler+0x130>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d016      	beq.n	8000604 <InterHandler+0xdc>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a20      	ldr	r2, [pc, #128]	; (800065c <InterHandler+0x134>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d00f      	beq.n	8000600 <InterHandler+0xd8>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <InterHandler+0x138>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d008      	beq.n	80005fc <InterHandler+0xd4>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <InterHandler+0x13c>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <InterHandler+0xd0>
 80005f4:	2306      	movs	r3, #6
 80005f6:	e00c      	b.n	8000612 <InterHandler+0xea>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e00a      	b.n	8000612 <InterHandler+0xea>
 80005fc:	2305      	movs	r3, #5
 80005fe:	e008      	b.n	8000612 <InterHandler+0xea>
 8000600:	2304      	movs	r3, #4
 8000602:	e006      	b.n	8000612 <InterHandler+0xea>
 8000604:	2303      	movs	r3, #3
 8000606:	e004      	b.n	8000612 <InterHandler+0xea>
 8000608:	2302      	movs	r3, #2
 800060a:	e002      	b.n	8000612 <InterHandler+0xea>
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <InterHandler+0xea>
 8000610:	2300      	movs	r3, #0
 8000612:	753b      	strb	r3, [r7, #20]
	uint8_t aux = temp2*4;
 8000614:	7d7b      	ldrb	r3, [r7, #21]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	74fb      	strb	r3, [r7, #19]

	AFIO_PCLK_EN(); // RCC enable for AFIO
 800061a:	4b13      	ldr	r3, [pc, #76]	; (8000668 <InterHandler+0x140>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <InterHandler+0x140>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
	AFIO->EXTICR[temp1] = portcode << aux;
 8000626:	7d3a      	ldrb	r2, [r7, #20]
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	fa02 f103 	lsl.w	r1, r2, r3
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <InterHandler+0x144>)
 8000630:	7dbb      	ldrb	r3, [r7, #22]
 8000632:	3302      	adds	r3, #2
 8000634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Enable the EXTI Interrupt delivery using IMR
	EXTI->IMR = 1 << positions;
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	2201      	movs	r2, #1
 800063c:	409a      	lsls	r2, r3
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <InterHandler+0x148>)
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00
 8000654:	40011000 	.word	0x40011000
 8000658:	40011400 	.word	0x40011400
 800065c:	40011800 	.word	0x40011800
 8000660:	40011c00 	.word	0x40011c00
 8000664:	40012000 	.word	0x40012000
 8000668:	40021000 	.word	0x40021000
 800066c:	40010000 	.word	0x40010000
 8000670:	40010400 	.word	0x40010400

08000674 <GPIO_ToggleOutputPin>:
 * @param [in]		Pin number
 * @return			None
 * @note 			None
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber); // Same as: pGPIOx->ODR ^= (1 << PinNumber)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	78fa      	ldrb	r2, [r7, #3]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	405a      	eors	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60da      	str	r2, [r3, #12]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <GPIO_IRQConfig>:
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE){
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d133      	bne.n	800071a <GPIO_IRQConfig+0x7e>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b1f      	cmp	r3, #31
 80006b6:	d80a      	bhi.n	80006ce <GPIO_IRQConfig+0x32>
			*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <GPIO_IRQConfig+0xf0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	79fa      	ldrb	r2, [r7, #7]
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	4611      	mov	r1, r2
 80006c6:	4a31      	ldr	r2, [pc, #196]	; (800078c <GPIO_IRQConfig+0xf0>)
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
		}
	}
}
 80006cc:	e059      	b.n	8000782 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b1f      	cmp	r3, #31
 80006d2:	d90f      	bls.n	80006f4 <GPIO_IRQConfig+0x58>
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b3f      	cmp	r3, #63	; 0x3f
 80006d8:	d80c      	bhi.n	80006f4 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <GPIO_IRQConfig+0xf4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	79fa      	ldrb	r2, [r7, #7]
 80006e0:	f002 021f 	and.w	r2, r2, #31
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <GPIO_IRQConfig+0xf4>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e046      	b.n	8000782 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b3f      	cmp	r3, #63	; 0x3f
 80006f8:	d943      	bls.n	8000782 <GPIO_IRQConfig+0xe6>
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b5f      	cmp	r3, #95	; 0x5f
 80006fe:	d840      	bhi.n	8000782 <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <GPIO_IRQConfig+0xf8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	79fa      	ldrb	r2, [r7, #7]
 8000706:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a20      	ldr	r2, [pc, #128]	; (8000794 <GPIO_IRQConfig+0xf8>)
 8000714:	430b      	orrs	r3, r1
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	e033      	b.n	8000782 <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	d80a      	bhi.n	8000736 <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <GPIO_IRQConfig+0xfc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	2101      	movs	r1, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a1a      	ldr	r2, [pc, #104]	; (8000798 <GPIO_IRQConfig+0xfc>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	e025      	b.n	8000782 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b1f      	cmp	r3, #31
 800073a:	d90f      	bls.n	800075c <GPIO_IRQConfig+0xc0>
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	d80c      	bhi.n	800075c <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <GPIO_IRQConfig+0x100>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	f002 021f 	and.w	r2, r2, #31
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a11      	ldr	r2, [pc, #68]	; (800079c <GPIO_IRQConfig+0x100>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	e012      	b.n	8000782 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b3f      	cmp	r3, #63	; 0x3f
 8000760:	d90f      	bls.n	8000782 <GPIO_IRQConfig+0xe6>
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b5f      	cmp	r3, #95	; 0x5f
 8000766:	d80c      	bhi.n	8000782 <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <GPIO_IRQConfig+0x104>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	4611      	mov	r1, r2
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <GPIO_IRQConfig+0x104>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	e7ff      	b.n	8000782 <GPIO_IRQConfig+0xe6>
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000e104 	.word	0xe000e104
 8000794:	e000e108 	.word	0xe000e108
 8000798:	e000e180 	.word	0xe000e180
 800079c:	e000e184 	.word	0xe000e184
 80007a0:	e000e188 	.word	0xe000e188

080007a4 <GPIO_IRQPriority>:
 * @param [in]		IRQ Number
 * @param [in]		IRQ Priority
 * @return			None
 * @note 			None
 */
void GPIO_IRQPriority (uint8_t IRQNumber,uint8_t IRQPriority){
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx =  IRQNumber/4; // Define which IPR Register you have to use (0-59)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section =  IRQNumber%4; // Define the section on the IPR (0-4) * 8 bc each section is 8 bits
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 0303 	and.w	r3, r3, #3
 80007c0:	73bb      	strb	r3, [r7, #14]
	uint8_t aux =  ((8* iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED));
 80007c2:	7bbb      	ldrb	r3, [r7, #14]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3304      	adds	r3, #4
 80007ca:	737b      	strb	r3, [r7, #13]

	*(NVIC_PRIO_BASEADDR + (iprx*4)) |= (IRQPriority <<aux);
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007d4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	79b9      	ldrb	r1, [r7, #6]
 80007dc:	7b7b      	ldrb	r3, [r7, #13]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	4619      	mov	r1, r3
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007ec:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007f0:	430a      	orrs	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
	...

08000800 <GPIO_IRQHandling>:
 * @param [in]		Pin Number
 * @return			None
 * @note 			None
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pending Register Corresponding to the Pin Number
	if (EXTI->PR & (1 << PinNumber)){
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <GPIO_IRQHandling+0x3c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	2101      	movs	r1, #1
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d009      	beq.n	8000830 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <GPIO_IRQHandling+0x3c>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	79fa      	ldrb	r2, [r7, #7]
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	4611      	mov	r1, r2
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <GPIO_IRQHandling+0x3c>)
 800082c:	430b      	orrs	r3, r1
 800082e:	6153      	str	r3, [r2, #20]
	}
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40010400 	.word	0x40010400

08000840 <__libc_init_array>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	2500      	movs	r5, #0
 8000844:	4e0c      	ldr	r6, [pc, #48]	; (8000878 <__libc_init_array+0x38>)
 8000846:	4c0d      	ldr	r4, [pc, #52]	; (800087c <__libc_init_array+0x3c>)
 8000848:	1ba4      	subs	r4, r4, r6
 800084a:	10a4      	asrs	r4, r4, #2
 800084c:	42a5      	cmp	r5, r4
 800084e:	d109      	bne.n	8000864 <__libc_init_array+0x24>
 8000850:	f000 f81a 	bl	8000888 <_init>
 8000854:	2500      	movs	r5, #0
 8000856:	4e0a      	ldr	r6, [pc, #40]	; (8000880 <__libc_init_array+0x40>)
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <__libc_init_array+0x44>)
 800085a:	1ba4      	subs	r4, r4, r6
 800085c:	10a4      	asrs	r4, r4, #2
 800085e:	42a5      	cmp	r5, r4
 8000860:	d105      	bne.n	800086e <__libc_init_array+0x2e>
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000868:	4798      	blx	r3
 800086a:	3501      	adds	r5, #1
 800086c:	e7ee      	b.n	800084c <__libc_init_array+0xc>
 800086e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000872:	4798      	blx	r3
 8000874:	3501      	adds	r5, #1
 8000876:	e7f2      	b.n	800085e <__libc_init_array+0x1e>
 8000878:	080008a0 	.word	0x080008a0
 800087c:	080008a0 	.word	0x080008a0
 8000880:	080008a0 	.word	0x080008a0
 8000884:	080008a4 	.word	0x080008a4

08000888 <_init>:
 8000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088a:	bf00      	nop
 800088c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088e:	bc08      	pop	{r3}
 8000890:	469e      	mov	lr, r3
 8000892:	4770      	bx	lr

08000894 <_fini>:
 8000894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000896:	bf00      	nop
 8000898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089a:	bc08      	pop	{r3}
 800089c:	469e      	mov	lr, r3
 800089e:	4770      	bx	lr

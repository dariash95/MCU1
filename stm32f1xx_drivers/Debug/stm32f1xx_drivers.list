
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000904  0800090c  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000904  08000904  0001090c  2**0
                  CONTENTS
  4 .ARM          00000000  08000904  08000904  0001090c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000904  0800090c  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000904  08000904  00010904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000908  08000908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800090c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800090c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001090c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001257  00000000  00000000  00010935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000334  00000000  00000000  00011b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d0  00000000  00000000  00011ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00011f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d65  00000000  00000000  00012038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000c53  00000000  00000000  00013d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000083c3  00000000  00000000  000149f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001cdb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002b0  00000000  00000000  0001ce30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080008ec 	.word	0x080008ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080008ec 	.word	0x080008ec

08000170 <delay>:

#include <string.h> // To include memset
#include "stm32f103xx.h" //For the MCU
#include "stm32f1xx_gpio.h"

void delay (void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <delay+0x24>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	0003d08f 	.word	0x0003d08f

08000198 <main>:

int main (void){
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLED, gpioBtn; // Variable for the GPIO Handle
	memset(&gpioLED, 0, sizeof(gpioLED)); // Set value to 0
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2208      	movs	r2, #8
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fb98 	bl	80008dc <memset>
	memset(&gpioBtn, 0, sizeof(gpioBtn)); // Set value to 0
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	2208      	movs	r2, #8
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fb91 	bl	80008dc <memset>

	// GPIO Button Configuration
	gpioBtn.pGPIOx = GPIOA; // Initialize variable and select port
 80001ba:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <main+0x90>)
 80001bc:	60bb      	str	r3, [r7, #8]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001be:	2307      	movs	r3, #7
 80001c0:	733b      	strb	r3, [r7, #12]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 80001c2:	2300      	movs	r3, #0
 80001c4:	737b      	strb	r3, [r7, #13]
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 80001c6:	2302      	movs	r3, #2
 80001c8:	73bb      	strb	r3, [r7, #14]

	// GPIO LED Configuration
	gpioLED.pGPIOx = GPIOC; // Initialize variable and select port
 80001ca:	4b18      	ldr	r3, [pc, #96]	; (800022c <main+0x94>)
 80001cc:	613b      	str	r3, [r7, #16]
	gpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80001ce:	230d      	movs	r3, #13
 80001d0:	753b      	strb	r3, [r7, #20]
	gpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT_SPEED_10;
 80001d2:	2301      	movs	r3, #1
 80001d4:	757b      	strb	r3, [r7, #21]
	gpioLED.GPIO_PinConfig.GPIO_Config = GPIO_OP_TYPE_PP;
 80001d6:	2300      	movs	r3, #0
 80001d8:	75bb      	strb	r3, [r7, #22]

	GPIO_PeriClkCtrl(GPIOA,ENABLE); // Clock enable for GPIO Button
 80001da:	2101      	movs	r1, #1
 80001dc:	4812      	ldr	r0, [pc, #72]	; (8000228 <main+0x90>)
 80001de:	f000 f865 	bl	80002ac <GPIO_PeriClkCtrl>
	GPIO_PeriClkCtrl(GPIOC,ENABLE); // Clock enable for GPIO LED
 80001e2:	2101      	movs	r1, #1
 80001e4:	4811      	ldr	r0, [pc, #68]	; (800022c <main+0x94>)
 80001e6:	f000 f861 	bl	80002ac <GPIO_PeriClkCtrl>

	GPIO_Init(&gpioBtn); // GPIO Button Initialization
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f90a 	bl	8000408 <GPIO_Init>
	GPIO_Init(&gpioLED); // GPIO LED Initialization
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f905 	bl	8000408 <GPIO_Init>

	// Button interrupt configuration
	EXTI_Handle_t BtnInter;
	BtnInter.pEXTIx = EXTI;
 80001fe:	4b0c      	ldr	r3, [pc, #48]	; (8000230 <main+0x98>)
 8000200:	607b      	str	r3, [r7, #4]

	AFIO_Handle_t AFIOBtn;
	AFIOBtn.pAFIOx = AFIO;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0x9c>)
 8000204:	603b      	str	r3, [r7, #0]
	InterHandler(&gpioBtn, &BtnInter, &AFIOBtn, INTER_FALLING_EDGE); //Trigger Interrupt in the falling edge
 8000206:	463a      	mov	r2, r7
 8000208:	1d39      	adds	r1, r7, #4
 800020a:	f107 0008 	add.w	r0, r7, #8
 800020e:	2302      	movs	r3, #2
 8000210:	f000 f9b6 	bl	8000580 <InterHandler>

	// IRQ Configuration
	GPIO_IRQPriority(IRQ_NO_EXTI9_5, NVIC_PRIO_15);
 8000214:	210f      	movs	r1, #15
 8000216:	2017      	movs	r0, #23
 8000218:	f000 faee 	bl	80007f8 <GPIO_IRQPriority>
	GPIO_IRQConfig(IRQ_NO_EXTI9_5, ENABLE);
 800021c:	2101      	movs	r1, #1
 800021e:	2017      	movs	r0, #23
 8000220:	f000 fa66 	bl	80006f0 <GPIO_IRQConfig>

	while (1);
 8000224:	e7fe      	b.n	8000224 <main+0x8c>
 8000226:	bf00      	nop
 8000228:	40010800 	.word	0x40010800
 800022c:	40011000 	.word	0x40011000
 8000230:	40010400 	.word	0x40010400
 8000234:	40010000 	.word	0x40010000

08000238 <EXTI9_5_IRQHandler>:
}

void EXTI9_5_IRQHandler (void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	delay();
 800023c:	f7ff ff98 	bl	8000170 <delay>
	GPIO_IRQHandling(GPIO_PIN_7);
 8000240:	2007      	movs	r0, #7
 8000242:	f000 fb07 	bl	8000854 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_13);
 8000246:	210d      	movs	r1, #13
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <EXTI9_5_IRQHandler+0x1c>)
 800024a:	f000 fa3d 	bl	80006c8 <GPIO_ToggleOutputPin>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40011000 	.word	0x40011000

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490e      	ldr	r1, [pc, #56]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0b      	ldr	r4, [pc, #44]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000282:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 fb05 	bl	8000894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ff85 	bl	8000198 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	0800090c 	.word	0x0800090c
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80002b8:	78fb      	ldrb	r3, [r7, #3]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d148      	bne.n	8000350 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a4a      	ldr	r2, [pc, #296]	; (80003ec <GPIO_PeriClkCtrl+0x140>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d106      	bne.n	80002d4 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80002c6:	4b4a      	ldr	r3, [pc, #296]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 80002d2:	e085      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a47      	ldr	r2, [pc, #284]	; (80003f4 <GPIO_PeriClkCtrl+0x148>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80002dc:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a43      	ldr	r2, [pc, #268]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
}
 80002e8:	e07a      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a42      	ldr	r2, [pc, #264]	; (80003f8 <GPIO_PeriClkCtrl+0x14c>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80002f2:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a3e      	ldr	r2, [pc, #248]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6193      	str	r3, [r2, #24]
}
 80002fe:	e06f      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a3e      	ldr	r2, [pc, #248]	; (80003fc <GPIO_PeriClkCtrl+0x150>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d106      	bne.n	8000316 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000308:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6193      	str	r3, [r2, #24]
}
 8000314:	e064      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a39      	ldr	r2, [pc, #228]	; (8000400 <GPIO_PeriClkCtrl+0x154>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800031e:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	4a33      	ldr	r2, [pc, #204]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000328:	6193      	str	r3, [r2, #24]
}
 800032a:	e059      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a35      	ldr	r2, [pc, #212]	; (8000404 <GPIO_PeriClkCtrl+0x158>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000334:	4b2e      	ldr	r3, [pc, #184]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800033a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033e:	6193      	str	r3, [r2, #24]
}
 8000340:	e04e      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 8000342:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a2a      	ldr	r2, [pc, #168]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800034c:	6193      	str	r3, [r2, #24]
}
 800034e:	e047      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a26      	ldr	r2, [pc, #152]	; (80003ec <GPIO_PeriClkCtrl+0x140>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 8000358:	4b25      	ldr	r3, [pc, #148]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a24      	ldr	r2, [pc, #144]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800035e:	f023 0304 	bic.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
}
 8000364:	e03c      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a22      	ldr	r2, [pc, #136]	; (80003f4 <GPIO_PeriClkCtrl+0x148>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000374:	f023 0308 	bic.w	r3, r3, #8
 8000378:	6193      	str	r3, [r2, #24]
}
 800037a:	e031      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <GPIO_PeriClkCtrl+0x14c>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800038a:	f023 0310 	bic.w	r3, r3, #16
 800038e:	6193      	str	r3, [r2, #24]
}
 8000390:	e026      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a19      	ldr	r2, [pc, #100]	; (80003fc <GPIO_PeriClkCtrl+0x150>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003a0:	f023 0320 	bic.w	r3, r3, #32
 80003a4:	6193      	str	r3, [r2, #24]
}
 80003a6:	e01b      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <GPIO_PeriClkCtrl+0x154>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ba:	6193      	str	r3, [r2, #24]
}
 80003bc:	e010      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <GPIO_PeriClkCtrl+0x158>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003d0:	6193      	str	r3, [r2, #24]
}
 80003d2:	e005      	b.n	80003e0 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <GPIO_PeriClkCtrl+0x144>)
 80003da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003de:	6193      	str	r3, [r2, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40011000 	.word	0x40011000
 80003fc:	40011400 	.word	0x40011400
 8000400:	40011800 	.word	0x40011800
 8000404:	40011c00 	.word	0x40011c00

08000408 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000408:	b480      	push	{r7}
 800040a:	b08d      	sub	sp, #52	; 0x34
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	2b07      	cmp	r3, #7
 800041e:	d84b      	bhi.n	80004b8 <GPIO_Init+0xb0>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	795b      	ldrb	r3, [r3, #5]
 800042a:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	799b      	ldrb	r3, [r3, #6]
 8000430:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 8000438:	7dfb      	ldrb	r3, [r7, #23]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	b2db      	uxtb	r3, r3
 800043e:	3302      	adds	r3, #2
 8000440:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 8000442:	7d3b      	ldrb	r3, [r7, #20]
 8000444:	2203      	movs	r2, #3
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 800044c:	7cfb      	ldrb	r3, [r7, #19]
 800044e:	2203      	movs	r2, #3
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 8000456:	7dba      	ldrb	r2, [r7, #22]
 8000458:	7d3b      	ldrb	r3, [r7, #20]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6819      	ldr	r1, [r3, #0]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	43da      	mvns	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	400a      	ands	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800047e:	430a      	orrs	r2, r1
 8000480:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000486:	7d7a      	ldrb	r2, [r7, #21]
 8000488:	7cfb      	ldrb	r3, [r7, #19]
 800048a:	fa02 f303 	lsl.w	r3, r2, r3
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	43da      	mvns	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	400a      	ands	r2, r1
 80004a0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004ae:	430a      	orrs	r2, r1
 80004b0:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80004b6:	e058      	b.n	800056a <GPIO_Init+0x162>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	3b08      	subs	r3, #8
 80004be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	795b      	ldrb	r3, [r3, #5]
 80004c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	799b      	ldrb	r3, [r3, #6]
 80004ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 80004d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 80004dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	3302      	adds	r3, #2
 80004e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 80004ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004ee:	2203      	movs	r2, #3
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 80004f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004fc:	2203      	movs	r2, #3
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	43db      	mvns	r3, r3
 8000504:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 8000506:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800050a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6859      	ldr	r1, [r3, #4]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	69fa      	ldr	r2, [r7, #28]
 8000520:	400a      	ands	r2, r1
 8000522:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6859      	ldr	r1, [r3, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000530:	430a      	orrs	r2, r1
 8000532:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000538:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800053c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6859      	ldr	r1, [r3, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	69ba      	ldr	r2, [r7, #24]
 8000552:	400a      	ands	r2, r1
 8000554:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6859      	ldr	r1, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000562:	430a      	orrs	r2, r1
 8000564:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2202      	movs	r2, #2
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2203      	movs	r2, #3
 8000574:	715a      	strb	r2, [r3, #5]

	}
}
 8000576:	bf00      	nop
 8000578:	3734      	adds	r7, #52	; 0x34
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <InterHandler>:
 * @param [in]		Type of interrupt
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void InterHandler(GPIO_Handle_t *pGPIOHandle, EXTI_Handle_t *pEXTIHandle, AFIO_Handle_t *pAFIOHandle, uint8_t InterType){
 8000580:	b480      	push	{r7}
 8000582:	b087      	sub	sp, #28
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	70fb      	strb	r3, [r7, #3]

	uint8_t positions = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	75fb      	strb	r3, [r7, #23]


	if (InterType == 1){ //Rising edge detection
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d10e      	bne.n	80005b8 <InterHandler+0x38>
		pEXTIHandle->pEXTIx->RTSR = 1 << positions;
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2201      	movs	r2, #1
 800059e:	409a      	lsls	r2, r3
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	609a      	str	r2, [r3, #8]
		pEXTIHandle->pEXTIx->FTSR = ~(1 << positions); // Disable falling edge
 80005a6:	7dfb      	ldrb	r3, [r7, #23]
 80005a8:	2201      	movs	r2, #1
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43da      	mvns	r2, r3
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	e01d      	b.n	80005f4 <InterHandler+0x74>

	} else if (InterType ==2) { //Falling edge detection
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d10e      	bne.n	80005dc <InterHandler+0x5c>
		pEXTIHandle->pEXTIx->FTSR = 1 << positions;
 80005be:	7dfb      	ldrb	r3, [r7, #23]
 80005c0:	2201      	movs	r2, #1
 80005c2:	409a      	lsls	r2, r3
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60da      	str	r2, [r3, #12]
		pEXTIHandle->pEXTIx->RTSR = ~(1 << positions); // Disable rising edge
 80005ca:	7dfb      	ldrb	r3, [r7, #23]
 80005cc:	2201      	movs	r2, #1
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	43da      	mvns	r2, r3
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	e00b      	b.n	80005f4 <InterHandler+0x74>

	} else { //Detection for both edges
		pEXTIHandle->pEXTIx->FTSR = 1 << positions;
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
 80005de:	2201      	movs	r2, #1
 80005e0:	409a      	lsls	r2, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	60da      	str	r2, [r3, #12]
		pEXTIHandle->pEXTIx->RTSR = 1 << positions;
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	2201      	movs	r2, #1
 80005ec:	409a      	lsls	r2, r3
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	609a      	str	r2, [r3, #8]
	}

	// Configure the GPIO port selection in AFIO_EXTICR
	uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4); // To define the EXTI (0-15)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	75bb      	strb	r3, [r7, #22]
	uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4); // To define the position in the register
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	f003 0303 	and.w	r3, r3, #3
 8000604:	757b      	strb	r3, [r7, #21]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a27      	ldr	r2, [pc, #156]	; (80006a8 <InterHandler+0x128>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d02b      	beq.n	8000668 <InterHandler+0xe8>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a25      	ldr	r2, [pc, #148]	; (80006ac <InterHandler+0x12c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d024      	beq.n	8000664 <InterHandler+0xe4>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <InterHandler+0x130>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d01d      	beq.n	8000660 <InterHandler+0xe0>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <InterHandler+0x134>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d016      	beq.n	800065c <InterHandler+0xdc>
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <InterHandler+0x138>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d00f      	beq.n	8000658 <InterHandler+0xd8>
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1f      	ldr	r2, [pc, #124]	; (80006bc <InterHandler+0x13c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d008      	beq.n	8000654 <InterHandler+0xd4>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <InterHandler+0x140>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d101      	bne.n	8000650 <InterHandler+0xd0>
 800064c:	2306      	movs	r3, #6
 800064e:	e00c      	b.n	800066a <InterHandler+0xea>
 8000650:	2300      	movs	r3, #0
 8000652:	e00a      	b.n	800066a <InterHandler+0xea>
 8000654:	2305      	movs	r3, #5
 8000656:	e008      	b.n	800066a <InterHandler+0xea>
 8000658:	2304      	movs	r3, #4
 800065a:	e006      	b.n	800066a <InterHandler+0xea>
 800065c:	2303      	movs	r3, #3
 800065e:	e004      	b.n	800066a <InterHandler+0xea>
 8000660:	2302      	movs	r3, #2
 8000662:	e002      	b.n	800066a <InterHandler+0xea>
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <InterHandler+0xea>
 8000668:	2300      	movs	r3, #0
 800066a:	753b      	strb	r3, [r7, #20]
	uint8_t aux = temp2*4;
 800066c:	7d7b      	ldrb	r3, [r7, #21]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	74fb      	strb	r3, [r7, #19]

	AFIO_PCLK_EN(); // RCC enable for AFIO
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <InterHandler+0x144>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <InterHandler+0x144>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
	pAFIOHandle->pAFIOx->EXTICR[temp1] = portcode << aux;
 800067e:	7d3a      	ldrb	r2, [r7, #20]
 8000680:	7cfb      	ldrb	r3, [r7, #19]
 8000682:	fa02 f103 	lsl.w	r1, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	7dba      	ldrb	r2, [r7, #22]
 800068c:	3202      	adds	r2, #2
 800068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable the EXTI Interrupt delivery using IMR
	pEXTIHandle->pEXTIx->IMR = 1 << positions;
 8000692:	7dfb      	ldrb	r3, [r7, #23]
 8000694:	2201      	movs	r2, #1
 8000696:	409a      	lsls	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	601a      	str	r2, [r3, #0]
}
 800069e:	bf00      	nop
 80006a0:	371c      	adds	r7, #28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	40011000 	.word	0x40011000
 80006b4:	40011400 	.word	0x40011400
 80006b8:	40011800 	.word	0x40011800
 80006bc:	40011c00 	.word	0x40011c00
 80006c0:	40012000 	.word	0x40012000
 80006c4:	40021000 	.word	0x40021000

080006c8 <GPIO_ToggleOutputPin>:
 * @param [in]		Pin number
 * @return			None
 * @note 			None
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber); // Same as: pGPIOx->ODR ^= (1 << PinNumber)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	78fa      	ldrb	r2, [r7, #3]
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	405a      	eors	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <GPIO_IRQConfig>:
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	460a      	mov	r2, r1
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE){
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d133      	bne.n	800076e <GPIO_IRQConfig+0x7e>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b1f      	cmp	r3, #31
 800070a:	d80a      	bhi.n	8000722 <GPIO_IRQConfig+0x32>
			*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <GPIO_IRQConfig+0xf0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	4611      	mov	r1, r2
 800071a:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <GPIO_IRQConfig+0xf0>)
 800071c:	430b      	orrs	r3, r1
 800071e:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
		}
	}
}
 8000720:	e059      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b1f      	cmp	r3, #31
 8000726:	d90f      	bls.n	8000748 <GPIO_IRQConfig+0x58>
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b3f      	cmp	r3, #63	; 0x3f
 800072c:	d80c      	bhi.n	8000748 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <GPIO_IRQConfig+0xf4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	f002 021f 	and.w	r2, r2, #31
 8000738:	2101      	movs	r1, #1
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	4611      	mov	r1, r2
 8000740:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <GPIO_IRQConfig+0xf4>)
 8000742:	430b      	orrs	r3, r1
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e046      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b3f      	cmp	r3, #63	; 0x3f
 800074c:	d943      	bls.n	80007d6 <GPIO_IRQConfig+0xe6>
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b5f      	cmp	r3, #95	; 0x5f
 8000752:	d840      	bhi.n	80007d6 <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <GPIO_IRQConfig+0xf8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <GPIO_IRQConfig+0xf8>)
 8000768:	430b      	orrs	r3, r1
 800076a:	6013      	str	r3, [r2, #0]
}
 800076c:	e033      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b1f      	cmp	r3, #31
 8000772:	d80a      	bhi.n	800078a <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <GPIO_IRQConfig+0xfc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	79fa      	ldrb	r2, [r7, #7]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	4611      	mov	r1, r2
 8000782:	4a1a      	ldr	r2, [pc, #104]	; (80007ec <GPIO_IRQConfig+0xfc>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	e025      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b1f      	cmp	r3, #31
 800078e:	d90f      	bls.n	80007b0 <GPIO_IRQConfig+0xc0>
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b3f      	cmp	r3, #63	; 0x3f
 8000794:	d80c      	bhi.n	80007b0 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <GPIO_IRQConfig+0x100>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	f002 021f 	and.w	r2, r2, #31
 80007a0:	2101      	movs	r1, #1
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a11      	ldr	r2, [pc, #68]	; (80007f0 <GPIO_IRQConfig+0x100>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e012      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2b3f      	cmp	r3, #63	; 0x3f
 80007b4:	d90f      	bls.n	80007d6 <GPIO_IRQConfig+0xe6>
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b5f      	cmp	r3, #95	; 0x5f
 80007ba:	d80c      	bhi.n	80007d6 <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <GPIO_IRQConfig+0x104>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <GPIO_IRQConfig+0x104>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	e7ff      	b.n	80007d6 <GPIO_IRQConfig+0xe6>
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000e104 	.word	0xe000e104
 80007e8:	e000e108 	.word	0xe000e108
 80007ec:	e000e180 	.word	0xe000e180
 80007f0:	e000e184 	.word	0xe000e184
 80007f4:	e000e188 	.word	0xe000e188

080007f8 <GPIO_IRQPriority>:
 * @param [in]		IRQ Number
 * @param [in]		IRQ Priority
 * @return			None
 * @note 			None
 */
void GPIO_IRQPriority (uint8_t IRQNumber,uint8_t IRQPriority){
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]

	uint8_t iprx =  IRQNumber/4; // Define which IPR Register you have to use (0-59)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section =  IRQNumber%4; // Define the section on the IPR (0-4) * 8 bc each section is 8 bits
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	73bb      	strb	r3, [r7, #14]
	uint8_t aux =  ((8* iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED));
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	3304      	adds	r3, #4
 800081e:	737b      	strb	r3, [r7, #13]

	*(NVIC_PRIO_BASEADDR + (iprx*4)) |= (IRQPriority <<aux);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000828:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	79b9      	ldrb	r1, [r7, #6]
 8000830:	7b7b      	ldrb	r3, [r7, #13]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	4619      	mov	r1, r3
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000840:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000844:	430a      	orrs	r2, r1
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
	...

08000854 <GPIO_IRQHandling>:
 * @param [in]		Pin Number
 * @return			None
 * @note 			None
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pending Register Corresponding to the Pin Number
	if (EXTI->PR & (1 << PinNumber)){
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <GPIO_IRQHandling+0x3c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	4013      	ands	r3, r2
 800086c:	2b00      	cmp	r3, #0
 800086e:	d009      	beq.n	8000884 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <GPIO_IRQHandling+0x3c>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	4611      	mov	r1, r2
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <GPIO_IRQHandling+0x3c>)
 8000880:	430b      	orrs	r3, r1
 8000882:	6153      	str	r3, [r2, #20]
	}
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40010400 	.word	0x40010400

08000894 <__libc_init_array>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	2500      	movs	r5, #0
 8000898:	4e0c      	ldr	r6, [pc, #48]	; (80008cc <__libc_init_array+0x38>)
 800089a:	4c0d      	ldr	r4, [pc, #52]	; (80008d0 <__libc_init_array+0x3c>)
 800089c:	1ba4      	subs	r4, r4, r6
 800089e:	10a4      	asrs	r4, r4, #2
 80008a0:	42a5      	cmp	r5, r4
 80008a2:	d109      	bne.n	80008b8 <__libc_init_array+0x24>
 80008a4:	f000 f822 	bl	80008ec <_init>
 80008a8:	2500      	movs	r5, #0
 80008aa:	4e0a      	ldr	r6, [pc, #40]	; (80008d4 <__libc_init_array+0x40>)
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <__libc_init_array+0x44>)
 80008ae:	1ba4      	subs	r4, r4, r6
 80008b0:	10a4      	asrs	r4, r4, #2
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	d105      	bne.n	80008c2 <__libc_init_array+0x2e>
 80008b6:	bd70      	pop	{r4, r5, r6, pc}
 80008b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008bc:	4798      	blx	r3
 80008be:	3501      	adds	r5, #1
 80008c0:	e7ee      	b.n	80008a0 <__libc_init_array+0xc>
 80008c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008c6:	4798      	blx	r3
 80008c8:	3501      	adds	r5, #1
 80008ca:	e7f2      	b.n	80008b2 <__libc_init_array+0x1e>
 80008cc:	08000904 	.word	0x08000904
 80008d0:	08000904 	.word	0x08000904
 80008d4:	08000904 	.word	0x08000904
 80008d8:	08000908 	.word	0x08000908

080008dc <memset>:
 80008dc:	4603      	mov	r3, r0
 80008de:	4402      	add	r2, r0
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d100      	bne.n	80008e6 <memset+0xa>
 80008e4:	4770      	bx	lr
 80008e6:	f803 1b01 	strb.w	r1, [r3], #1
 80008ea:	e7f9      	b.n	80008e0 <memset+0x4>

080008ec <_init>:
 80008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ee:	bf00      	nop
 80008f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f2:	bc08      	pop	{r3}
 80008f4:	469e      	mov	lr, r3
 80008f6:	4770      	bx	lr

080008f8 <_fini>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	bf00      	nop
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr

/*
 * stm32f1xx_gpio.c
 *
 *  Created on: Jun 5, 2020
 *      Author: Daniela
 */

#include"stm32f1xx_gpio.h"

/* 					APIs Function Implementation 					*/

/******************************************************************
 * @func			GPIO_PeriClkCtrl (GPIO Peripheral Control)
 * @brief			This functions enables or disables peripheral clock for the given GPIO Port
 * @param [in]		Base Address of the GPIO Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
	if (EnOrDi == ENABLE) {
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_EN();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_EN();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_EN();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_EN();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_EN();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_EN();
		} else {
			GPIOG_PCLK_EN();
		}
	}
	else
	{
		if (pGPIOx == GPIOA) {
			GPIOA_PCLK_DI();
		} else if (pGPIOx == GPIOB) {
			GPIOB_PCLK_DI();
		} else if (pGPIOx == GPIOC) {
			GPIOC_PCLK_DI();
		} else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_DI();
		} else if (pGPIOx == GPIOE) {
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}

/******************************************************************
 * @func			GPIO_Init (GPIO Initialization)
 * @brief			This functions initializes a given GPIO Port
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	// Configuration of the pin mode
	uint8_t temp_mode = 0;
	uint8_t temp_config = 0;

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){
		temp_mode = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->CRL = temp_mode;
		temp_mode = 0;

		temp_config = (pGPIOHandle->GPIO_PinConfig.GPIO_Config << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->CRL = temp_config;
		temp_coNfig = 0;
	} else {
		temp_mode = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->CRH = temp_mode;
		temp_mode = 0;

		temp_config = (pGPIOHandle->GPIO_PinConfig.GPIO_Config << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->CRH = temp_config;
		temp_cofig = 0;
	}


}

/******************************************************************
 * @func			GPIO_DeInit (GPIO De-initialization)
 * @brief			This functions resets a given GPIO Port
 * @param [in]		Base Address of the GPIO port that is going to be reset
 * @return			None
 * @note 			None
 */
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{

}

// Data read or write
/******************************************************************
 * @func			PIO_ReadFromInputPin (GPIO Read from Input Pin)
 * @brief			This functions reads from an input pin
 * @param [in]		Base Address of the GPIO port in which the pin is
 * @param [in]		Pin number
 * @return			Read value 0 or 1
 * @note 			None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

/******************************************************************
 * @func			PIO_ReadFromInputPort (GPIO Read from Input Port)
 * @brief			This functions reads from an input port
 * @param [in]		Base Address of the GPIO port that is going to be read
 * @return			Read value 0 or 1
 * @note 			uint16_t bc there are 15 pins in a port that are going to
 * 					return 15 values of 0 or 1
 */
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{

}

/******************************************************************
 * @func			GPIO_WriteToOutputPin (GPIO Write to output pin)
 * @brief			This functions writes a value to a pin
 * @param [in]		Base Address of the GPIO port in which the pin is
 * @param [in]		Pin number
 * @param [in]		Value that is going to be written (0 or 1)
 * @return			None
 * @note 			None
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t value)
{

}

/******************************************************************
 * @func			GPIO_WriteToOutputPor (GPIO Write to output por)
 * @brief			This functions writes a value to a port
 * @param [in]		Base Address of the GPIO port
 * @param [in]		Value that is going to be written
 * @return			None
 * @note 			uint16_t bc there are going to be written 15 values for
 * 					each pin of the port
 */
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value)
{

}

/******************************************************************
 * @func			GPIO_ToggleOutputPin (GPIO Toggle pin)
 * @brief			This functions toggles a specific pin
 * @param [in]		Base Address of the GPIO port in which the pin is
 * @param [in]		Pin number
 * @return			None
 * @note 			None
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{

}

// IQR configuration and handling
/******************************************************************
 * @func			GPIO_IRQConfig (GPIO IRQ Configuration)
 * @brief			This functions configures the priority in the IRQ list
 * @param [in]		IQR Number
 * @param [in]		IRQ Priority
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPrio, uint8_t EnOrDi)
{

}

/******************************************************************
 * @func			GPIO_IRQHandling (GPIO IRQ Handling)
 * @brief			This functions process the interrupt
 * @param [in]		Pin Number
 * @return			None
 * @note 			None
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{

}



stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ac  080021ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080021ac  080021ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ac  080021ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ac  080021ac  000121ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021b0  080021b0  000121b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080021b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000064  08002218  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08002218  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002562  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006e9  00000000  00000000  000225ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  00022cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ac7  00000000  00000000  00023040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000019b2  00000000  00000000  00025b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a34b  00000000  00000000  000274b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00031804  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001188  00000000  00000000  00031880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	080020ec 	.word	0x080020ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	080020ec 	.word	0x080020ec

08000170 <SPI_GPIOInits>:
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}


void SPI_GPIOInits(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOA;
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <SPI_GPIOInits+0x64>)
 8000178:	603b      	str	r3, [r7, #0]

	// NSS -- Not used in this case
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1; // Input
 800017a:	2301      	movs	r3, #1
 800017c:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Floating Input
 800017e:	2302      	movs	r3, #2
 8000180:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000182:	2304      	movs	r3, #4
 8000184:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 8000186:	463b      	mov	r3, r7
 8000188:	4618      	mov	r0, r3
 800018a:	f000 fa2b 	bl	80005e4 <GPIO_Init>

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 800018e:	2301      	movs	r3, #1
 8000190:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 8000192:	2302      	movs	r3, #2
 8000194:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000196:	2305      	movs	r3, #5
 8000198:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 800019a:	463b      	mov	r3, r7
 800019c:	4618      	mov	r0, r3
 800019e:	f000 fa21 	bl	80005e4 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 0; // Input
 80001a2:	2300      	movs	r3, #0
 80001a4:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 1; // Floating input
 80001a6:	2301      	movs	r3, #1
 80001a8:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001aa:	2306      	movs	r3, #6
 80001ac:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001ae:	463b      	mov	r3, r7
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fa17 	bl	80005e4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001b6:	2301      	movs	r3, #1
 80001b8:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001ba:	2302      	movs	r3, #2
 80001bc:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001be:	2307      	movs	r3, #7
 80001c0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001c2:	463b      	mov	r3, r7
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 fa0d 	bl	80005e4 <GPIO_Init>
}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800

080001d8 <SPI_Inits>:

void SPI_Inits(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI1;
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <SPI_Inits+0x38>)
 80001e0:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD ;
 80001e2:	2301      	movs	r3, #1
 80001e4:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001e6:	2301      	movs	r3, #1
 80001e8:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPI_Config.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV_8;
 80001ea:	2302      	movs	r3, #2
 80001ec:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80001f2:	2300      	movs	r3, #0
 80001f4:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80001f6:	2300      	movs	r3, #0
 80001f8:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 80001fe:	463b      	mov	r3, r7
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fc71 	bl	8000ae8 <SPI_Init>
}
 8000206:	bf00      	nop
 8000208:	3718      	adds	r7, #24
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40013000 	.word	0x40013000

08000214 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioBtn; // Variable for the GPIO Handle
	memset(&gpioBtn, 0, sizeof(gpioBtn)); // Set value to 0
 800021a:	f107 0308 	add.w	r3, r7, #8
 800021e:	2208      	movs	r2, #8
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 ff1a 	bl	800105c <memset>

	// GPIO Button Configuration
	gpioBtn.pGPIOx = GPIOA; // Initialize variable and select port
 8000228:	4b11      	ldr	r3, [pc, #68]	; (8000270 <Slave_GPIO_InterruptPinInit+0x5c>)
 800022a:	60bb      	str	r3, [r7, #8]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800022c:	2307      	movs	r3, #7
 800022e:	733b      	strb	r3, [r7, #12]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 8000230:	2300      	movs	r3, #0
 8000232:	737b      	strb	r3, [r7, #13]
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 8000234:	2302      	movs	r3, #2
 8000236:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(&gpioBtn);
 8000238:	f107 0308 	add.w	r3, r7, #8
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f9d1 	bl	80005e4 <GPIO_Init>

	// Button interrupt configuration
	EXTI_Handle_t BtnInter;
	BtnInter.pEXTIx = EXTI;
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <Slave_GPIO_InterruptPinInit+0x60>)
 8000244:	607b      	str	r3, [r7, #4]

	AFIO_Handle_t AFIOBtn;
	AFIOBtn.pAFIOx = AFIO;
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <Slave_GPIO_InterruptPinInit+0x64>)
 8000248:	603b      	str	r3, [r7, #0]
	GPIO_InterHandler(&gpioBtn, &BtnInter, &AFIOBtn, INTER_FALLING_EDGE); //Trigger Interrupt in the falling edge
 800024a:	463a      	mov	r2, r7
 800024c:	1d39      	adds	r1, r7, #4
 800024e:	f107 0008 	add.w	r0, r7, #8
 8000252:	2302      	movs	r3, #2
 8000254:	f000 fa88 	bl	8000768 <GPIO_InterHandler>

	GPIO_IRQPriority(IRQ_NO_EXTI9_5, NVIC_PRIO_15);
 8000258:	210f      	movs	r1, #15
 800025a:	2017      	movs	r0, #23
 800025c:	f000 fbac 	bl	80009b8 <GPIO_IRQPriority>
	GPIO_IRQConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	2017      	movs	r0, #23
 8000264:	f000 fb24 	bl	80008b0 <GPIO_IRQConfig>
}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40010800 	.word	0x40010800
 8000274:	40010400 	.word	0x40010400
 8000278:	40010000 	.word	0x40010000

0800027c <main>:


int main(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 8000282:	23ff      	movs	r3, #255	; 0xff
 8000284:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit(); // Initializes PD6 to deliver the interrupt
 8000286:	f7ff ffc5 	bl	8000214 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI_GPIOInits();
 800028a:	f7ff ff71 	bl	8000170 <SPI_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI_Inits();
 800028e:	f7ff ffa3 	bl	80001d8 <SPI_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1,ENABLE);
 8000292:	2101      	movs	r1, #1
 8000294:	4824      	ldr	r0, [pc, #144]	; (8000328 <main+0xac>)
 8000296:	f000 fdc9 	bl	8000e2c <SPI_SSOEConfig>

	SPI_IRQConfig(IRQ_NO_SPI1,ENABLE);
 800029a:	2101      	movs	r1, #1
 800029c:	2023      	movs	r0, #35	; 0x23
 800029e:	f000 fcd9 	bl	8000c54 <SPI_IRQConfig>

	while(1){

		rcvStop = 0;
 80002a2:	4b22      	ldr	r3, [pc, #136]	; (800032c <main+0xb0>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80002a8:	bf00      	nop
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <main+0xb4>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d0fa      	beq.n	80002aa <main+0x2e>

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,DISABLE);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2017      	movs	r0, #23
 80002b8:	f000 fafa 	bl	80008b0 <GPIO_IRQConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI1,ENABLE);
 80002bc:	2101      	movs	r1, #1
 80002be:	481a      	ldr	r0, [pc, #104]	; (8000328 <main+0xac>)
 80002c0:	f000 fd99 	bl	8000df6 <SPI_PeripheralControl>


		while(!rcvStop)
 80002c4:	e012      	b.n	80002ec <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while (SPI_SendData_Inter(&SPI1Handle, &dummy, 1) == SPI_BUSY_IN_TX);
 80002c6:	bf00      	nop
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	2201      	movs	r2, #1
 80002cc:	4619      	mov	r1, r3
 80002ce:	4819      	ldr	r0, [pc, #100]	; (8000334 <main+0xb8>)
 80002d0:	f000 fc78 	bl	8000bc4 <SPI_SendData_Inter>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d0f6      	beq.n	80002c8 <main+0x4c>
			while (SPI_ReceiveData_Inter(&SPI1Handle, &ReadByte, 1) == SPI_BUSY_IN_RX );
 80002da:	bf00      	nop
 80002dc:	2201      	movs	r2, #1
 80002de:	4916      	ldr	r1, [pc, #88]	; (8000338 <main+0xbc>)
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <main+0xb8>)
 80002e2:	f000 fc93 	bl	8000c0c <SPI_ReceiveData_Inter>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d0f7      	beq.n	80002dc <main+0x60>
		while(!rcvStop)
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <main+0xb0>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0e7      	beq.n	80002c6 <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI1,SPI_BUSY_FLAG) );
 80002f6:	bf00      	nop
 80002f8:	2180      	movs	r1, #128	; 0x80
 80002fa:	480b      	ldr	r0, [pc, #44]	; (8000328 <main+0xac>)
 80002fc:	f000 fc4f 	bl	8000b9e <SPI_GetFlagStatus>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d1f8      	bne.n	80002f8 <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI1,DISABLE);
 8000306:	2100      	movs	r1, #0
 8000308:	4807      	ldr	r0, [pc, #28]	; (8000328 <main+0xac>)
 800030a:	f000 fd74 	bl	8000df6 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 800030e:	490b      	ldr	r1, [pc, #44]	; (800033c <main+0xc0>)
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <main+0xc4>)
 8000312:	f000 feab 	bl	800106c <iprintf>

		dataAvailable = 0;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <main+0xb4>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	2017      	movs	r0, #23
 8000320:	f000 fac6 	bl	80008b0 <GPIO_IRQConfig>
		rcvStop = 0;
 8000324:	e7bd      	b.n	80002a2 <main+0x26>
 8000326:	bf00      	nop
 8000328:	40013000 	.word	0x40013000
 800032c:	20000080 	.word	0x20000080
 8000330:	20000081 	.word	0x20000081
 8000334:	2000032c 	.word	0x2000032c
 8000338:	20000134 	.word	0x20000134
 800033c:	20000138 	.word	0x20000138
 8000340:	08002104 	.word	0x08002104

08000344 <SPI1_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI1_IRQHandler(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI1Handle);
 8000348:	4802      	ldr	r0, [pc, #8]	; (8000354 <SPI1_IRQHandler+0x10>)
 800034a:	f000 fd07 	bl	8000d5c <SPI_IRQHandling>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	2000032c 	.word	0x2000032c

08000358 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_COMPLETE)
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	2b02      	cmp	r3, #2
 8000368:	d11f      	bne.n	80003aa <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <SPI_ApplicationEventCallback+0x5c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	4910      	ldr	r1, [pc, #64]	; (80003b4 <SPI_ApplicationEventCallback+0x5c>)
 8000372:	600a      	str	r2, [r1, #0]
 8000374:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <SPI_ApplicationEventCallback+0x60>)
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	b2d1      	uxtb	r1, r2
 800037a:	4a10      	ldr	r2, [pc, #64]	; (80003bc <SPI_ApplicationEventCallback+0x64>)
 800037c:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <SPI_ApplicationEventCallback+0x60>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d004      	beq.n	8000392 <SPI_ApplicationEventCallback+0x3a>
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <SPI_ApplicationEventCallback+0x5c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000390:	d10b      	bne.n	80003aa <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <SPI_ApplicationEventCallback+0x68>)
 8000394:	2201      	movs	r2, #1
 8000396:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SPI_ApplicationEventCallback+0x5c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	3b01      	subs	r3, #1
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <SPI_ApplicationEventCallback+0x64>)
 80003a0:	2100      	movs	r1, #0
 80003a2:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <SPI_ApplicationEventCallback+0x5c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
				}
	}

}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	20000084 	.word	0x20000084
 80003b8:	20000134 	.word	0x20000134
 80003bc:	20000138 	.word	0x20000138
 80003c0:	20000080 	.word	0x20000080

080003c4 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_6);
 80003c8:	2006      	movs	r0, #6
 80003ca:	f000 fb1f 	bl	8000a0c <GPIO_IRQHandling>
	dataAvailable = 1;
 80003ce:	4b02      	ldr	r3, [pc, #8]	; (80003d8 <EXTI9_5_IRQHandler+0x14>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	701a      	strb	r2, [r3, #0]
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000081 	.word	0x20000081

080003dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <_sbrk+0x50>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x16>
		heap_end = &end;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <_sbrk+0x50>)
 80003ee:	4a10      	ldr	r2, [pc, #64]	; (8000430 <_sbrk+0x54>)
 80003f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <_sbrk+0x50>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <_sbrk+0x50>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	466a      	mov	r2, sp
 8000402:	4293      	cmp	r3, r2
 8000404:	d907      	bls.n	8000416 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000406:	f000 fdff 	bl	8001008 <__errno>
 800040a:	4602      	mov	r2, r0
 800040c:	230c      	movs	r3, #12
 800040e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	e006      	b.n	8000424 <_sbrk+0x48>
	}

	heap_end += incr;
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <_sbrk+0x50>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a03      	ldr	r2, [pc, #12]	; (800042c <_sbrk+0x50>)
 8000420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000088 	.word	0x20000088
 8000430:	20000348 	.word	0x20000348

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0b      	ldr	r4, [pc, #44]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800045e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 fdd7 	bl	8001014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff ff09 	bl	800027c <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000478:	080021b4 	.word	0x080021b4
  ldr r2, =_sbss
 800047c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000480:	20000348 	.word	0x20000348

08000484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_2_IRQHandler>
	...

08000488 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b01      	cmp	r3, #1
 8000498:	d148      	bne.n	800052c <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a4a      	ldr	r2, [pc, #296]	; (80005c8 <GPIO_PeriClkCtrl+0x140>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80004a2:	4b4a      	ldr	r3, [pc, #296]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a49      	ldr	r2, [pc, #292]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004a8:	f043 0304 	orr.w	r3, r3, #4
 80004ac:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 80004ae:	e085      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a47      	ldr	r2, [pc, #284]	; (80005d0 <GPIO_PeriClkCtrl+0x148>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80004b8:	4b44      	ldr	r3, [pc, #272]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a43      	ldr	r2, [pc, #268]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004be:	f043 0308 	orr.w	r3, r3, #8
 80004c2:	6193      	str	r3, [r2, #24]
}
 80004c4:	e07a      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <GPIO_PeriClkCtrl+0x14c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80004ce:	4b3f      	ldr	r3, [pc, #252]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a3e      	ldr	r2, [pc, #248]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004d4:	f043 0310 	orr.w	r3, r3, #16
 80004d8:	6193      	str	r3, [r2, #24]
}
 80004da:	e06f      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a3e      	ldr	r2, [pc, #248]	; (80005d8 <GPIO_PeriClkCtrl+0x150>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80004e4:	4b39      	ldr	r3, [pc, #228]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a38      	ldr	r2, [pc, #224]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004ea:	f043 0320 	orr.w	r3, r3, #32
 80004ee:	6193      	str	r3, [r2, #24]
}
 80004f0:	e064      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a39      	ldr	r2, [pc, #228]	; (80005dc <GPIO_PeriClkCtrl+0x154>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 80004fa:	4b34      	ldr	r3, [pc, #208]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a33      	ldr	r2, [pc, #204]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000504:	6193      	str	r3, [r2, #24]
}
 8000506:	e059      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <GPIO_PeriClkCtrl+0x158>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a2d      	ldr	r2, [pc, #180]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051a:	6193      	str	r3, [r2, #24]
}
 800051c:	e04e      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 800051e:	4b2b      	ldr	r3, [pc, #172]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a2a      	ldr	r2, [pc, #168]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000528:	6193      	str	r3, [r2, #24]
}
 800052a:	e047      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	4a26      	ldr	r2, [pc, #152]	; (80005c8 <GPIO_PeriClkCtrl+0x140>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d106      	bne.n	8000542 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a24      	ldr	r2, [pc, #144]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 800053a:	f023 0304 	bic.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
}
 8000540:	e03c      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <GPIO_PeriClkCtrl+0x148>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d106      	bne.n	8000558 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a1f      	ldr	r2, [pc, #124]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000550:	f023 0308 	bic.w	r3, r3, #8
 8000554:	6193      	str	r3, [r2, #24]
}
 8000556:	e031      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <GPIO_PeriClkCtrl+0x14c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000560:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000566:	f023 0310 	bic.w	r3, r3, #16
 800056a:	6193      	str	r3, [r2, #24]
}
 800056c:	e026      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <GPIO_PeriClkCtrl+0x150>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d106      	bne.n	8000584 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 800057c:	f023 0320 	bic.w	r3, r3, #32
 8000580:	6193      	str	r3, [r2, #24]
}
 8000582:	e01b      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a15      	ldr	r2, [pc, #84]	; (80005dc <GPIO_PeriClkCtrl+0x154>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 8000592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000596:	6193      	str	r3, [r2, #24]
}
 8000598:	e010      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <GPIO_PeriClkCtrl+0x158>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80005a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005ac:	6193      	str	r3, [r2, #24]
}
 80005ae:	e005      	b.n	80005bc <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <GPIO_PeriClkCtrl+0x144>)
 80005b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005ba:	6193      	str	r3, [r2, #24]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40010800 	.word	0x40010800
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010c00 	.word	0x40010c00
 80005d4:	40011000 	.word	0x40011000
 80005d8:	40011400 	.word	0x40011400
 80005dc:	40011800 	.word	0x40011800
 80005e0:	40011c00 	.word	0x40011c00

080005e4 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2101      	movs	r1, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff48 	bl	8000488 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	2b07      	cmp	r3, #7
 8000606:	d84b      	bhi.n	80006a0 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 8000620:	7dfb      	ldrb	r3, [r7, #23]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	3302      	adds	r3, #2
 8000628:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 800062a:	7d3b      	ldrb	r3, [r7, #20]
 800062c:	2203      	movs	r2, #3
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 8000634:	7cfb      	ldrb	r3, [r7, #19]
 8000636:	2203      	movs	r2, #3
 8000638:	fa02 f303 	lsl.w	r3, r2, r3
 800063c:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 800063e:	7dba      	ldrb	r2, [r7, #22]
 8000640:	7d3b      	ldrb	r3, [r7, #20]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6819      	ldr	r1, [r3, #0]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	43da      	mvns	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6819      	ldr	r1, [r3, #0]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 800066e:	7d7a      	ldrb	r2, [r7, #21]
 8000670:	7cfb      	ldrb	r3, [r7, #19]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	43da      	mvns	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000696:	430a      	orrs	r2, r1
 8000698:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	e058      	b.n	8000752 <GPIO_Init+0x16e>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	3b08      	subs	r3, #8
 80006a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 80006ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 80006c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	3302      	adds	r3, #2
 80006ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 80006d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006d6:	2203      	movs	r2, #3
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 80006e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006e4:	2203      	movs	r2, #3
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 80006ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80006f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6859      	ldr	r1, [r3, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	400a      	ands	r2, r1
 800070a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6859      	ldr	r1, [r3, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000718:	430a      	orrs	r2, r1
 800071a:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000720:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6859      	ldr	r1, [r3, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	400a      	ands	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800074a:	430a      	orrs	r2, r1
 800074c:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2202      	movs	r2, #2
 8000756:	715a      	strb	r2, [r3, #5]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2203      	movs	r2, #3
 800075c:	715a      	strb	r2, [r3, #5]

	}
}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <GPIO_InterHandler>:
 * @param [in]		Type of interrupt
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_InterHandler(GPIO_Handle_t *pGPIOHandle, EXTI_Handle_t *pEXTIHandle, AFIO_Handle_t *pAFIOHandle, uint8_t InterType){
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	70fb      	strb	r3, [r7, #3]

	uint8_t positions = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	75fb      	strb	r3, [r7, #23]


	if (InterType == 1){ //Rising edge detection
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d10e      	bne.n	80007a0 <GPIO_InterHandler+0x38>
		pEXTIHandle->pEXTIx->RTSR = 1 << positions;
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	2201      	movs	r2, #1
 8000786:	409a      	lsls	r2, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	609a      	str	r2, [r3, #8]
		pEXTIHandle->pEXTIx->FTSR = ~(1 << positions); // Disable falling edge
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	2201      	movs	r2, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	43da      	mvns	r2, r3
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	e01d      	b.n	80007dc <GPIO_InterHandler+0x74>

	} else if (InterType ==2) { //Falling edge detection
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d10e      	bne.n	80007c4 <GPIO_InterHandler+0x5c>
		pEXTIHandle->pEXTIx->FTSR = 1 << positions;
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	2201      	movs	r2, #1
 80007aa:	409a      	lsls	r2, r3
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60da      	str	r2, [r3, #12]
		pEXTIHandle->pEXTIx->RTSR = ~(1 << positions); // Disable rising edge
 80007b2:	7dfb      	ldrb	r3, [r7, #23]
 80007b4:	2201      	movs	r2, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	e00b      	b.n	80007dc <GPIO_InterHandler+0x74>

	} else { //Detection for both edges
		pEXTIHandle->pEXTIx->FTSR = 1 << positions;
 80007c4:	7dfb      	ldrb	r3, [r7, #23]
 80007c6:	2201      	movs	r2, #1
 80007c8:	409a      	lsls	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	60da      	str	r2, [r3, #12]
		pEXTIHandle->pEXTIx->RTSR = 1 << positions;
 80007d0:	7dfb      	ldrb	r3, [r7, #23]
 80007d2:	2201      	movs	r2, #1
 80007d4:	409a      	lsls	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	609a      	str	r2, [r3, #8]
	}

	// Configure the GPIO port selection in AFIO_EXTICR
	uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4); // To define the EXTI (0-15)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	089b      	lsrs	r3, r3, #2
 80007e2:	75bb      	strb	r3, [r7, #22]
	uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4); // To define the position in the register
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	757b      	strb	r3, [r7, #21]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a27      	ldr	r2, [pc, #156]	; (8000890 <GPIO_InterHandler+0x128>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d02b      	beq.n	8000850 <GPIO_InterHandler+0xe8>
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a25      	ldr	r2, [pc, #148]	; (8000894 <GPIO_InterHandler+0x12c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d024      	beq.n	800084c <GPIO_InterHandler+0xe4>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a24      	ldr	r2, [pc, #144]	; (8000898 <GPIO_InterHandler+0x130>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d01d      	beq.n	8000848 <GPIO_InterHandler+0xe0>
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a22      	ldr	r2, [pc, #136]	; (800089c <GPIO_InterHandler+0x134>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d016      	beq.n	8000844 <GPIO_InterHandler+0xdc>
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <GPIO_InterHandler+0x138>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d00f      	beq.n	8000840 <GPIO_InterHandler+0xd8>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <GPIO_InterHandler+0x13c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d008      	beq.n	800083c <GPIO_InterHandler+0xd4>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <GPIO_InterHandler+0x140>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d101      	bne.n	8000838 <GPIO_InterHandler+0xd0>
 8000834:	2306      	movs	r3, #6
 8000836:	e00c      	b.n	8000852 <GPIO_InterHandler+0xea>
 8000838:	2300      	movs	r3, #0
 800083a:	e00a      	b.n	8000852 <GPIO_InterHandler+0xea>
 800083c:	2305      	movs	r3, #5
 800083e:	e008      	b.n	8000852 <GPIO_InterHandler+0xea>
 8000840:	2304      	movs	r3, #4
 8000842:	e006      	b.n	8000852 <GPIO_InterHandler+0xea>
 8000844:	2303      	movs	r3, #3
 8000846:	e004      	b.n	8000852 <GPIO_InterHandler+0xea>
 8000848:	2302      	movs	r3, #2
 800084a:	e002      	b.n	8000852 <GPIO_InterHandler+0xea>
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <GPIO_InterHandler+0xea>
 8000850:	2300      	movs	r3, #0
 8000852:	753b      	strb	r3, [r7, #20]
	uint8_t aux = temp2*4;
 8000854:	7d7b      	ldrb	r3, [r7, #21]
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	74fb      	strb	r3, [r7, #19]

	AFIO_PCLK_EN(); // RCC enable for AFIO
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <GPIO_InterHandler+0x144>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <GPIO_InterHandler+0x144>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
	pAFIOHandle->pAFIOx->EXTICR[temp1] = portcode << aux;
 8000866:	7d3a      	ldrb	r2, [r7, #20]
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	fa02 f103 	lsl.w	r1, r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	7dba      	ldrb	r2, [r7, #22]
 8000874:	3202      	adds	r2, #2
 8000876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// Enable the EXTI Interrupt delivery using IMR
	pEXTIHandle->pEXTIx->IMR = 1 << positions;
 800087a:	7dfb      	ldrb	r3, [r7, #23]
 800087c:	2201      	movs	r2, #1
 800087e:	409a      	lsls	r2, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	601a      	str	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00
 8000898:	40011000 	.word	0x40011000
 800089c:	40011400 	.word	0x40011400
 80008a0:	40011800 	.word	0x40011800
 80008a4:	40011c00 	.word	0x40011c00
 80008a8:	40012000 	.word	0x40012000
 80008ac:	40021000 	.word	0x40021000

080008b0 <GPIO_IRQConfig>:
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE){
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d133      	bne.n	800092e <GPIO_IRQConfig+0x7e>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	d80a      	bhi.n	80008e2 <GPIO_IRQConfig+0x32>
			*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 80008cc:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <GPIO_IRQConfig+0xf0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <GPIO_IRQConfig+0xf0>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
		}
	}
}
 80008e0:	e059      	b.n	8000996 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d90f      	bls.n	8000908 <GPIO_IRQConfig+0x58>
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	; 0x3f
 80008ec:	d80c      	bhi.n	8000908 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <GPIO_IRQConfig+0xf4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	f002 021f 	and.w	r2, r2, #31
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <GPIO_IRQConfig+0xf4>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e046      	b.n	8000996 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b3f      	cmp	r3, #63	; 0x3f
 800090c:	d943      	bls.n	8000996 <GPIO_IRQConfig+0xe6>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b5f      	cmp	r3, #95	; 0x5f
 8000912:	d840      	bhi.n	8000996 <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <GPIO_IRQConfig+0xf8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <GPIO_IRQConfig+0xf8>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	e033      	b.n	8000996 <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b1f      	cmp	r3, #31
 8000932:	d80a      	bhi.n	800094a <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <GPIO_IRQConfig+0xfc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	2101      	movs	r1, #1
 800093c:	fa01 f202 	lsl.w	r2, r1, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <GPIO_IRQConfig+0xfc>)
 8000944:	430b      	orrs	r3, r1
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	e025      	b.n	8000996 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b1f      	cmp	r3, #31
 800094e:	d90f      	bls.n	8000970 <GPIO_IRQConfig+0xc0>
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b3f      	cmp	r3, #63	; 0x3f
 8000954:	d80c      	bhi.n	8000970 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <GPIO_IRQConfig+0x100>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	f002 021f 	and.w	r2, r2, #31
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f202 	lsl.w	r2, r1, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <GPIO_IRQConfig+0x100>)
 800096a:	430b      	orrs	r3, r1
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	e012      	b.n	8000996 <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b3f      	cmp	r3, #63	; 0x3f
 8000974:	d90f      	bls.n	8000996 <GPIO_IRQConfig+0xe6>
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b5f      	cmp	r3, #95	; 0x5f
 800097a:	d80c      	bhi.n	8000996 <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <GPIO_IRQConfig+0x104>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <GPIO_IRQConfig+0x104>)
 8000990:	430b      	orrs	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	e7ff      	b.n	8000996 <GPIO_IRQConfig+0xe6>
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000e104 	.word	0xe000e104
 80009a8:	e000e108 	.word	0xe000e108
 80009ac:	e000e180 	.word	0xe000e180
 80009b0:	e000e184 	.word	0xe000e184
 80009b4:	e000e188 	.word	0xe000e188

080009b8 <GPIO_IRQPriority>:
 * @param [in]		IRQ Number
 * @param [in]		IRQ Priority
 * @return			None
 * @note 			None
 */
void GPIO_IRQPriority (uint8_t IRQNumber,uint32_t IRQPriority){
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]

	uint8_t iprx =  IRQNumber/4; // Define which IPR Register you have to use (0-59)
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section =  IRQNumber%4; // Define the section on the IPR (0-4) * 8 bc each section is 8 bits
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	73bb      	strb	r3, [r7, #14]
	uint8_t aux =  ((8* iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED)); // This is the arrangement done bc the 4 first bits of each section are not implemented.
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	3304      	adds	r3, #4
 80009da:	737b      	strb	r3, [r7, #13]

	*(NVIC_PRIO_BASEADDR + (iprx)) |= (IRQPriority <<aux);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009e4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	409a      	lsls	r2, r3
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009f8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009fc:	430a      	orrs	r2, r1
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
	...

08000a0c <GPIO_IRQHandling>:
 * @param [in]		Pin Number
 * @return			None
 * @note 			None
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pending Register Corresponding to the Pin Number
	if (EXTI->PR & (1 << PinNumber)){
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <GPIO_IRQHandling+0x3c>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a22:	4013      	ands	r3, r2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <GPIO_IRQHandling+0x3c>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <GPIO_IRQHandling+0x3c>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6153      	str	r3, [r2, #20]
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40010400 	.word	0x40010400

08000a4c <SPI_PeriClkCtrl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d11c      	bne.n	8000a98 <SPI_PeriClkCtrl+0x4c>
		if (pSPIx == SPI1) {
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <SPI_PeriClkCtrl+0x90>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a70:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}  else {
			SPI3_PCLK_DI();
		}
	}
}
 8000a72:	e02d      	b.n	8000ad0 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <SPI_PeriClkCtrl+0x98>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d106      	bne.n	8000a8a <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a86:	61d3      	str	r3, [r2, #28]
}
 8000a88:	e022      	b.n	8000ad0 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_EN();
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a94:	61d3      	str	r3, [r2, #28]
}
 8000a96:	e01b      	b.n	8000ad0 <SPI_PeriClkCtrl+0x84>
		if (pSPIx == SPI1) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <SPI_PeriClkCtrl+0x90>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d106      	bne.n	8000aae <SPI_PeriClkCtrl+0x62>
			SPI1_PCLK_DI();
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aaa:	6193      	str	r3, [r2, #24]
}
 8000aac:	e010      	b.n	8000ad0 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <SPI_PeriClkCtrl+0x98>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <SPI_PeriClkCtrl+0x78>
			SPI2_PCLK_DI();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ac0:	61d3      	str	r3, [r2, #28]
}
 8000ac2:	e005      	b.n	8000ad0 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_DI();
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SPI_PeriClkCtrl+0x94>)
 8000aca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ace:	61d3      	str	r3, [r2, #28]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40013000 	.word	0x40013000
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40003800 	.word	0x40003800

08000ae8 <SPI_Init>:
 * @brief			This functions initializes a given SPI
 * @param [in]		Base Address of the SPI Handle
 * @return			None
 * @note 			None
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

	//Enable clock
	SPI_PeriClkCtrl(pSPIxHandle->pSPIx, ENABLE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ffa8 	bl	8000a4c <SPI_PeriClkCtrl>


	uint32_t temp = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]

	// Configuration of the device mode
	temp |= pSPIxHandle->SPI_Config.SPI_DeviceMode << 2;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]

	// Configuration of the Bus
	if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d104      	bne.n	8000b20 <SPI_Init+0x38>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e014      	b.n	8000b4a <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	795b      	ldrb	r3, [r3, #5]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d104      	bne.n	8000b32 <SPI_Init+0x4a>
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e00b      	b.n	8000b4a <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RSONLY){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	795b      	ldrb	r3, [r3, #5]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d107      	bne.n	8000b4a <SPI_Init+0x62>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b40:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b48:	60fb      	str	r3, [r7, #12]
	}

	// Configuration of the clock speed
	temp |= (pSPIxHandle->SPI_Config.SPI_SCLKSpeed << SPI_CR1_BR);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

	// Configuration of the DFF
	temp |= (pSPIxHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	79db      	ldrb	r3, [r3, #7]
 8000b5c:	02db      	lsls	r3, r3, #11
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPOL
	temp |= (pSPIxHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7a1b      	ldrb	r3, [r3, #8]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPHA
	temp |= (pSPIxHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7a5b      	ldrb	r3, [r3, #9]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

	// Configuration of the SSM
	temp |= (pSPIxHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7a9b      	ldrb	r3, [r3, #10]
 8000b84:	025b      	lsls	r3, r3, #9
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]

	pSPIxHandle->pSPIx->CR1 = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <SPI_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){ // while(!(pSPIx->SR & (1 << 1)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit TXE is one in that register
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000bb8:	2300      	movs	r3, #0
 }
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SPI_SendData_Inter>:
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note 			Blocked communication implemented. The function call will wait until all
 *  				the bytes are transmitted
 */
uint8_t SPI_SendData_Inter(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7d9b      	ldrb	r3, [r3, #22]
 8000bd4:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_TX){
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d011      	beq.n	8000c00 <SPI_SendData_Inter+0x3c>
		// Save the Tx Buffer address and length in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	751a      	strb	r2, [r3, #20]

		// Mark the SPI state as busy in transmission so that no other code cab take over the same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2202      	movs	r2, #2
 8000bee:	759a      	strb	r2, [r3, #22]

		// Enable TXEIE control bit to get an interrupt whenever TXE flag is set
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXNEIE);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bfe:	605a      	str	r2, [r3, #4]

		// Data transmission will be handled by the ISR code
	}

	return state;
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	371c      	adds	r7, #28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SPI_ReceiveData_Inter>:
 * @param [in]		Pointer to the buffer containing the data that is going to be received
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note			None blocking API
 */
uint8_t SPI_ReceiveData_Inter(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RxState;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	7ddb      	ldrb	r3, [r3, #23]
 8000c1c:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_RX){
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d011      	beq.n	8000c48 <SPI_ReceiveData_Inter+0x3c>
		// Save the Tx Buffer address and length in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	755a      	strb	r2, [r3, #21]

		// Mark the SPI state as busy in transmission so that no other code cab take over the same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2201      	movs	r2, #1
 8000c36:	75da      	strb	r2, [r3, #23]

		// Enable TXEIE control bit to get an interrupt whenever TXE flag is set
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c46:	605a      	str	r2, [r3, #4]

		// Data transmission will be handled by the ISR code
	}

	return state;
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <SPI_IRQConfig>:
 * @param [in]		IRQ Priority
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void SPI_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	4613      	mov	r3, r2
 8000c62:	71bb      	strb	r3, [r7, #6]

	if (EnOrDi == ENABLE){
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d133      	bne.n	8000cd2 <SPI_IRQConfig+0x7e>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b1f      	cmp	r3, #31
 8000c6e:	d80a      	bhi.n	8000c86 <SPI_IRQConfig+0x32>
				*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <SPI_IRQConfig+0xf0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	2101      	movs	r1, #1
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4a31      	ldr	r2, [pc, #196]	; (8000d44 <SPI_IRQConfig+0xf0>)
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
			}
		}
}
 8000c84:	e059      	b.n	8000d3a <SPI_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2b1f      	cmp	r3, #31
 8000c8a:	d90f      	bls.n	8000cac <SPI_IRQConfig+0x58>
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c90:	d80c      	bhi.n	8000cac <SPI_IRQConfig+0x58>
				*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <SPI_IRQConfig+0xf4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	79fa      	ldrb	r2, [r7, #7]
 8000c98:	f002 021f 	and.w	r2, r2, #31
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4a28      	ldr	r2, [pc, #160]	; (8000d48 <SPI_IRQConfig+0xf4>)
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e046      	b.n	8000d3a <SPI_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb0:	d943      	bls.n	8000d3a <SPI_IRQConfig+0xe6>
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b5f      	cmp	r3, #95	; 0x5f
 8000cb6:	d840      	bhi.n	8000d3a <SPI_IRQConfig+0xe6>
				*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SPI_IRQConfig+0xf8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <SPI_IRQConfig+0xf8>)
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	e033      	b.n	8000d3a <SPI_IRQConfig+0xe6>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	d80a      	bhi.n	8000cee <SPI_IRQConfig+0x9a>
				*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <SPI_IRQConfig+0xfc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	79fa      	ldrb	r2, [r7, #7]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <SPI_IRQConfig+0xfc>)
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	e025      	b.n	8000d3a <SPI_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b1f      	cmp	r3, #31
 8000cf2:	d90f      	bls.n	8000d14 <SPI_IRQConfig+0xc0>
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cf8:	d80c      	bhi.n	8000d14 <SPI_IRQConfig+0xc0>
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <SPI_IRQConfig+0x100>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	f002 021f 	and.w	r2, r2, #31
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <SPI_IRQConfig+0x100>)
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e012      	b.n	8000d3a <SPI_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2b3f      	cmp	r3, #63	; 0x3f
 8000d18:	d90f      	bls.n	8000d3a <SPI_IRQConfig+0xe6>
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b5f      	cmp	r3, #95	; 0x5f
 8000d1e:	d80c      	bhi.n	8000d3a <SPI_IRQConfig+0xe6>
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <SPI_IRQConfig+0x104>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	4611      	mov	r1, r2
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <SPI_IRQConfig+0x104>)
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	e7ff      	b.n	8000d3a <SPI_IRQConfig+0xe6>
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000e104 	.word	0xe000e104
 8000d4c:	e000e108 	.word	0xe000e108
 8000d50:	e000e180 	.word	0xe000e180
 8000d54:	e000e184 	.word	0xe000e184
 8000d58:	e000e188 	.word	0xe000e188

08000d5c <SPI_IRQHandling>:
 * @brief			This functions process the interrupt
 * @param [in]		SPI handle
 * @return			None
 * @note 			None
 */
void SPI_IRQHandling(SPI_Handle_t *pSPIxHandle){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

	// First, find out why the interrupt happened
	uint8_t temp1, temp2;

	// Check TXE
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_TXE); // Access the TXE in SR to check the value
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	73fb      	strb	r3, [r7, #15]
	// if TXE is set, temp1 = 1. If TXE is reset, temp1 = 0
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_TXNEIE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d7e:	73bb      	strb	r3, [r7, #14]

	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of TXE flag
	if (temp1 && temp2){
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d005      	beq.n	8000d92 <SPI_IRQHandling+0x36>
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <SPI_IRQHandling+0x36>
		// Handle TXE
		SPI_TXE_Interrupt_Handle(pSPIxHandle);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 f868 	bl	8000e62 <SPI_TXE_Interrupt_Handle>
	}

	// Check RXE
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_RXNE); // Access the TXE in SR to check the value
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
	// if TXE is set, temp1 = 1. If TXE is reset, temp1 = 0
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dac:	73bb      	strb	r3, [r7, #14]


	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of RXE flag
	if (temp1 && temp2){
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d005      	beq.n	8000dc0 <SPI_IRQHandling+0x64>
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <SPI_IRQHandling+0x64>
		// Handle RXE
		SPI_RXEN_Interrupt_Handle(pSPIxHandle);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f894 	bl	8000ee8 <SPI_RXEN_Interrupt_Handle>
	}

	// Check OVR
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_OVR); // Access the TXE in SR to check the value
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dcc:	73fb      	strb	r3, [r7, #15]
	// if TXE is set, temp1 = 1. If TXE is reset, temp1 = 0
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	73bb      	strb	r3, [r7, #14]


	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of RXE flag
	if (temp1 && temp2){
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d005      	beq.n	8000dee <SPI_IRQHandling+0x92>
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <SPI_IRQHandling+0x92>
		// Handle RXE
		SPI_OVR_Interrupt_Handle(pSPIxHandle);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f8c0 	bl	8000f6e <SPI_OVR_Interrupt_Handle>
	}

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <SPI_PeripheralControl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000e14:	e005      	b.n	8000e22 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	601a      	str	r2, [r3, #0]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <SPI_SSOEConfig>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d106      	bne.n	8000e4c <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f043 0204 	orr.w	r2, r3, #4
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000e4a:	e005      	b.n	8000e58 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f023 0204 	bic.w	r2, r3, #4
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	605a      	str	r2, [r3, #4]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <SPI_TXE_Interrupt_Handle>:

/* 			  Private helpers functions	implementation   				*/
static void SPI_TXE_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]

	if(pSPIxHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d017      	beq.n	8000ea8 <SPI_TXE_Interrupt_Handle+0x46>
		pSPIxHandle->pSPIx->DR = *((uint16_t*)pSPIxHandle->pTxBuffer); // Dereference the pointer to get the data
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	60da      	str	r2, [r3, #12]
		pSPIxHandle->TxLen--;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7d1b      	ldrb	r3, [r3, #20]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	751a      	strb	r2, [r3, #20]
		pSPIxHandle->TxLen--; // 2 bytes to decrease
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7d1b      	ldrb	r3, [r3, #20]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	751a      	strb	r2, [r3, #20]
		(uint16_t*)pSPIxHandle->pTxBuffer++;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	e010      	b.n	8000eca <SPI_TXE_Interrupt_Handle+0x68>

	} else {
		pSPIxHandle->pSPIx->DR = *pSPIxHandle->pTxBuffer;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60da      	str	r2, [r3, #12]
		pSPIxHandle->TxLen--;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7d1b      	ldrb	r3, [r3, #20]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	751a      	strb	r2, [r3, #20]
		pSPIxHandle->pTxBuffer++;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60da      	str	r2, [r3, #12]
	}

	if (! pSPIxHandle->TxLen ) { // When Length is zero, close SPI transmission
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	7d1b      	ldrb	r3, [r3, #20]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <SPI_TXE_Interrupt_Handle+0x7e>
		SPI_CloseTransmission(pSPIxHandle);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f863 	bl	8000f9e <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIxHandle, SPI_EVENT_TX_COMPLETE);
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fa3c 	bl	8000358 <SPI_ApplicationEventCallback>
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SPI_RXEN_Interrupt_Handle>:

static void SPI_RXEN_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	if(pSPIxHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d017      	beq.n	8000f2e <SPI_RXEN_Interrupt_Handle+0x46>
		pSPIxHandle->pSPIx->DR = *((uint16_t*)pSPIxHandle->pRxBuffer); // Dereference the pointer to get the data
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	881a      	ldrh	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60da      	str	r2, [r3, #12]
		pSPIxHandle->RxLen--;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7d5b      	ldrb	r3, [r3, #21]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	755a      	strb	r2, [r3, #21]
		pSPIxHandle->RxLen--; // 2 bytes to decrease
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7d5b      	ldrb	r3, [r3, #21]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	755a      	strb	r2, [r3, #21]
		(uint16_t*)pSPIxHandle->pRxBuffer++;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	e010      	b.n	8000f50 <SPI_RXEN_Interrupt_Handle+0x68>

	} else {
		pSPIxHandle->pSPIx->DR = *pSPIxHandle->pRxBuffer;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60da      	str	r2, [r3, #12]
		pSPIxHandle->RxLen--;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7d5b      	ldrb	r3, [r3, #21]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	755a      	strb	r2, [r3, #21]
		pSPIxHandle->pRxBuffer++;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
	}

	if (! pSPIxHandle->RxLen ) { // When Length is zero, close SPI transmission
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7d5b      	ldrb	r3, [r3, #21]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <SPI_RXEN_Interrupt_Handle+0x7e>
		SPI_CloseReception(pSPIxHandle);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f83a 	bl	8000fd2 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIxHandle,SPI_EVENT_RX_COMPLETE);
 8000f5e:	2102      	movs	r1, #2
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff f9f9 	bl	8000358 <SPI_ApplicationEventCallback>
	}
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <SPI_OVR_Interrupt_Handle>:

static void SPI_OVR_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]

	// Clear OVR flag
	uint8_t temp;
	if (pSPIxHandle->TxState != SPI_BUSY_IN_TX){
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7d9b      	ldrb	r3, [r3, #22]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d007      	beq.n	8000f8e <SPI_OVR_Interrupt_Handle+0x20>
		temp = pSPIxHandle->pSPIx->DR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	73fb      	strb	r3, [r7, #15]
		temp = pSPIxHandle->pSPIx->SR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	73fb      	strb	r3, [r7, #15]
	}

	(void)temp; // To avoid the warning that the avariable is not being used

	// Inform application
	SPI_ApplicationEventCallback(pSPIxHandle,SPI_EVENT_OVR_COMPLETE);
 8000f8e:	2103      	movs	r1, #3
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff f9e1 	bl	8000358 <SPI_ApplicationEventCallback>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <SPI_CloseTransmission>:
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseTransmission(SPI_Handle_t *pSPIxHandle){
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]

	pSPIxHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXNEIE); // This prevents interrupts from TXE flag
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fb4:	605a      	str	r2, [r3, #4]
	pSPIxHandle->pTxBuffer = NULL;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
	pSPIxHandle->TxLen = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	751a      	strb	r2, [r3, #20]
	pSPIxHandle ->TxState = SPI_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	759a      	strb	r2, [r3, #22]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIxHandle){
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]

	pSPIxHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE); // This prevents interrupts from TXE flag
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fe8:	605a      	str	r2, [r3, #4]
	pSPIxHandle->pRxBuffer = NULL;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
	pSPIxHandle->RxLen = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	755a      	strb	r2, [r3, #21]
	pSPIxHandle ->RxState = SPI_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	75da      	strb	r2, [r3, #23]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <__errno>:
 8001008:	4b01      	ldr	r3, [pc, #4]	; (8001010 <__errno+0x8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000

08001014 <__libc_init_array>:
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	2500      	movs	r5, #0
 8001018:	4e0c      	ldr	r6, [pc, #48]	; (800104c <__libc_init_array+0x38>)
 800101a:	4c0d      	ldr	r4, [pc, #52]	; (8001050 <__libc_init_array+0x3c>)
 800101c:	1ba4      	subs	r4, r4, r6
 800101e:	10a4      	asrs	r4, r4, #2
 8001020:	42a5      	cmp	r5, r4
 8001022:	d109      	bne.n	8001038 <__libc_init_array+0x24>
 8001024:	f001 f862 	bl	80020ec <_init>
 8001028:	2500      	movs	r5, #0
 800102a:	4e0a      	ldr	r6, [pc, #40]	; (8001054 <__libc_init_array+0x40>)
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <__libc_init_array+0x44>)
 800102e:	1ba4      	subs	r4, r4, r6
 8001030:	10a4      	asrs	r4, r4, #2
 8001032:	42a5      	cmp	r5, r4
 8001034:	d105      	bne.n	8001042 <__libc_init_array+0x2e>
 8001036:	bd70      	pop	{r4, r5, r6, pc}
 8001038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800103c:	4798      	blx	r3
 800103e:	3501      	adds	r5, #1
 8001040:	e7ee      	b.n	8001020 <__libc_init_array+0xc>
 8001042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001046:	4798      	blx	r3
 8001048:	3501      	adds	r5, #1
 800104a:	e7f2      	b.n	8001032 <__libc_init_array+0x1e>
 800104c:	080021ac 	.word	0x080021ac
 8001050:	080021ac 	.word	0x080021ac
 8001054:	080021ac 	.word	0x080021ac
 8001058:	080021b0 	.word	0x080021b0

0800105c <memset>:
 800105c:	4603      	mov	r3, r0
 800105e:	4402      	add	r2, r0
 8001060:	4293      	cmp	r3, r2
 8001062:	d100      	bne.n	8001066 <memset+0xa>
 8001064:	4770      	bx	lr
 8001066:	f803 1b01 	strb.w	r1, [r3], #1
 800106a:	e7f9      	b.n	8001060 <memset+0x4>

0800106c <iprintf>:
 800106c:	b40f      	push	{r0, r1, r2, r3}
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <iprintf+0x2c>)
 8001070:	b513      	push	{r0, r1, r4, lr}
 8001072:	681c      	ldr	r4, [r3, #0]
 8001074:	b124      	cbz	r4, 8001080 <iprintf+0x14>
 8001076:	69a3      	ldr	r3, [r4, #24]
 8001078:	b913      	cbnz	r3, 8001080 <iprintf+0x14>
 800107a:	4620      	mov	r0, r4
 800107c:	f000 f84e 	bl	800111c <__sinit>
 8001080:	ab05      	add	r3, sp, #20
 8001082:	9a04      	ldr	r2, [sp, #16]
 8001084:	68a1      	ldr	r1, [r4, #8]
 8001086:	4620      	mov	r0, r4
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f000 f953 	bl	8001334 <_vfiprintf_r>
 800108e:	b002      	add	sp, #8
 8001090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001094:	b004      	add	sp, #16
 8001096:	4770      	bx	lr
 8001098:	20000000 	.word	0x20000000

0800109c <std>:
 800109c:	2300      	movs	r3, #0
 800109e:	b510      	push	{r4, lr}
 80010a0:	4604      	mov	r4, r0
 80010a2:	e9c0 3300 	strd	r3, r3, [r0]
 80010a6:	6083      	str	r3, [r0, #8]
 80010a8:	8181      	strh	r1, [r0, #12]
 80010aa:	6643      	str	r3, [r0, #100]	; 0x64
 80010ac:	81c2      	strh	r2, [r0, #14]
 80010ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010b2:	6183      	str	r3, [r0, #24]
 80010b4:	4619      	mov	r1, r3
 80010b6:	2208      	movs	r2, #8
 80010b8:	305c      	adds	r0, #92	; 0x5c
 80010ba:	f7ff ffcf 	bl	800105c <memset>
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <std+0x38>)
 80010c0:	6224      	str	r4, [r4, #32]
 80010c2:	6263      	str	r3, [r4, #36]	; 0x24
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <std+0x3c>)
 80010c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <std+0x40>)
 80010ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <std+0x44>)
 80010ce:	6323      	str	r3, [r4, #48]	; 0x30
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop
 80010d4:	08001891 	.word	0x08001891
 80010d8:	080018b3 	.word	0x080018b3
 80010dc:	080018eb 	.word	0x080018eb
 80010e0:	0800190f 	.word	0x0800190f

080010e4 <_cleanup_r>:
 80010e4:	4901      	ldr	r1, [pc, #4]	; (80010ec <_cleanup_r+0x8>)
 80010e6:	f000 b885 	b.w	80011f4 <_fwalk_reent>
 80010ea:	bf00      	nop
 80010ec:	08001be9 	.word	0x08001be9

080010f0 <__sfmoreglue>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	2568      	movs	r5, #104	; 0x68
 80010f4:	1e4a      	subs	r2, r1, #1
 80010f6:	4355      	muls	r5, r2
 80010f8:	460e      	mov	r6, r1
 80010fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010fe:	f000 f897 	bl	8001230 <_malloc_r>
 8001102:	4604      	mov	r4, r0
 8001104:	b140      	cbz	r0, 8001118 <__sfmoreglue+0x28>
 8001106:	2100      	movs	r1, #0
 8001108:	e9c0 1600 	strd	r1, r6, [r0]
 800110c:	300c      	adds	r0, #12
 800110e:	60a0      	str	r0, [r4, #8]
 8001110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001114:	f7ff ffa2 	bl	800105c <memset>
 8001118:	4620      	mov	r0, r4
 800111a:	bd70      	pop	{r4, r5, r6, pc}

0800111c <__sinit>:
 800111c:	6983      	ldr	r3, [r0, #24]
 800111e:	b510      	push	{r4, lr}
 8001120:	4604      	mov	r4, r0
 8001122:	bb33      	cbnz	r3, 8001172 <__sinit+0x56>
 8001124:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001128:	6503      	str	r3, [r0, #80]	; 0x50
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <__sinit+0x58>)
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <__sinit+0x5c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6282      	str	r2, [r0, #40]	; 0x28
 8001132:	4298      	cmp	r0, r3
 8001134:	bf04      	itt	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	6183      	streq	r3, [r0, #24]
 800113a:	f000 f81f 	bl	800117c <__sfp>
 800113e:	6060      	str	r0, [r4, #4]
 8001140:	4620      	mov	r0, r4
 8001142:	f000 f81b 	bl	800117c <__sfp>
 8001146:	60a0      	str	r0, [r4, #8]
 8001148:	4620      	mov	r0, r4
 800114a:	f000 f817 	bl	800117c <__sfp>
 800114e:	2200      	movs	r2, #0
 8001150:	60e0      	str	r0, [r4, #12]
 8001152:	2104      	movs	r1, #4
 8001154:	6860      	ldr	r0, [r4, #4]
 8001156:	f7ff ffa1 	bl	800109c <std>
 800115a:	2201      	movs	r2, #1
 800115c:	2109      	movs	r1, #9
 800115e:	68a0      	ldr	r0, [r4, #8]
 8001160:	f7ff ff9c 	bl	800109c <std>
 8001164:	2202      	movs	r2, #2
 8001166:	2112      	movs	r1, #18
 8001168:	68e0      	ldr	r0, [r4, #12]
 800116a:	f7ff ff97 	bl	800109c <std>
 800116e:	2301      	movs	r3, #1
 8001170:	61a3      	str	r3, [r4, #24]
 8001172:	bd10      	pop	{r4, pc}
 8001174:	08002114 	.word	0x08002114
 8001178:	080010e5 	.word	0x080010e5

0800117c <__sfp>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <__sfp+0x70>)
 8001180:	4607      	mov	r7, r0
 8001182:	681e      	ldr	r6, [r3, #0]
 8001184:	69b3      	ldr	r3, [r6, #24]
 8001186:	b913      	cbnz	r3, 800118e <__sfp+0x12>
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff ffc7 	bl	800111c <__sinit>
 800118e:	3648      	adds	r6, #72	; 0x48
 8001190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001194:	3b01      	subs	r3, #1
 8001196:	d503      	bpl.n	80011a0 <__sfp+0x24>
 8001198:	6833      	ldr	r3, [r6, #0]
 800119a:	b133      	cbz	r3, 80011aa <__sfp+0x2e>
 800119c:	6836      	ldr	r6, [r6, #0]
 800119e:	e7f7      	b.n	8001190 <__sfp+0x14>
 80011a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80011a4:	b16d      	cbz	r5, 80011c2 <__sfp+0x46>
 80011a6:	3468      	adds	r4, #104	; 0x68
 80011a8:	e7f4      	b.n	8001194 <__sfp+0x18>
 80011aa:	2104      	movs	r1, #4
 80011ac:	4638      	mov	r0, r7
 80011ae:	f7ff ff9f 	bl	80010f0 <__sfmoreglue>
 80011b2:	6030      	str	r0, [r6, #0]
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d1f1      	bne.n	800119c <__sfp+0x20>
 80011b8:	230c      	movs	r3, #12
 80011ba:	4604      	mov	r4, r0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4620      	mov	r0, r4
 80011c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <__sfp+0x74>)
 80011c4:	6665      	str	r5, [r4, #100]	; 0x64
 80011c6:	e9c4 5500 	strd	r5, r5, [r4]
 80011ca:	60a5      	str	r5, [r4, #8]
 80011cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80011d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80011d4:	2208      	movs	r2, #8
 80011d6:	4629      	mov	r1, r5
 80011d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011dc:	f7ff ff3e 	bl	800105c <memset>
 80011e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011e8:	e7e9      	b.n	80011be <__sfp+0x42>
 80011ea:	bf00      	nop
 80011ec:	08002114 	.word	0x08002114
 80011f0:	ffff0001 	.word	0xffff0001

080011f4 <_fwalk_reent>:
 80011f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f8:	4680      	mov	r8, r0
 80011fa:	4689      	mov	r9, r1
 80011fc:	2600      	movs	r6, #0
 80011fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001202:	b914      	cbnz	r4, 800120a <_fwalk_reent+0x16>
 8001204:	4630      	mov	r0, r6
 8001206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800120a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800120e:	3f01      	subs	r7, #1
 8001210:	d501      	bpl.n	8001216 <_fwalk_reent+0x22>
 8001212:	6824      	ldr	r4, [r4, #0]
 8001214:	e7f5      	b.n	8001202 <_fwalk_reent+0xe>
 8001216:	89ab      	ldrh	r3, [r5, #12]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d907      	bls.n	800122c <_fwalk_reent+0x38>
 800121c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	d003      	beq.n	800122c <_fwalk_reent+0x38>
 8001224:	4629      	mov	r1, r5
 8001226:	4640      	mov	r0, r8
 8001228:	47c8      	blx	r9
 800122a:	4306      	orrs	r6, r0
 800122c:	3568      	adds	r5, #104	; 0x68
 800122e:	e7ee      	b.n	800120e <_fwalk_reent+0x1a>

08001230 <_malloc_r>:
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	1ccd      	adds	r5, r1, #3
 8001234:	f025 0503 	bic.w	r5, r5, #3
 8001238:	3508      	adds	r5, #8
 800123a:	2d0c      	cmp	r5, #12
 800123c:	bf38      	it	cc
 800123e:	250c      	movcc	r5, #12
 8001240:	2d00      	cmp	r5, #0
 8001242:	4606      	mov	r6, r0
 8001244:	db01      	blt.n	800124a <_malloc_r+0x1a>
 8001246:	42a9      	cmp	r1, r5
 8001248:	d903      	bls.n	8001252 <_malloc_r+0x22>
 800124a:	230c      	movs	r3, #12
 800124c:	6033      	str	r3, [r6, #0]
 800124e:	2000      	movs	r0, #0
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	f000 fd77 	bl	8001d44 <__malloc_lock>
 8001256:	4a21      	ldr	r2, [pc, #132]	; (80012dc <_malloc_r+0xac>)
 8001258:	6814      	ldr	r4, [r2, #0]
 800125a:	4621      	mov	r1, r4
 800125c:	b991      	cbnz	r1, 8001284 <_malloc_r+0x54>
 800125e:	4c20      	ldr	r4, [pc, #128]	; (80012e0 <_malloc_r+0xb0>)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	b91b      	cbnz	r3, 800126c <_malloc_r+0x3c>
 8001264:	4630      	mov	r0, r6
 8001266:	f000 fb03 	bl	8001870 <_sbrk_r>
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	4629      	mov	r1, r5
 800126e:	4630      	mov	r0, r6
 8001270:	f000 fafe 	bl	8001870 <_sbrk_r>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d124      	bne.n	80012c2 <_malloc_r+0x92>
 8001278:	230c      	movs	r3, #12
 800127a:	4630      	mov	r0, r6
 800127c:	6033      	str	r3, [r6, #0]
 800127e:	f000 fd62 	bl	8001d46 <__malloc_unlock>
 8001282:	e7e4      	b.n	800124e <_malloc_r+0x1e>
 8001284:	680b      	ldr	r3, [r1, #0]
 8001286:	1b5b      	subs	r3, r3, r5
 8001288:	d418      	bmi.n	80012bc <_malloc_r+0x8c>
 800128a:	2b0b      	cmp	r3, #11
 800128c:	d90f      	bls.n	80012ae <_malloc_r+0x7e>
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	18cc      	adds	r4, r1, r3
 8001292:	50cd      	str	r5, [r1, r3]
 8001294:	4630      	mov	r0, r6
 8001296:	f000 fd56 	bl	8001d46 <__malloc_unlock>
 800129a:	f104 000b 	add.w	r0, r4, #11
 800129e:	1d23      	adds	r3, r4, #4
 80012a0:	f020 0007 	bic.w	r0, r0, #7
 80012a4:	1ac3      	subs	r3, r0, r3
 80012a6:	d0d3      	beq.n	8001250 <_malloc_r+0x20>
 80012a8:	425a      	negs	r2, r3
 80012aa:	50e2      	str	r2, [r4, r3]
 80012ac:	e7d0      	b.n	8001250 <_malloc_r+0x20>
 80012ae:	684b      	ldr	r3, [r1, #4]
 80012b0:	428c      	cmp	r4, r1
 80012b2:	bf16      	itet	ne
 80012b4:	6063      	strne	r3, [r4, #4]
 80012b6:	6013      	streq	r3, [r2, #0]
 80012b8:	460c      	movne	r4, r1
 80012ba:	e7eb      	b.n	8001294 <_malloc_r+0x64>
 80012bc:	460c      	mov	r4, r1
 80012be:	6849      	ldr	r1, [r1, #4]
 80012c0:	e7cc      	b.n	800125c <_malloc_r+0x2c>
 80012c2:	1cc4      	adds	r4, r0, #3
 80012c4:	f024 0403 	bic.w	r4, r4, #3
 80012c8:	42a0      	cmp	r0, r4
 80012ca:	d005      	beq.n	80012d8 <_malloc_r+0xa8>
 80012cc:	1a21      	subs	r1, r4, r0
 80012ce:	4630      	mov	r0, r6
 80012d0:	f000 face 	bl	8001870 <_sbrk_r>
 80012d4:	3001      	adds	r0, #1
 80012d6:	d0cf      	beq.n	8001278 <_malloc_r+0x48>
 80012d8:	6025      	str	r5, [r4, #0]
 80012da:	e7db      	b.n	8001294 <_malloc_r+0x64>
 80012dc:	2000008c 	.word	0x2000008c
 80012e0:	20000090 	.word	0x20000090

080012e4 <__sfputc_r>:
 80012e4:	6893      	ldr	r3, [r2, #8]
 80012e6:	b410      	push	{r4}
 80012e8:	3b01      	subs	r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	6093      	str	r3, [r2, #8]
 80012ee:	da07      	bge.n	8001300 <__sfputc_r+0x1c>
 80012f0:	6994      	ldr	r4, [r2, #24]
 80012f2:	42a3      	cmp	r3, r4
 80012f4:	db01      	blt.n	80012fa <__sfputc_r+0x16>
 80012f6:	290a      	cmp	r1, #10
 80012f8:	d102      	bne.n	8001300 <__sfputc_r+0x1c>
 80012fa:	bc10      	pop	{r4}
 80012fc:	f000 bb0c 	b.w	8001918 <__swbuf_r>
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	1c58      	adds	r0, r3, #1
 8001304:	6010      	str	r0, [r2, #0]
 8001306:	7019      	strb	r1, [r3, #0]
 8001308:	4608      	mov	r0, r1
 800130a:	bc10      	pop	{r4}
 800130c:	4770      	bx	lr

0800130e <__sfputs_r>:
 800130e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001310:	4606      	mov	r6, r0
 8001312:	460f      	mov	r7, r1
 8001314:	4614      	mov	r4, r2
 8001316:	18d5      	adds	r5, r2, r3
 8001318:	42ac      	cmp	r4, r5
 800131a:	d101      	bne.n	8001320 <__sfputs_r+0x12>
 800131c:	2000      	movs	r0, #0
 800131e:	e007      	b.n	8001330 <__sfputs_r+0x22>
 8001320:	463a      	mov	r2, r7
 8001322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff ffdc 	bl	80012e4 <__sfputc_r>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d1f3      	bne.n	8001318 <__sfputs_r+0xa>
 8001330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001334 <_vfiprintf_r>:
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	460c      	mov	r4, r1
 800133a:	b09d      	sub	sp, #116	; 0x74
 800133c:	4617      	mov	r7, r2
 800133e:	461d      	mov	r5, r3
 8001340:	4606      	mov	r6, r0
 8001342:	b118      	cbz	r0, 800134c <_vfiprintf_r+0x18>
 8001344:	6983      	ldr	r3, [r0, #24]
 8001346:	b90b      	cbnz	r3, 800134c <_vfiprintf_r+0x18>
 8001348:	f7ff fee8 	bl	800111c <__sinit>
 800134c:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <_vfiprintf_r+0x20c>)
 800134e:	429c      	cmp	r4, r3
 8001350:	d158      	bne.n	8001404 <_vfiprintf_r+0xd0>
 8001352:	6874      	ldr	r4, [r6, #4]
 8001354:	89a3      	ldrh	r3, [r4, #12]
 8001356:	0718      	lsls	r0, r3, #28
 8001358:	d55e      	bpl.n	8001418 <_vfiprintf_r+0xe4>
 800135a:	6923      	ldr	r3, [r4, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d05b      	beq.n	8001418 <_vfiprintf_r+0xe4>
 8001360:	2300      	movs	r3, #0
 8001362:	9309      	str	r3, [sp, #36]	; 0x24
 8001364:	2320      	movs	r3, #32
 8001366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800136a:	2330      	movs	r3, #48	; 0x30
 800136c:	f04f 0b01 	mov.w	fp, #1
 8001370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001374:	9503      	str	r5, [sp, #12]
 8001376:	46b8      	mov	r8, r7
 8001378:	4645      	mov	r5, r8
 800137a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800137e:	b10b      	cbz	r3, 8001384 <_vfiprintf_r+0x50>
 8001380:	2b25      	cmp	r3, #37	; 0x25
 8001382:	d154      	bne.n	800142e <_vfiprintf_r+0xfa>
 8001384:	ebb8 0a07 	subs.w	sl, r8, r7
 8001388:	d00b      	beq.n	80013a2 <_vfiprintf_r+0x6e>
 800138a:	4653      	mov	r3, sl
 800138c:	463a      	mov	r2, r7
 800138e:	4621      	mov	r1, r4
 8001390:	4630      	mov	r0, r6
 8001392:	f7ff ffbc 	bl	800130e <__sfputs_r>
 8001396:	3001      	adds	r0, #1
 8001398:	f000 80c2 	beq.w	8001520 <_vfiprintf_r+0x1ec>
 800139c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800139e:	4453      	add	r3, sl
 80013a0:	9309      	str	r3, [sp, #36]	; 0x24
 80013a2:	f898 3000 	ldrb.w	r3, [r8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80ba 	beq.w	8001520 <_vfiprintf_r+0x1ec>
 80013ac:	2300      	movs	r3, #0
 80013ae:	f04f 32ff 	mov.w	r2, #4294967295
 80013b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013b6:	9304      	str	r3, [sp, #16]
 80013b8:	9307      	str	r3, [sp, #28]
 80013ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013be:	931a      	str	r3, [sp, #104]	; 0x68
 80013c0:	46a8      	mov	r8, r5
 80013c2:	2205      	movs	r2, #5
 80013c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80013c8:	485e      	ldr	r0, [pc, #376]	; (8001544 <_vfiprintf_r+0x210>)
 80013ca:	f000 fcad 	bl	8001d28 <memchr>
 80013ce:	9b04      	ldr	r3, [sp, #16]
 80013d0:	bb78      	cbnz	r0, 8001432 <_vfiprintf_r+0xfe>
 80013d2:	06d9      	lsls	r1, r3, #27
 80013d4:	bf44      	itt	mi
 80013d6:	2220      	movmi	r2, #32
 80013d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80013dc:	071a      	lsls	r2, r3, #28
 80013de:	bf44      	itt	mi
 80013e0:	222b      	movmi	r2, #43	; 0x2b
 80013e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80013e6:	782a      	ldrb	r2, [r5, #0]
 80013e8:	2a2a      	cmp	r2, #42	; 0x2a
 80013ea:	d02a      	beq.n	8001442 <_vfiprintf_r+0x10e>
 80013ec:	46a8      	mov	r8, r5
 80013ee:	2000      	movs	r0, #0
 80013f0:	250a      	movs	r5, #10
 80013f2:	9a07      	ldr	r2, [sp, #28]
 80013f4:	4641      	mov	r1, r8
 80013f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013fa:	3b30      	subs	r3, #48	; 0x30
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	d969      	bls.n	80014d4 <_vfiprintf_r+0x1a0>
 8001400:	b360      	cbz	r0, 800145c <_vfiprintf_r+0x128>
 8001402:	e024      	b.n	800144e <_vfiprintf_r+0x11a>
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <_vfiprintf_r+0x214>)
 8001406:	429c      	cmp	r4, r3
 8001408:	d101      	bne.n	800140e <_vfiprintf_r+0xda>
 800140a:	68b4      	ldr	r4, [r6, #8]
 800140c:	e7a2      	b.n	8001354 <_vfiprintf_r+0x20>
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <_vfiprintf_r+0x218>)
 8001410:	429c      	cmp	r4, r3
 8001412:	bf08      	it	eq
 8001414:	68f4      	ldreq	r4, [r6, #12]
 8001416:	e79d      	b.n	8001354 <_vfiprintf_r+0x20>
 8001418:	4621      	mov	r1, r4
 800141a:	4630      	mov	r0, r6
 800141c:	f000 fae0 	bl	80019e0 <__swsetup_r>
 8001420:	2800      	cmp	r0, #0
 8001422:	d09d      	beq.n	8001360 <_vfiprintf_r+0x2c>
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	b01d      	add	sp, #116	; 0x74
 800142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142e:	46a8      	mov	r8, r5
 8001430:	e7a2      	b.n	8001378 <_vfiprintf_r+0x44>
 8001432:	4a44      	ldr	r2, [pc, #272]	; (8001544 <_vfiprintf_r+0x210>)
 8001434:	4645      	mov	r5, r8
 8001436:	1a80      	subs	r0, r0, r2
 8001438:	fa0b f000 	lsl.w	r0, fp, r0
 800143c:	4318      	orrs	r0, r3
 800143e:	9004      	str	r0, [sp, #16]
 8001440:	e7be      	b.n	80013c0 <_vfiprintf_r+0x8c>
 8001442:	9a03      	ldr	r2, [sp, #12]
 8001444:	1d11      	adds	r1, r2, #4
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	9103      	str	r1, [sp, #12]
 800144a:	2a00      	cmp	r2, #0
 800144c:	db01      	blt.n	8001452 <_vfiprintf_r+0x11e>
 800144e:	9207      	str	r2, [sp, #28]
 8001450:	e004      	b.n	800145c <_vfiprintf_r+0x128>
 8001452:	4252      	negs	r2, r2
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	9207      	str	r2, [sp, #28]
 800145a:	9304      	str	r3, [sp, #16]
 800145c:	f898 3000 	ldrb.w	r3, [r8]
 8001460:	2b2e      	cmp	r3, #46	; 0x2e
 8001462:	d10e      	bne.n	8001482 <_vfiprintf_r+0x14e>
 8001464:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001468:	2b2a      	cmp	r3, #42	; 0x2a
 800146a:	d138      	bne.n	80014de <_vfiprintf_r+0x1aa>
 800146c:	9b03      	ldr	r3, [sp, #12]
 800146e:	f108 0802 	add.w	r8, r8, #2
 8001472:	1d1a      	adds	r2, r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	9203      	str	r2, [sp, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bfb8      	it	lt
 800147c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001480:	9305      	str	r3, [sp, #20]
 8001482:	4d33      	ldr	r5, [pc, #204]	; (8001550 <_vfiprintf_r+0x21c>)
 8001484:	2203      	movs	r2, #3
 8001486:	f898 1000 	ldrb.w	r1, [r8]
 800148a:	4628      	mov	r0, r5
 800148c:	f000 fc4c 	bl	8001d28 <memchr>
 8001490:	b140      	cbz	r0, 80014a4 <_vfiprintf_r+0x170>
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	1b40      	subs	r0, r0, r5
 8001496:	fa03 f000 	lsl.w	r0, r3, r0
 800149a:	9b04      	ldr	r3, [sp, #16]
 800149c:	f108 0801 	add.w	r8, r8, #1
 80014a0:	4303      	orrs	r3, r0
 80014a2:	9304      	str	r3, [sp, #16]
 80014a4:	f898 1000 	ldrb.w	r1, [r8]
 80014a8:	2206      	movs	r2, #6
 80014aa:	482a      	ldr	r0, [pc, #168]	; (8001554 <_vfiprintf_r+0x220>)
 80014ac:	f108 0701 	add.w	r7, r8, #1
 80014b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014b4:	f000 fc38 	bl	8001d28 <memchr>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d037      	beq.n	800152c <_vfiprintf_r+0x1f8>
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <_vfiprintf_r+0x224>)
 80014be:	bb1b      	cbnz	r3, 8001508 <_vfiprintf_r+0x1d4>
 80014c0:	9b03      	ldr	r3, [sp, #12]
 80014c2:	3307      	adds	r3, #7
 80014c4:	f023 0307 	bic.w	r3, r3, #7
 80014c8:	3308      	adds	r3, #8
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ce:	444b      	add	r3, r9
 80014d0:	9309      	str	r3, [sp, #36]	; 0x24
 80014d2:	e750      	b.n	8001376 <_vfiprintf_r+0x42>
 80014d4:	fb05 3202 	mla	r2, r5, r2, r3
 80014d8:	2001      	movs	r0, #1
 80014da:	4688      	mov	r8, r1
 80014dc:	e78a      	b.n	80013f4 <_vfiprintf_r+0xc0>
 80014de:	2300      	movs	r3, #0
 80014e0:	250a      	movs	r5, #10
 80014e2:	4619      	mov	r1, r3
 80014e4:	f108 0801 	add.w	r8, r8, #1
 80014e8:	9305      	str	r3, [sp, #20]
 80014ea:	4640      	mov	r0, r8
 80014ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014f0:	3a30      	subs	r2, #48	; 0x30
 80014f2:	2a09      	cmp	r2, #9
 80014f4:	d903      	bls.n	80014fe <_vfiprintf_r+0x1ca>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0c3      	beq.n	8001482 <_vfiprintf_r+0x14e>
 80014fa:	9105      	str	r1, [sp, #20]
 80014fc:	e7c1      	b.n	8001482 <_vfiprintf_r+0x14e>
 80014fe:	fb05 2101 	mla	r1, r5, r1, r2
 8001502:	2301      	movs	r3, #1
 8001504:	4680      	mov	r8, r0
 8001506:	e7f0      	b.n	80014ea <_vfiprintf_r+0x1b6>
 8001508:	ab03      	add	r3, sp, #12
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	4622      	mov	r2, r4
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <_vfiprintf_r+0x228>)
 8001510:	a904      	add	r1, sp, #16
 8001512:	4630      	mov	r0, r6
 8001514:	f3af 8000 	nop.w
 8001518:	f1b0 3fff 	cmp.w	r0, #4294967295
 800151c:	4681      	mov	r9, r0
 800151e:	d1d5      	bne.n	80014cc <_vfiprintf_r+0x198>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	065b      	lsls	r3, r3, #25
 8001524:	f53f af7e 	bmi.w	8001424 <_vfiprintf_r+0xf0>
 8001528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800152a:	e77d      	b.n	8001428 <_vfiprintf_r+0xf4>
 800152c:	ab03      	add	r3, sp, #12
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4622      	mov	r2, r4
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <_vfiprintf_r+0x228>)
 8001534:	a904      	add	r1, sp, #16
 8001536:	4630      	mov	r0, r6
 8001538:	f000 f888 	bl	800164c <_printf_i>
 800153c:	e7ec      	b.n	8001518 <_vfiprintf_r+0x1e4>
 800153e:	bf00      	nop
 8001540:	08002138 	.word	0x08002138
 8001544:	08002178 	.word	0x08002178
 8001548:	08002158 	.word	0x08002158
 800154c:	08002118 	.word	0x08002118
 8001550:	0800217e 	.word	0x0800217e
 8001554:	08002182 	.word	0x08002182
 8001558:	00000000 	.word	0x00000000
 800155c:	0800130f 	.word	0x0800130f

08001560 <_printf_common>:
 8001560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001564:	4691      	mov	r9, r2
 8001566:	461f      	mov	r7, r3
 8001568:	688a      	ldr	r2, [r1, #8]
 800156a:	690b      	ldr	r3, [r1, #16]
 800156c:	4606      	mov	r6, r0
 800156e:	4293      	cmp	r3, r2
 8001570:	bfb8      	it	lt
 8001572:	4613      	movlt	r3, r2
 8001574:	f8c9 3000 	str.w	r3, [r9]
 8001578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800157c:	460c      	mov	r4, r1
 800157e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001582:	b112      	cbz	r2, 800158a <_printf_common+0x2a>
 8001584:	3301      	adds	r3, #1
 8001586:	f8c9 3000 	str.w	r3, [r9]
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	0699      	lsls	r1, r3, #26
 800158e:	bf42      	ittt	mi
 8001590:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001594:	3302      	addmi	r3, #2
 8001596:	f8c9 3000 	strmi.w	r3, [r9]
 800159a:	6825      	ldr	r5, [r4, #0]
 800159c:	f015 0506 	ands.w	r5, r5, #6
 80015a0:	d107      	bne.n	80015b2 <_printf_common+0x52>
 80015a2:	f104 0a19 	add.w	sl, r4, #25
 80015a6:	68e3      	ldr	r3, [r4, #12]
 80015a8:	f8d9 2000 	ldr.w	r2, [r9]
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	dc29      	bgt.n	8001606 <_printf_common+0xa6>
 80015b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	3300      	adds	r3, #0
 80015ba:	bf18      	it	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	0692      	lsls	r2, r2, #26
 80015c0:	d42e      	bmi.n	8001620 <_printf_common+0xc0>
 80015c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015c6:	4639      	mov	r1, r7
 80015c8:	4630      	mov	r0, r6
 80015ca:	47c0      	blx	r8
 80015cc:	3001      	adds	r0, #1
 80015ce:	d021      	beq.n	8001614 <_printf_common+0xb4>
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	68e5      	ldr	r5, [r4, #12]
 80015d4:	f003 0306 	and.w	r3, r3, #6
 80015d8:	2b04      	cmp	r3, #4
 80015da:	bf18      	it	ne
 80015dc:	2500      	movne	r5, #0
 80015de:	f8d9 2000 	ldr.w	r2, [r9]
 80015e2:	f04f 0900 	mov.w	r9, #0
 80015e6:	bf08      	it	eq
 80015e8:	1aad      	subeq	r5, r5, r2
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	6922      	ldr	r2, [r4, #16]
 80015ee:	bf08      	it	eq
 80015f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015f4:	4293      	cmp	r3, r2
 80015f6:	bfc4      	itt	gt
 80015f8:	1a9b      	subgt	r3, r3, r2
 80015fa:	18ed      	addgt	r5, r5, r3
 80015fc:	341a      	adds	r4, #26
 80015fe:	454d      	cmp	r5, r9
 8001600:	d11a      	bne.n	8001638 <_printf_common+0xd8>
 8001602:	2000      	movs	r0, #0
 8001604:	e008      	b.n	8001618 <_printf_common+0xb8>
 8001606:	2301      	movs	r3, #1
 8001608:	4652      	mov	r2, sl
 800160a:	4639      	mov	r1, r7
 800160c:	4630      	mov	r0, r6
 800160e:	47c0      	blx	r8
 8001610:	3001      	adds	r0, #1
 8001612:	d103      	bne.n	800161c <_printf_common+0xbc>
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800161c:	3501      	adds	r5, #1
 800161e:	e7c2      	b.n	80015a6 <_printf_common+0x46>
 8001620:	2030      	movs	r0, #48	; 0x30
 8001622:	18e1      	adds	r1, r4, r3
 8001624:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800162e:	4422      	add	r2, r4
 8001630:	3302      	adds	r3, #2
 8001632:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001636:	e7c4      	b.n	80015c2 <_printf_common+0x62>
 8001638:	2301      	movs	r3, #1
 800163a:	4622      	mov	r2, r4
 800163c:	4639      	mov	r1, r7
 800163e:	4630      	mov	r0, r6
 8001640:	47c0      	blx	r8
 8001642:	3001      	adds	r0, #1
 8001644:	d0e6      	beq.n	8001614 <_printf_common+0xb4>
 8001646:	f109 0901 	add.w	r9, r9, #1
 800164a:	e7d8      	b.n	80015fe <_printf_common+0x9e>

0800164c <_printf_i>:
 800164c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001650:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001654:	460c      	mov	r4, r1
 8001656:	7e09      	ldrb	r1, [r1, #24]
 8001658:	b085      	sub	sp, #20
 800165a:	296e      	cmp	r1, #110	; 0x6e
 800165c:	4617      	mov	r7, r2
 800165e:	4606      	mov	r6, r0
 8001660:	4698      	mov	r8, r3
 8001662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001664:	f000 80b3 	beq.w	80017ce <_printf_i+0x182>
 8001668:	d822      	bhi.n	80016b0 <_printf_i+0x64>
 800166a:	2963      	cmp	r1, #99	; 0x63
 800166c:	d036      	beq.n	80016dc <_printf_i+0x90>
 800166e:	d80a      	bhi.n	8001686 <_printf_i+0x3a>
 8001670:	2900      	cmp	r1, #0
 8001672:	f000 80b9 	beq.w	80017e8 <_printf_i+0x19c>
 8001676:	2958      	cmp	r1, #88	; 0x58
 8001678:	f000 8083 	beq.w	8001782 <_printf_i+0x136>
 800167c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001680:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001684:	e032      	b.n	80016ec <_printf_i+0xa0>
 8001686:	2964      	cmp	r1, #100	; 0x64
 8001688:	d001      	beq.n	800168e <_printf_i+0x42>
 800168a:	2969      	cmp	r1, #105	; 0x69
 800168c:	d1f6      	bne.n	800167c <_printf_i+0x30>
 800168e:	6820      	ldr	r0, [r4, #0]
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	0605      	lsls	r5, r0, #24
 8001694:	f103 0104 	add.w	r1, r3, #4
 8001698:	d52a      	bpl.n	80016f0 <_printf_i+0xa4>
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6011      	str	r1, [r2, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	da03      	bge.n	80016aa <_printf_i+0x5e>
 80016a2:	222d      	movs	r2, #45	; 0x2d
 80016a4:	425b      	negs	r3, r3
 80016a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80016aa:	486f      	ldr	r0, [pc, #444]	; (8001868 <_printf_i+0x21c>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	e039      	b.n	8001724 <_printf_i+0xd8>
 80016b0:	2973      	cmp	r1, #115	; 0x73
 80016b2:	f000 809d 	beq.w	80017f0 <_printf_i+0x1a4>
 80016b6:	d808      	bhi.n	80016ca <_printf_i+0x7e>
 80016b8:	296f      	cmp	r1, #111	; 0x6f
 80016ba:	d020      	beq.n	80016fe <_printf_i+0xb2>
 80016bc:	2970      	cmp	r1, #112	; 0x70
 80016be:	d1dd      	bne.n	800167c <_printf_i+0x30>
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	e003      	b.n	80016d2 <_printf_i+0x86>
 80016ca:	2975      	cmp	r1, #117	; 0x75
 80016cc:	d017      	beq.n	80016fe <_printf_i+0xb2>
 80016ce:	2978      	cmp	r1, #120	; 0x78
 80016d0:	d1d4      	bne.n	800167c <_printf_i+0x30>
 80016d2:	2378      	movs	r3, #120	; 0x78
 80016d4:	4865      	ldr	r0, [pc, #404]	; (800186c <_printf_i+0x220>)
 80016d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80016da:	e055      	b.n	8001788 <_printf_i+0x13c>
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016e2:	1d19      	adds	r1, r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6011      	str	r1, [r2, #0]
 80016e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016ec:	2301      	movs	r3, #1
 80016ee:	e08c      	b.n	800180a <_printf_i+0x1be>
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016f6:	6011      	str	r1, [r2, #0]
 80016f8:	bf18      	it	ne
 80016fa:	b21b      	sxthne	r3, r3
 80016fc:	e7cf      	b.n	800169e <_printf_i+0x52>
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	6825      	ldr	r5, [r4, #0]
 8001702:	1d18      	adds	r0, r3, #4
 8001704:	6010      	str	r0, [r2, #0]
 8001706:	0628      	lsls	r0, r5, #24
 8001708:	d501      	bpl.n	800170e <_printf_i+0xc2>
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	e002      	b.n	8001714 <_printf_i+0xc8>
 800170e:	0668      	lsls	r0, r5, #25
 8001710:	d5fb      	bpl.n	800170a <_printf_i+0xbe>
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	296f      	cmp	r1, #111	; 0x6f
 8001716:	bf14      	ite	ne
 8001718:	220a      	movne	r2, #10
 800171a:	2208      	moveq	r2, #8
 800171c:	4852      	ldr	r0, [pc, #328]	; (8001868 <_printf_i+0x21c>)
 800171e:	2100      	movs	r1, #0
 8001720:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001724:	6865      	ldr	r5, [r4, #4]
 8001726:	2d00      	cmp	r5, #0
 8001728:	60a5      	str	r5, [r4, #8]
 800172a:	f2c0 8095 	blt.w	8001858 <_printf_i+0x20c>
 800172e:	6821      	ldr	r1, [r4, #0]
 8001730:	f021 0104 	bic.w	r1, r1, #4
 8001734:	6021      	str	r1, [r4, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d13d      	bne.n	80017b6 <_printf_i+0x16a>
 800173a:	2d00      	cmp	r5, #0
 800173c:	f040 808e 	bne.w	800185c <_printf_i+0x210>
 8001740:	4665      	mov	r5, ip
 8001742:	2a08      	cmp	r2, #8
 8001744:	d10b      	bne.n	800175e <_printf_i+0x112>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	07db      	lsls	r3, r3, #31
 800174a:	d508      	bpl.n	800175e <_printf_i+0x112>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	6862      	ldr	r2, [r4, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	bfde      	ittt	le
 8001754:	2330      	movle	r3, #48	; 0x30
 8001756:	f805 3c01 	strble.w	r3, [r5, #-1]
 800175a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800175e:	ebac 0305 	sub.w	r3, ip, r5
 8001762:	6123      	str	r3, [r4, #16]
 8001764:	f8cd 8000 	str.w	r8, [sp]
 8001768:	463b      	mov	r3, r7
 800176a:	aa03      	add	r2, sp, #12
 800176c:	4621      	mov	r1, r4
 800176e:	4630      	mov	r0, r6
 8001770:	f7ff fef6 	bl	8001560 <_printf_common>
 8001774:	3001      	adds	r0, #1
 8001776:	d14d      	bne.n	8001814 <_printf_i+0x1c8>
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	b005      	add	sp, #20
 800177e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001782:	4839      	ldr	r0, [pc, #228]	; (8001868 <_printf_i+0x21c>)
 8001784:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001788:	6813      	ldr	r3, [r2, #0]
 800178a:	6821      	ldr	r1, [r4, #0]
 800178c:	1d1d      	adds	r5, r3, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6015      	str	r5, [r2, #0]
 8001792:	060a      	lsls	r2, r1, #24
 8001794:	d50b      	bpl.n	80017ae <_printf_i+0x162>
 8001796:	07ca      	lsls	r2, r1, #31
 8001798:	bf44      	itt	mi
 800179a:	f041 0120 	orrmi.w	r1, r1, #32
 800179e:	6021      	strmi	r1, [r4, #0]
 80017a0:	b91b      	cbnz	r3, 80017aa <_printf_i+0x15e>
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	f022 0220 	bic.w	r2, r2, #32
 80017a8:	6022      	str	r2, [r4, #0]
 80017aa:	2210      	movs	r2, #16
 80017ac:	e7b7      	b.n	800171e <_printf_i+0xd2>
 80017ae:	064d      	lsls	r5, r1, #25
 80017b0:	bf48      	it	mi
 80017b2:	b29b      	uxthmi	r3, r3
 80017b4:	e7ef      	b.n	8001796 <_printf_i+0x14a>
 80017b6:	4665      	mov	r5, ip
 80017b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80017bc:	fb02 3311 	mls	r3, r2, r1, r3
 80017c0:	5cc3      	ldrb	r3, [r0, r3]
 80017c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80017c6:	460b      	mov	r3, r1
 80017c8:	2900      	cmp	r1, #0
 80017ca:	d1f5      	bne.n	80017b8 <_printf_i+0x16c>
 80017cc:	e7b9      	b.n	8001742 <_printf_i+0xf6>
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	6825      	ldr	r5, [r4, #0]
 80017d2:	1d18      	adds	r0, r3, #4
 80017d4:	6961      	ldr	r1, [r4, #20]
 80017d6:	6010      	str	r0, [r2, #0]
 80017d8:	0628      	lsls	r0, r5, #24
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	d501      	bpl.n	80017e2 <_printf_i+0x196>
 80017de:	6019      	str	r1, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <_printf_i+0x19c>
 80017e2:	066a      	lsls	r2, r5, #25
 80017e4:	d5fb      	bpl.n	80017de <_printf_i+0x192>
 80017e6:	8019      	strh	r1, [r3, #0]
 80017e8:	2300      	movs	r3, #0
 80017ea:	4665      	mov	r5, ip
 80017ec:	6123      	str	r3, [r4, #16]
 80017ee:	e7b9      	b.n	8001764 <_printf_i+0x118>
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	1d19      	adds	r1, r3, #4
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	681d      	ldr	r5, [r3, #0]
 80017f8:	6862      	ldr	r2, [r4, #4]
 80017fa:	2100      	movs	r1, #0
 80017fc:	4628      	mov	r0, r5
 80017fe:	f000 fa93 	bl	8001d28 <memchr>
 8001802:	b108      	cbz	r0, 8001808 <_printf_i+0x1bc>
 8001804:	1b40      	subs	r0, r0, r5
 8001806:	6060      	str	r0, [r4, #4]
 8001808:	6863      	ldr	r3, [r4, #4]
 800180a:	6123      	str	r3, [r4, #16]
 800180c:	2300      	movs	r3, #0
 800180e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001812:	e7a7      	b.n	8001764 <_printf_i+0x118>
 8001814:	6923      	ldr	r3, [r4, #16]
 8001816:	462a      	mov	r2, r5
 8001818:	4639      	mov	r1, r7
 800181a:	4630      	mov	r0, r6
 800181c:	47c0      	blx	r8
 800181e:	3001      	adds	r0, #1
 8001820:	d0aa      	beq.n	8001778 <_printf_i+0x12c>
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	079b      	lsls	r3, r3, #30
 8001826:	d413      	bmi.n	8001850 <_printf_i+0x204>
 8001828:	68e0      	ldr	r0, [r4, #12]
 800182a:	9b03      	ldr	r3, [sp, #12]
 800182c:	4298      	cmp	r0, r3
 800182e:	bfb8      	it	lt
 8001830:	4618      	movlt	r0, r3
 8001832:	e7a3      	b.n	800177c <_printf_i+0x130>
 8001834:	2301      	movs	r3, #1
 8001836:	464a      	mov	r2, r9
 8001838:	4639      	mov	r1, r7
 800183a:	4630      	mov	r0, r6
 800183c:	47c0      	blx	r8
 800183e:	3001      	adds	r0, #1
 8001840:	d09a      	beq.n	8001778 <_printf_i+0x12c>
 8001842:	3501      	adds	r5, #1
 8001844:	68e3      	ldr	r3, [r4, #12]
 8001846:	9a03      	ldr	r2, [sp, #12]
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	42ab      	cmp	r3, r5
 800184c:	dcf2      	bgt.n	8001834 <_printf_i+0x1e8>
 800184e:	e7eb      	b.n	8001828 <_printf_i+0x1dc>
 8001850:	2500      	movs	r5, #0
 8001852:	f104 0919 	add.w	r9, r4, #25
 8001856:	e7f5      	b.n	8001844 <_printf_i+0x1f8>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ac      	bne.n	80017b6 <_printf_i+0x16a>
 800185c:	7803      	ldrb	r3, [r0, #0]
 800185e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001862:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001866:	e76c      	b.n	8001742 <_printf_i+0xf6>
 8001868:	08002189 	.word	0x08002189
 800186c:	0800219a 	.word	0x0800219a

08001870 <_sbrk_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	2300      	movs	r3, #0
 8001874:	4c05      	ldr	r4, [pc, #20]	; (800188c <_sbrk_r+0x1c>)
 8001876:	4605      	mov	r5, r0
 8001878:	4608      	mov	r0, r1
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	f7fe fdae 	bl	80003dc <_sbrk>
 8001880:	1c43      	adds	r3, r0, #1
 8001882:	d102      	bne.n	800188a <_sbrk_r+0x1a>
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	b103      	cbz	r3, 800188a <_sbrk_r+0x1a>
 8001888:	602b      	str	r3, [r5, #0]
 800188a:	bd38      	pop	{r3, r4, r5, pc}
 800188c:	20000344 	.word	0x20000344

08001890 <__sread>:
 8001890:	b510      	push	{r4, lr}
 8001892:	460c      	mov	r4, r1
 8001894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001898:	f000 faa2 	bl	8001de0 <_read_r>
 800189c:	2800      	cmp	r0, #0
 800189e:	bfab      	itete	ge
 80018a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80018a2:	89a3      	ldrhlt	r3, [r4, #12]
 80018a4:	181b      	addge	r3, r3, r0
 80018a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80018aa:	bfac      	ite	ge
 80018ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80018ae:	81a3      	strhlt	r3, [r4, #12]
 80018b0:	bd10      	pop	{r4, pc}

080018b2 <__swrite>:
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b6:	461f      	mov	r7, r3
 80018b8:	898b      	ldrh	r3, [r1, #12]
 80018ba:	4605      	mov	r5, r0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	460c      	mov	r4, r1
 80018c0:	4616      	mov	r6, r2
 80018c2:	d505      	bpl.n	80018d0 <__swrite+0x1e>
 80018c4:	2302      	movs	r3, #2
 80018c6:	2200      	movs	r2, #0
 80018c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018cc:	f000 f9b6 	bl	8001c3c <_lseek_r>
 80018d0:	89a3      	ldrh	r3, [r4, #12]
 80018d2:	4632      	mov	r2, r6
 80018d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018d8:	81a3      	strh	r3, [r4, #12]
 80018da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018de:	463b      	mov	r3, r7
 80018e0:	4628      	mov	r0, r5
 80018e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018e6:	f000 b869 	b.w	80019bc <_write_r>

080018ea <__sseek>:
 80018ea:	b510      	push	{r4, lr}
 80018ec:	460c      	mov	r4, r1
 80018ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018f2:	f000 f9a3 	bl	8001c3c <_lseek_r>
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	bf15      	itete	ne
 80018fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80018fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001906:	81a3      	strheq	r3, [r4, #12]
 8001908:	bf18      	it	ne
 800190a:	81a3      	strhne	r3, [r4, #12]
 800190c:	bd10      	pop	{r4, pc}

0800190e <__sclose>:
 800190e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001912:	f000 b8d3 	b.w	8001abc <_close_r>
	...

08001918 <__swbuf_r>:
 8001918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191a:	460e      	mov	r6, r1
 800191c:	4614      	mov	r4, r2
 800191e:	4605      	mov	r5, r0
 8001920:	b118      	cbz	r0, 800192a <__swbuf_r+0x12>
 8001922:	6983      	ldr	r3, [r0, #24]
 8001924:	b90b      	cbnz	r3, 800192a <__swbuf_r+0x12>
 8001926:	f7ff fbf9 	bl	800111c <__sinit>
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <__swbuf_r+0x98>)
 800192c:	429c      	cmp	r4, r3
 800192e:	d12a      	bne.n	8001986 <__swbuf_r+0x6e>
 8001930:	686c      	ldr	r4, [r5, #4]
 8001932:	69a3      	ldr	r3, [r4, #24]
 8001934:	60a3      	str	r3, [r4, #8]
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	071a      	lsls	r2, r3, #28
 800193a:	d52e      	bpl.n	800199a <__swbuf_r+0x82>
 800193c:	6923      	ldr	r3, [r4, #16]
 800193e:	b363      	cbz	r3, 800199a <__swbuf_r+0x82>
 8001940:	6923      	ldr	r3, [r4, #16]
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	b2f6      	uxtb	r6, r6
 8001946:	1ac0      	subs	r0, r0, r3
 8001948:	6963      	ldr	r3, [r4, #20]
 800194a:	4637      	mov	r7, r6
 800194c:	4283      	cmp	r3, r0
 800194e:	dc04      	bgt.n	800195a <__swbuf_r+0x42>
 8001950:	4621      	mov	r1, r4
 8001952:	4628      	mov	r0, r5
 8001954:	f000 f948 	bl	8001be8 <_fflush_r>
 8001958:	bb28      	cbnz	r0, 80019a6 <__swbuf_r+0x8e>
 800195a:	68a3      	ldr	r3, [r4, #8]
 800195c:	3001      	adds	r0, #1
 800195e:	3b01      	subs	r3, #1
 8001960:	60a3      	str	r3, [r4, #8]
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	6022      	str	r2, [r4, #0]
 8001968:	701e      	strb	r6, [r3, #0]
 800196a:	6963      	ldr	r3, [r4, #20]
 800196c:	4283      	cmp	r3, r0
 800196e:	d004      	beq.n	800197a <__swbuf_r+0x62>
 8001970:	89a3      	ldrh	r3, [r4, #12]
 8001972:	07db      	lsls	r3, r3, #31
 8001974:	d519      	bpl.n	80019aa <__swbuf_r+0x92>
 8001976:	2e0a      	cmp	r6, #10
 8001978:	d117      	bne.n	80019aa <__swbuf_r+0x92>
 800197a:	4621      	mov	r1, r4
 800197c:	4628      	mov	r0, r5
 800197e:	f000 f933 	bl	8001be8 <_fflush_r>
 8001982:	b190      	cbz	r0, 80019aa <__swbuf_r+0x92>
 8001984:	e00f      	b.n	80019a6 <__swbuf_r+0x8e>
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <__swbuf_r+0x9c>)
 8001988:	429c      	cmp	r4, r3
 800198a:	d101      	bne.n	8001990 <__swbuf_r+0x78>
 800198c:	68ac      	ldr	r4, [r5, #8]
 800198e:	e7d0      	b.n	8001932 <__swbuf_r+0x1a>
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <__swbuf_r+0xa0>)
 8001992:	429c      	cmp	r4, r3
 8001994:	bf08      	it	eq
 8001996:	68ec      	ldreq	r4, [r5, #12]
 8001998:	e7cb      	b.n	8001932 <__swbuf_r+0x1a>
 800199a:	4621      	mov	r1, r4
 800199c:	4628      	mov	r0, r5
 800199e:	f000 f81f 	bl	80019e0 <__swsetup_r>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d0cc      	beq.n	8001940 <__swbuf_r+0x28>
 80019a6:	f04f 37ff 	mov.w	r7, #4294967295
 80019aa:	4638      	mov	r0, r7
 80019ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	08002138 	.word	0x08002138
 80019b4:	08002158 	.word	0x08002158
 80019b8:	08002118 	.word	0x08002118

080019bc <_write_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4605      	mov	r5, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	4c05      	ldr	r4, [pc, #20]	; (80019dc <_write_r+0x20>)
 80019c8:	6022      	str	r2, [r4, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f000 faed 	bl	8001faa <_write>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_write_r+0x1e>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	b103      	cbz	r3, 80019da <_write_r+0x1e>
 80019d8:	602b      	str	r3, [r5, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	20000344 	.word	0x20000344

080019e0 <__swsetup_r>:
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <__swsetup_r+0xcc>)
 80019e2:	b570      	push	{r4, r5, r6, lr}
 80019e4:	681d      	ldr	r5, [r3, #0]
 80019e6:	4606      	mov	r6, r0
 80019e8:	460c      	mov	r4, r1
 80019ea:	b125      	cbz	r5, 80019f6 <__swsetup_r+0x16>
 80019ec:	69ab      	ldr	r3, [r5, #24]
 80019ee:	b913      	cbnz	r3, 80019f6 <__swsetup_r+0x16>
 80019f0:	4628      	mov	r0, r5
 80019f2:	f7ff fb93 	bl	800111c <__sinit>
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <__swsetup_r+0xd0>)
 80019f8:	429c      	cmp	r4, r3
 80019fa:	d10f      	bne.n	8001a1c <__swsetup_r+0x3c>
 80019fc:	686c      	ldr	r4, [r5, #4]
 80019fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	0715      	lsls	r5, r2, #28
 8001a06:	d42c      	bmi.n	8001a62 <__swsetup_r+0x82>
 8001a08:	06d0      	lsls	r0, r2, #27
 8001a0a:	d411      	bmi.n	8001a30 <__swsetup_r+0x50>
 8001a0c:	2209      	movs	r2, #9
 8001a0e:	6032      	str	r2, [r6, #0]
 8001a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a14:	81a3      	strh	r3, [r4, #12]
 8001a16:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1a:	e03e      	b.n	8001a9a <__swsetup_r+0xba>
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <__swsetup_r+0xd4>)
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	d101      	bne.n	8001a26 <__swsetup_r+0x46>
 8001a22:	68ac      	ldr	r4, [r5, #8]
 8001a24:	e7eb      	b.n	80019fe <__swsetup_r+0x1e>
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <__swsetup_r+0xd8>)
 8001a28:	429c      	cmp	r4, r3
 8001a2a:	bf08      	it	eq
 8001a2c:	68ec      	ldreq	r4, [r5, #12]
 8001a2e:	e7e6      	b.n	80019fe <__swsetup_r+0x1e>
 8001a30:	0751      	lsls	r1, r2, #29
 8001a32:	d512      	bpl.n	8001a5a <__swsetup_r+0x7a>
 8001a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a36:	b141      	cbz	r1, 8001a4a <__swsetup_r+0x6a>
 8001a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a3c:	4299      	cmp	r1, r3
 8001a3e:	d002      	beq.n	8001a46 <__swsetup_r+0x66>
 8001a40:	4630      	mov	r0, r6
 8001a42:	f000 f981 	bl	8001d48 <_free_r>
 8001a46:	2300      	movs	r3, #0
 8001a48:	6363      	str	r3, [r4, #52]	; 0x34
 8001a4a:	89a3      	ldrh	r3, [r4, #12]
 8001a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a50:	81a3      	strh	r3, [r4, #12]
 8001a52:	2300      	movs	r3, #0
 8001a54:	6063      	str	r3, [r4, #4]
 8001a56:	6923      	ldr	r3, [r4, #16]
 8001a58:	6023      	str	r3, [r4, #0]
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	81a3      	strh	r3, [r4, #12]
 8001a62:	6923      	ldr	r3, [r4, #16]
 8001a64:	b94b      	cbnz	r3, 8001a7a <__swsetup_r+0x9a>
 8001a66:	89a3      	ldrh	r3, [r4, #12]
 8001a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d003      	beq.n	8001a7a <__swsetup_r+0x9a>
 8001a72:	4621      	mov	r1, r4
 8001a74:	4630      	mov	r0, r6
 8001a76:	f000 f917 	bl	8001ca8 <__smakebuf_r>
 8001a7a:	89a2      	ldrh	r2, [r4, #12]
 8001a7c:	f012 0301 	ands.w	r3, r2, #1
 8001a80:	d00c      	beq.n	8001a9c <__swsetup_r+0xbc>
 8001a82:	2300      	movs	r3, #0
 8001a84:	60a3      	str	r3, [r4, #8]
 8001a86:	6963      	ldr	r3, [r4, #20]
 8001a88:	425b      	negs	r3, r3
 8001a8a:	61a3      	str	r3, [r4, #24]
 8001a8c:	6923      	ldr	r3, [r4, #16]
 8001a8e:	b953      	cbnz	r3, 8001aa6 <__swsetup_r+0xc6>
 8001a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001a98:	d1ba      	bne.n	8001a10 <__swsetup_r+0x30>
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	0792      	lsls	r2, r2, #30
 8001a9e:	bf58      	it	pl
 8001aa0:	6963      	ldrpl	r3, [r4, #20]
 8001aa2:	60a3      	str	r3, [r4, #8]
 8001aa4:	e7f2      	b.n	8001a8c <__swsetup_r+0xac>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e7f7      	b.n	8001a9a <__swsetup_r+0xba>
 8001aaa:	bf00      	nop
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	08002138 	.word	0x08002138
 8001ab4:	08002158 	.word	0x08002158
 8001ab8:	08002118 	.word	0x08002118

08001abc <_close_r>:
 8001abc:	b538      	push	{r3, r4, r5, lr}
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4c05      	ldr	r4, [pc, #20]	; (8001ad8 <_close_r+0x1c>)
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	6023      	str	r3, [r4, #0]
 8001ac8:	f000 fa9e 	bl	8002008 <_close>
 8001acc:	1c43      	adds	r3, r0, #1
 8001ace:	d102      	bne.n	8001ad6 <_close_r+0x1a>
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	b103      	cbz	r3, 8001ad6 <_close_r+0x1a>
 8001ad4:	602b      	str	r3, [r5, #0]
 8001ad6:	bd38      	pop	{r3, r4, r5, pc}
 8001ad8:	20000344 	.word	0x20000344

08001adc <__sflush_r>:
 8001adc:	898a      	ldrh	r2, [r1, #12]
 8001ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae2:	4605      	mov	r5, r0
 8001ae4:	0710      	lsls	r0, r2, #28
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	d458      	bmi.n	8001b9c <__sflush_r+0xc0>
 8001aea:	684b      	ldr	r3, [r1, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dc05      	bgt.n	8001afc <__sflush_r+0x20>
 8001af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dc02      	bgt.n	8001afc <__sflush_r+0x20>
 8001af6:	2000      	movs	r0, #0
 8001af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001afe:	2e00      	cmp	r6, #0
 8001b00:	d0f9      	beq.n	8001af6 <__sflush_r+0x1a>
 8001b02:	2300      	movs	r3, #0
 8001b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001b08:	682f      	ldr	r7, [r5, #0]
 8001b0a:	6a21      	ldr	r1, [r4, #32]
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	d032      	beq.n	8001b76 <__sflush_r+0x9a>
 8001b10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	075a      	lsls	r2, r3, #29
 8001b16:	d505      	bpl.n	8001b24 <__sflush_r+0x48>
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	1ac0      	subs	r0, r0, r3
 8001b1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b1e:	b10b      	cbz	r3, 8001b24 <__sflush_r+0x48>
 8001b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b22:	1ac0      	subs	r0, r0, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4602      	mov	r2, r0
 8001b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b2a:	6a21      	ldr	r1, [r4, #32]
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	47b0      	blx	r6
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	d106      	bne.n	8001b44 <__sflush_r+0x68>
 8001b36:	6829      	ldr	r1, [r5, #0]
 8001b38:	291d      	cmp	r1, #29
 8001b3a:	d848      	bhi.n	8001bce <__sflush_r+0xf2>
 8001b3c:	4a29      	ldr	r2, [pc, #164]	; (8001be4 <__sflush_r+0x108>)
 8001b3e:	40ca      	lsrs	r2, r1
 8001b40:	07d6      	lsls	r6, r2, #31
 8001b42:	d544      	bpl.n	8001bce <__sflush_r+0xf2>
 8001b44:	2200      	movs	r2, #0
 8001b46:	6062      	str	r2, [r4, #4]
 8001b48:	6922      	ldr	r2, [r4, #16]
 8001b4a:	04d9      	lsls	r1, r3, #19
 8001b4c:	6022      	str	r2, [r4, #0]
 8001b4e:	d504      	bpl.n	8001b5a <__sflush_r+0x7e>
 8001b50:	1c42      	adds	r2, r0, #1
 8001b52:	d101      	bne.n	8001b58 <__sflush_r+0x7c>
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	b903      	cbnz	r3, 8001b5a <__sflush_r+0x7e>
 8001b58:	6560      	str	r0, [r4, #84]	; 0x54
 8001b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b5c:	602f      	str	r7, [r5, #0]
 8001b5e:	2900      	cmp	r1, #0
 8001b60:	d0c9      	beq.n	8001af6 <__sflush_r+0x1a>
 8001b62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b66:	4299      	cmp	r1, r3
 8001b68:	d002      	beq.n	8001b70 <__sflush_r+0x94>
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 f8ec 	bl	8001d48 <_free_r>
 8001b70:	2000      	movs	r0, #0
 8001b72:	6360      	str	r0, [r4, #52]	; 0x34
 8001b74:	e7c0      	b.n	8001af8 <__sflush_r+0x1c>
 8001b76:	2301      	movs	r3, #1
 8001b78:	4628      	mov	r0, r5
 8001b7a:	47b0      	blx	r6
 8001b7c:	1c41      	adds	r1, r0, #1
 8001b7e:	d1c8      	bne.n	8001b12 <__sflush_r+0x36>
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0c5      	beq.n	8001b12 <__sflush_r+0x36>
 8001b86:	2b1d      	cmp	r3, #29
 8001b88:	d001      	beq.n	8001b8e <__sflush_r+0xb2>
 8001b8a:	2b16      	cmp	r3, #22
 8001b8c:	d101      	bne.n	8001b92 <__sflush_r+0xb6>
 8001b8e:	602f      	str	r7, [r5, #0]
 8001b90:	e7b1      	b.n	8001af6 <__sflush_r+0x1a>
 8001b92:	89a3      	ldrh	r3, [r4, #12]
 8001b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	e7ad      	b.n	8001af8 <__sflush_r+0x1c>
 8001b9c:	690f      	ldr	r7, [r1, #16]
 8001b9e:	2f00      	cmp	r7, #0
 8001ba0:	d0a9      	beq.n	8001af6 <__sflush_r+0x1a>
 8001ba2:	0793      	lsls	r3, r2, #30
 8001ba4:	bf18      	it	ne
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	680e      	ldr	r6, [r1, #0]
 8001baa:	bf08      	it	eq
 8001bac:	694b      	ldreq	r3, [r1, #20]
 8001bae:	eba6 0807 	sub.w	r8, r6, r7
 8001bb2:	600f      	str	r7, [r1, #0]
 8001bb4:	608b      	str	r3, [r1, #8]
 8001bb6:	f1b8 0f00 	cmp.w	r8, #0
 8001bba:	dd9c      	ble.n	8001af6 <__sflush_r+0x1a>
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	463a      	mov	r2, r7
 8001bc0:	6a21      	ldr	r1, [r4, #32]
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001bc6:	47b0      	blx	r6
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	dc06      	bgt.n	8001bda <__sflush_r+0xfe>
 8001bcc:	89a3      	ldrh	r3, [r4, #12]
 8001bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd2:	81a3      	strh	r3, [r4, #12]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	e78e      	b.n	8001af8 <__sflush_r+0x1c>
 8001bda:	4407      	add	r7, r0
 8001bdc:	eba8 0800 	sub.w	r8, r8, r0
 8001be0:	e7e9      	b.n	8001bb6 <__sflush_r+0xda>
 8001be2:	bf00      	nop
 8001be4:	20400001 	.word	0x20400001

08001be8 <_fflush_r>:
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	690b      	ldr	r3, [r1, #16]
 8001bec:	4605      	mov	r5, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	b1db      	cbz	r3, 8001c2a <_fflush_r+0x42>
 8001bf2:	b118      	cbz	r0, 8001bfc <_fflush_r+0x14>
 8001bf4:	6983      	ldr	r3, [r0, #24]
 8001bf6:	b90b      	cbnz	r3, 8001bfc <_fflush_r+0x14>
 8001bf8:	f7ff fa90 	bl	800111c <__sinit>
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_fflush_r+0x48>)
 8001bfe:	429c      	cmp	r4, r3
 8001c00:	d109      	bne.n	8001c16 <_fflush_r+0x2e>
 8001c02:	686c      	ldr	r4, [r5, #4]
 8001c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c08:	b17b      	cbz	r3, 8001c2a <_fflush_r+0x42>
 8001c0a:	4621      	mov	r1, r4
 8001c0c:	4628      	mov	r0, r5
 8001c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c12:	f7ff bf63 	b.w	8001adc <__sflush_r>
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_fflush_r+0x4c>)
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	d101      	bne.n	8001c20 <_fflush_r+0x38>
 8001c1c:	68ac      	ldr	r4, [r5, #8]
 8001c1e:	e7f1      	b.n	8001c04 <_fflush_r+0x1c>
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <_fflush_r+0x50>)
 8001c22:	429c      	cmp	r4, r3
 8001c24:	bf08      	it	eq
 8001c26:	68ec      	ldreq	r4, [r5, #12]
 8001c28:	e7ec      	b.n	8001c04 <_fflush_r+0x1c>
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
 8001c2e:	bf00      	nop
 8001c30:	08002138 	.word	0x08002138
 8001c34:	08002158 	.word	0x08002158
 8001c38:	08002118 	.word	0x08002118

08001c3c <_lseek_r>:
 8001c3c:	b538      	push	{r3, r4, r5, lr}
 8001c3e:	4605      	mov	r5, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	2200      	movs	r2, #0
 8001c46:	4c05      	ldr	r4, [pc, #20]	; (8001c5c <_lseek_r+0x20>)
 8001c48:	6022      	str	r2, [r4, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f000 f99b 	bl	8001f86 <_lseek>
 8001c50:	1c43      	adds	r3, r0, #1
 8001c52:	d102      	bne.n	8001c5a <_lseek_r+0x1e>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	b103      	cbz	r3, 8001c5a <_lseek_r+0x1e>
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	bd38      	pop	{r3, r4, r5, pc}
 8001c5c:	20000344 	.word	0x20000344

08001c60 <__swhatbuf_r>:
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	460e      	mov	r6, r1
 8001c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c68:	b096      	sub	sp, #88	; 0x58
 8001c6a:	2900      	cmp	r1, #0
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	da07      	bge.n	8001c82 <__swhatbuf_r+0x22>
 8001c72:	2300      	movs	r3, #0
 8001c74:	602b      	str	r3, [r5, #0]
 8001c76:	89b3      	ldrh	r3, [r6, #12]
 8001c78:	061a      	lsls	r2, r3, #24
 8001c7a:	d410      	bmi.n	8001c9e <__swhatbuf_r+0x3e>
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	e00e      	b.n	8001ca0 <__swhatbuf_r+0x40>
 8001c82:	466a      	mov	r2, sp
 8001c84:	f000 f8be 	bl	8001e04 <_fstat_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	dbf2      	blt.n	8001c72 <__swhatbuf_r+0x12>
 8001c8c:	9a01      	ldr	r2, [sp, #4]
 8001c8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c96:	425a      	negs	r2, r3
 8001c98:	415a      	adcs	r2, r3
 8001c9a:	602a      	str	r2, [r5, #0]
 8001c9c:	e7ee      	b.n	8001c7c <__swhatbuf_r+0x1c>
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	b016      	add	sp, #88	; 0x58
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}

08001ca8 <__smakebuf_r>:
 8001ca8:	898b      	ldrh	r3, [r1, #12]
 8001caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cac:	079d      	lsls	r5, r3, #30
 8001cae:	4606      	mov	r6, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	d507      	bpl.n	8001cc4 <__smakebuf_r+0x1c>
 8001cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	6123      	str	r3, [r4, #16]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6163      	str	r3, [r4, #20]
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	ab01      	add	r3, sp, #4
 8001cc6:	466a      	mov	r2, sp
 8001cc8:	f7ff ffca 	bl	8001c60 <__swhatbuf_r>
 8001ccc:	9900      	ldr	r1, [sp, #0]
 8001cce:	4605      	mov	r5, r0
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f7ff faad 	bl	8001230 <_malloc_r>
 8001cd6:	b948      	cbnz	r0, 8001cec <__smakebuf_r+0x44>
 8001cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cdc:	059a      	lsls	r2, r3, #22
 8001cde:	d4ef      	bmi.n	8001cc0 <__smakebuf_r+0x18>
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e7e3      	b.n	8001cb4 <__smakebuf_r+0xc>
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <__smakebuf_r+0x7c>)
 8001cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	6020      	str	r0, [r4, #0]
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	81a3      	strh	r3, [r4, #12]
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	6120      	str	r0, [r4, #16]
 8001cfe:	6163      	str	r3, [r4, #20]
 8001d00:	9b01      	ldr	r3, [sp, #4]
 8001d02:	b15b      	cbz	r3, 8001d1c <__smakebuf_r+0x74>
 8001d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f000 f88d 	bl	8001e28 <_isatty_r>
 8001d0e:	b128      	cbz	r0, 8001d1c <__smakebuf_r+0x74>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	431d      	orrs	r5, r3
 8001d20:	81a5      	strh	r5, [r4, #12]
 8001d22:	e7cd      	b.n	8001cc0 <__smakebuf_r+0x18>
 8001d24:	080010e5 	.word	0x080010e5

08001d28 <memchr>:
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	b2c9      	uxtb	r1, r1
 8001d2c:	4402      	add	r2, r0
 8001d2e:	4290      	cmp	r0, r2
 8001d30:	4603      	mov	r3, r0
 8001d32:	d101      	bne.n	8001d38 <memchr+0x10>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e003      	b.n	8001d40 <memchr+0x18>
 8001d38:	781c      	ldrb	r4, [r3, #0]
 8001d3a:	3001      	adds	r0, #1
 8001d3c:	428c      	cmp	r4, r1
 8001d3e:	d1f6      	bne.n	8001d2e <memchr+0x6>
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd10      	pop	{r4, pc}

08001d44 <__malloc_lock>:
 8001d44:	4770      	bx	lr

08001d46 <__malloc_unlock>:
 8001d46:	4770      	bx	lr

08001d48 <_free_r>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d043      	beq.n	8001dd8 <_free_r+0x90>
 8001d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d54:	1f0c      	subs	r4, r1, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	18e4      	addlt	r4, r4, r3
 8001d5c:	f7ff fff2 	bl	8001d44 <__malloc_lock>
 8001d60:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <_free_r+0x94>)
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	4610      	mov	r0, r2
 8001d66:	b933      	cbnz	r3, 8001d76 <_free_r+0x2e>
 8001d68:	6063      	str	r3, [r4, #4]
 8001d6a:	6014      	str	r4, [r2, #0]
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d72:	f7ff bfe8 	b.w	8001d46 <__malloc_unlock>
 8001d76:	42a3      	cmp	r3, r4
 8001d78:	d90b      	bls.n	8001d92 <_free_r+0x4a>
 8001d7a:	6821      	ldr	r1, [r4, #0]
 8001d7c:	1862      	adds	r2, r4, r1
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	bf01      	itttt	eq
 8001d82:	681a      	ldreq	r2, [r3, #0]
 8001d84:	685b      	ldreq	r3, [r3, #4]
 8001d86:	1852      	addeq	r2, r2, r1
 8001d88:	6022      	streq	r2, [r4, #0]
 8001d8a:	6063      	str	r3, [r4, #4]
 8001d8c:	6004      	str	r4, [r0, #0]
 8001d8e:	e7ed      	b.n	8001d6c <_free_r+0x24>
 8001d90:	4613      	mov	r3, r2
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	b10a      	cbz	r2, 8001d9a <_free_r+0x52>
 8001d96:	42a2      	cmp	r2, r4
 8001d98:	d9fa      	bls.n	8001d90 <_free_r+0x48>
 8001d9a:	6819      	ldr	r1, [r3, #0]
 8001d9c:	1858      	adds	r0, r3, r1
 8001d9e:	42a0      	cmp	r0, r4
 8001da0:	d10b      	bne.n	8001dba <_free_r+0x72>
 8001da2:	6820      	ldr	r0, [r4, #0]
 8001da4:	4401      	add	r1, r0
 8001da6:	1858      	adds	r0, r3, r1
 8001da8:	4282      	cmp	r2, r0
 8001daa:	6019      	str	r1, [r3, #0]
 8001dac:	d1de      	bne.n	8001d6c <_free_r+0x24>
 8001dae:	6810      	ldr	r0, [r2, #0]
 8001db0:	6852      	ldr	r2, [r2, #4]
 8001db2:	4401      	add	r1, r0
 8001db4:	6019      	str	r1, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	e7d8      	b.n	8001d6c <_free_r+0x24>
 8001dba:	d902      	bls.n	8001dc2 <_free_r+0x7a>
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	602b      	str	r3, [r5, #0]
 8001dc0:	e7d4      	b.n	8001d6c <_free_r+0x24>
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	1821      	adds	r1, r4, r0
 8001dc6:	428a      	cmp	r2, r1
 8001dc8:	bf01      	itttt	eq
 8001dca:	6811      	ldreq	r1, [r2, #0]
 8001dcc:	6852      	ldreq	r2, [r2, #4]
 8001dce:	1809      	addeq	r1, r1, r0
 8001dd0:	6021      	streq	r1, [r4, #0]
 8001dd2:	6062      	str	r2, [r4, #4]
 8001dd4:	605c      	str	r4, [r3, #4]
 8001dd6:	e7c9      	b.n	8001d6c <_free_r+0x24>
 8001dd8:	bd38      	pop	{r3, r4, r5, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000008c 	.word	0x2000008c

08001de0 <_read_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4605      	mov	r5, r0
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	2200      	movs	r2, #0
 8001dea:	4c05      	ldr	r4, [pc, #20]	; (8001e00 <_read_r+0x20>)
 8001dec:	6022      	str	r2, [r4, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f000 f872 	bl	8001ed8 <_read>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_read_r+0x1e>
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_read_r+0x1e>
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	20000344 	.word	0x20000344

08001e04 <_fstat_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	2300      	movs	r3, #0
 8001e08:	4c06      	ldr	r4, [pc, #24]	; (8001e24 <_fstat_r+0x20>)
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	4611      	mov	r1, r2
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	f000 f940 	bl	8002096 <_fstat>
 8001e16:	1c43      	adds	r3, r0, #1
 8001e18:	d102      	bne.n	8001e20 <_fstat_r+0x1c>
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	b103      	cbz	r3, 8001e20 <_fstat_r+0x1c>
 8001e1e:	602b      	str	r3, [r5, #0]
 8001e20:	bd38      	pop	{r3, r4, r5, pc}
 8001e22:	bf00      	nop
 8001e24:	20000344 	.word	0x20000344

08001e28 <_isatty_r>:
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	4c05      	ldr	r4, [pc, #20]	; (8001e44 <_isatty_r+0x1c>)
 8001e2e:	4605      	mov	r5, r0
 8001e30:	4608      	mov	r0, r1
 8001e32:	6023      	str	r3, [r4, #0]
 8001e34:	f000 f93d 	bl	80020b2 <_isatty>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d102      	bne.n	8001e42 <_isatty_r+0x1a>
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	b103      	cbz	r3, 8001e42 <_isatty_r+0x1a>
 8001e40:	602b      	str	r3, [r5, #0]
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
 8001e44:	20000344 	.word	0x20000344

08001e48 <findslot>:
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <findslot+0x2c>)
 8001e4a:	b510      	push	{r4, lr}
 8001e4c:	4604      	mov	r4, r0
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	b118      	cbz	r0, 8001e5a <findslot+0x12>
 8001e52:	6983      	ldr	r3, [r0, #24]
 8001e54:	b90b      	cbnz	r3, 8001e5a <findslot+0x12>
 8001e56:	f7ff f961 	bl	800111c <__sinit>
 8001e5a:	2c13      	cmp	r4, #19
 8001e5c:	d807      	bhi.n	8001e6e <findslot+0x26>
 8001e5e:	4806      	ldr	r0, [pc, #24]	; (8001e78 <findslot+0x30>)
 8001e60:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001e64:	3301      	adds	r3, #1
 8001e66:	d002      	beq.n	8001e6e <findslot+0x26>
 8001e68:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001e6c:	bd10      	pop	{r4, pc}
 8001e6e:	2000      	movs	r0, #0
 8001e70:	e7fc      	b.n	8001e6c <findslot+0x24>
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000094 	.word	0x20000094

08001e7c <checkerror>:
 8001e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7e:	1c43      	adds	r3, r0, #1
 8001e80:	4605      	mov	r5, r0
 8001e82:	d109      	bne.n	8001e98 <checkerror+0x1c>
 8001e84:	f7ff f8c0 	bl	8001008 <__errno>
 8001e88:	2413      	movs	r4, #19
 8001e8a:	4606      	mov	r6, r0
 8001e8c:	2700      	movs	r7, #0
 8001e8e:	4620      	mov	r0, r4
 8001e90:	4639      	mov	r1, r7
 8001e92:	beab      	bkpt	0x00ab
 8001e94:	4604      	mov	r4, r0
 8001e96:	6034      	str	r4, [r6, #0]
 8001e98:	4628      	mov	r0, r5
 8001e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e9c <error>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	f7ff f8b2 	bl	8001008 <__errno>
 8001ea4:	2413      	movs	r4, #19
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	2700      	movs	r7, #0
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4639      	mov	r1, r7
 8001eae:	beab      	bkpt	0x00ab
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	6034      	str	r4, [r6, #0]
 8001eb4:	4628      	mov	r0, r5
 8001eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001eb8 <_swiread>:
 8001eb8:	b530      	push	{r4, r5, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ec0:	9203      	str	r2, [sp, #12]
 8001ec2:	2406      	movs	r4, #6
 8001ec4:	ad01      	add	r5, sp, #4
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	4629      	mov	r1, r5
 8001eca:	beab      	bkpt	0x00ab
 8001ecc:	4604      	mov	r4, r0
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7ff ffd4 	bl	8001e7c <checkerror>
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bd30      	pop	{r4, r5, pc}

08001ed8 <_read>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	460e      	mov	r6, r1
 8001edc:	4615      	mov	r5, r2
 8001ede:	f7ff ffb3 	bl	8001e48 <findslot>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b930      	cbnz	r0, 8001ef4 <_read+0x1c>
 8001ee6:	f7ff f88f 	bl	8001008 <__errno>
 8001eea:	2309      	movs	r3, #9
 8001eec:	6003      	str	r3, [r0, #0]
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	4631      	mov	r1, r6
 8001ef8:	6800      	ldr	r0, [r0, #0]
 8001efa:	f7ff ffdd 	bl	8001eb8 <_swiread>
 8001efe:	1c43      	adds	r3, r0, #1
 8001f00:	bf1f      	itttt	ne
 8001f02:	6863      	ldrne	r3, [r4, #4]
 8001f04:	1a28      	subne	r0, r5, r0
 8001f06:	181b      	addne	r3, r3, r0
 8001f08:	6063      	strne	r3, [r4, #4]
 8001f0a:	e7f2      	b.n	8001ef2 <_read+0x1a>

08001f0c <_swilseek>:
 8001f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f0e:	460c      	mov	r4, r1
 8001f10:	4616      	mov	r6, r2
 8001f12:	f7ff ff99 	bl	8001e48 <findslot>
 8001f16:	4605      	mov	r5, r0
 8001f18:	b940      	cbnz	r0, 8001f2c <_swilseek+0x20>
 8001f1a:	f7ff f875 	bl	8001008 <__errno>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	6003      	str	r3, [r0, #0]
 8001f22:	f04f 34ff 	mov.w	r4, #4294967295
 8001f26:	4620      	mov	r0, r4
 8001f28:	b003      	add	sp, #12
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	2e02      	cmp	r6, #2
 8001f2e:	d903      	bls.n	8001f38 <_swilseek+0x2c>
 8001f30:	f7ff f86a 	bl	8001008 <__errno>
 8001f34:	2316      	movs	r3, #22
 8001f36:	e7f3      	b.n	8001f20 <_swilseek+0x14>
 8001f38:	2e01      	cmp	r6, #1
 8001f3a:	d112      	bne.n	8001f62 <_swilseek+0x56>
 8001f3c:	6843      	ldr	r3, [r0, #4]
 8001f3e:	18e4      	adds	r4, r4, r3
 8001f40:	d4f6      	bmi.n	8001f30 <_swilseek+0x24>
 8001f42:	682b      	ldr	r3, [r5, #0]
 8001f44:	260a      	movs	r6, #10
 8001f46:	e9cd 3400 	strd	r3, r4, [sp]
 8001f4a:	466f      	mov	r7, sp
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	4639      	mov	r1, r7
 8001f50:	beab      	bkpt	0x00ab
 8001f52:	4606      	mov	r6, r0
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ff91 	bl	8001e7c <checkerror>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	dbe1      	blt.n	8001f22 <_swilseek+0x16>
 8001f5e:	606c      	str	r4, [r5, #4]
 8001f60:	e7e1      	b.n	8001f26 <_swilseek+0x1a>
 8001f62:	2e02      	cmp	r6, #2
 8001f64:	d1ed      	bne.n	8001f42 <_swilseek+0x36>
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001f6e:	260c      	movs	r6, #12
 8001f70:	4630      	mov	r0, r6
 8001f72:	4639      	mov	r1, r7
 8001f74:	beab      	bkpt	0x00ab
 8001f76:	4606      	mov	r6, r0
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7ff ff7f 	bl	8001e7c <checkerror>
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	d0cf      	beq.n	8001f22 <_swilseek+0x16>
 8001f82:	4404      	add	r4, r0
 8001f84:	e7dd      	b.n	8001f42 <_swilseek+0x36>

08001f86 <_lseek>:
 8001f86:	f7ff bfc1 	b.w	8001f0c <_swilseek>

08001f8a <_swiwrite>:
 8001f8a:	b530      	push	{r4, r5, lr}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f92:	9203      	str	r2, [sp, #12]
 8001f94:	2405      	movs	r4, #5
 8001f96:	ad01      	add	r5, sp, #4
 8001f98:	4620      	mov	r0, r4
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	beab      	bkpt	0x00ab
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ff6b 	bl	8001e7c <checkerror>
 8001fa6:	b005      	add	sp, #20
 8001fa8:	bd30      	pop	{r4, r5, pc}

08001faa <_write>:
 8001faa:	b570      	push	{r4, r5, r6, lr}
 8001fac:	460e      	mov	r6, r1
 8001fae:	4615      	mov	r5, r2
 8001fb0:	f7ff ff4a 	bl	8001e48 <findslot>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b930      	cbnz	r0, 8001fc6 <_write+0x1c>
 8001fb8:	f7ff f826 	bl	8001008 <__errno>
 8001fbc:	2309      	movs	r3, #9
 8001fbe:	6003      	str	r3, [r0, #0]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
 8001fc6:	462a      	mov	r2, r5
 8001fc8:	4631      	mov	r1, r6
 8001fca:	6800      	ldr	r0, [r0, #0]
 8001fcc:	f7ff ffdd 	bl	8001f8a <_swiwrite>
 8001fd0:	1e02      	subs	r2, r0, #0
 8001fd2:	dbf5      	blt.n	8001fc0 <_write+0x16>
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	1aa8      	subs	r0, r5, r2
 8001fd8:	4403      	add	r3, r0
 8001fda:	42aa      	cmp	r2, r5
 8001fdc:	6063      	str	r3, [r4, #4]
 8001fde:	d1f1      	bne.n	8001fc4 <_write+0x1a>
 8001fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff bf59 	b.w	8001e9c <error>

08001fea <_swiclose>:
 8001fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fec:	ad02      	add	r5, sp, #8
 8001fee:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001ff2:	2402      	movs	r4, #2
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	beab      	bkpt	0x00ab
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ff3d 	bl	8001e7c <checkerror>
 8002002:	b003      	add	sp, #12
 8002004:	bd30      	pop	{r4, r5, pc}
	...

08002008 <_close>:
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	4605      	mov	r5, r0
 800200c:	f7ff ff1c 	bl	8001e48 <findslot>
 8002010:	4604      	mov	r4, r0
 8002012:	b930      	cbnz	r0, 8002022 <_close+0x1a>
 8002014:	f7fe fff8 	bl	8001008 <__errno>
 8002018:	2309      	movs	r3, #9
 800201a:	6003      	str	r3, [r0, #0]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	bd38      	pop	{r3, r4, r5, pc}
 8002022:	3d01      	subs	r5, #1
 8002024:	2d01      	cmp	r5, #1
 8002026:	d809      	bhi.n	800203c <_close+0x34>
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <_close+0x48>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	429a      	cmp	r2, r3
 8002030:	d104      	bne.n	800203c <_close+0x34>
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
 8002036:	6003      	str	r3, [r0, #0]
 8002038:	2000      	movs	r0, #0
 800203a:	e7f1      	b.n	8002020 <_close+0x18>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	f7ff ffd4 	bl	8001fea <_swiclose>
 8002042:	2800      	cmp	r0, #0
 8002044:	d1ec      	bne.n	8002020 <_close+0x18>
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	6023      	str	r3, [r4, #0]
 800204c:	e7e8      	b.n	8002020 <_close+0x18>
 800204e:	bf00      	nop
 8002050:	20000094 	.word	0x20000094

08002054 <_swistat>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	460c      	mov	r4, r1
 8002058:	f7ff fef6 	bl	8001e48 <findslot>
 800205c:	4606      	mov	r6, r0
 800205e:	b930      	cbnz	r0, 800206e <_swistat+0x1a>
 8002060:	f7fe ffd2 	bl	8001008 <__errno>
 8002064:	2309      	movs	r3, #9
 8002066:	6003      	str	r3, [r0, #0]
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	6863      	ldr	r3, [r4, #4]
 8002070:	250c      	movs	r5, #12
 8002072:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002076:	6063      	str	r3, [r4, #4]
 8002078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207c:	6463      	str	r3, [r4, #68]	; 0x44
 800207e:	4628      	mov	r0, r5
 8002080:	4631      	mov	r1, r6
 8002082:	beab      	bkpt	0x00ab
 8002084:	4605      	mov	r5, r0
 8002086:	4628      	mov	r0, r5
 8002088:	f7ff fef8 	bl	8001e7c <checkerror>
 800208c:	1c43      	adds	r3, r0, #1
 800208e:	bf1c      	itt	ne
 8002090:	6120      	strne	r0, [r4, #16]
 8002092:	2000      	movne	r0, #0
 8002094:	e7ea      	b.n	800206c <_swistat+0x18>

08002096 <_fstat>:
 8002096:	460b      	mov	r3, r1
 8002098:	b510      	push	{r4, lr}
 800209a:	2100      	movs	r1, #0
 800209c:	4604      	mov	r4, r0
 800209e:	2258      	movs	r2, #88	; 0x58
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe ffdb 	bl	800105c <memset>
 80020a6:	4601      	mov	r1, r0
 80020a8:	4620      	mov	r0, r4
 80020aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ae:	f7ff bfd1 	b.w	8002054 <_swistat>

080020b2 <_isatty>:
 80020b2:	b570      	push	{r4, r5, r6, lr}
 80020b4:	f7ff fec8 	bl	8001e48 <findslot>
 80020b8:	2509      	movs	r5, #9
 80020ba:	4604      	mov	r4, r0
 80020bc:	b920      	cbnz	r0, 80020c8 <_isatty+0x16>
 80020be:	f7fe ffa3 	bl	8001008 <__errno>
 80020c2:	6005      	str	r5, [r0, #0]
 80020c4:	4620      	mov	r0, r4
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
 80020c8:	4628      	mov	r0, r5
 80020ca:	4621      	mov	r1, r4
 80020cc:	beab      	bkpt	0x00ab
 80020ce:	4604      	mov	r4, r0
 80020d0:	2c01      	cmp	r4, #1
 80020d2:	d0f7      	beq.n	80020c4 <_isatty+0x12>
 80020d4:	f7fe ff98 	bl	8001008 <__errno>
 80020d8:	2400      	movs	r4, #0
 80020da:	4606      	mov	r6, r0
 80020dc:	2513      	movs	r5, #19
 80020de:	4628      	mov	r0, r5
 80020e0:	4621      	mov	r1, r4
 80020e2:	beab      	bkpt	0x00ab
 80020e4:	4605      	mov	r5, r0
 80020e6:	6035      	str	r5, [r6, #0]
 80020e8:	e7ec      	b.n	80020c4 <_isatty+0x12>
	...

080020ec <_init>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr

080020f8 <_fini>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr

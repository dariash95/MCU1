
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021bc  080021bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080021bc  080021bc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021bc  080021bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021bc  080021bc  000121bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080021c0  080021c0  000121c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080021c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  0800222c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800222c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ab6  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000052e  00000000  00000000  00021b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00022078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00022230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000026ce  00000000  00000000  000223b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001457  00000000  00000000  00024a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009e45  00000000  00000000  00025ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fd1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001154  00000000  00000000  0002fd98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	080020fc 	.word	0x080020fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	080020fc 	.word	0x080020fc

08000170 <SPI_GPIOInits>:
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}


void SPI_GPIOInits(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOA;
 8000176:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <SPI_GPIOInits+0x64>)
 8000178:	603b      	str	r3, [r7, #0]

	// NSS -- Not used in this case
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1; // Input
 800017a:	2301      	movs	r3, #1
 800017c:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Floating Input
 800017e:	2302      	movs	r3, #2
 8000180:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000182:	2304      	movs	r3, #4
 8000184:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 8000186:	463b      	mov	r3, r7
 8000188:	4618      	mov	r0, r3
 800018a:	f000 f9f3 	bl	8000574 <GPIO_Init>

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 800018e:	2301      	movs	r3, #1
 8000190:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 8000192:	2302      	movs	r3, #2
 8000194:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000196:	2305      	movs	r3, #5
 8000198:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 800019a:	463b      	mov	r3, r7
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f9e9 	bl	8000574 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 0; // Input
 80001a2:	2300      	movs	r3, #0
 80001a4:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 1; // Floating input
 80001a6:	2301      	movs	r3, #1
 80001a8:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001aa:	2306      	movs	r3, #6
 80001ac:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001ae:	463b      	mov	r3, r7
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f9df 	bl	8000574 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001b6:	2301      	movs	r3, #1
 80001b8:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001ba:	2302      	movs	r3, #2
 80001bc:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001be:	2307      	movs	r3, #7
 80001c0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001c2:	463b      	mov	r3, r7
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f9d5 	bl	8000574 <GPIO_Init>
}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800

080001d8 <SPI_Inits>:

void SPI_Inits(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI1;
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <SPI_Inits+0x38>)
 80001e0:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD ;
 80001e2:	2301      	movs	r3, #1
 80001e4:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80001e6:	2301      	movs	r3, #1
 80001e8:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPI_Config.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV_8;
 80001ea:	2302      	movs	r3, #2
 80001ec:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80001f2:	2300      	movs	r3, #0
 80001f4:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80001f6:	2300      	movs	r3, #0
 80001f8:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 80001fe:	463b      	mov	r3, r7
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fc55 	bl	8000ab0 <SPI_Init>
}
 8000206:	bf00      	nop
 8000208:	3718      	adds	r7, #24
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40013000 	.word	0x40013000

08000214 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPI_Inter_Pin; // Variable for the GPIO Handle
	memset(&SPI_Inter_Pin, 0, sizeof(SPI_Inter_Pin)); // Set value to 0
 800021a:	463b      	mov	r3, r7
 800021c:	2208      	movs	r2, #8
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fef9 	bl	8001018 <memset>

	// GPIO Button Configuration
	SPI_Inter_Pin.pGPIOx = GPIOA; // Initialize variable and select port
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <Slave_GPIO_InterruptPinInit+0x4c>)
 8000228:	603b      	str	r3, [r7, #0]
	SPI_Inter_Pin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800022a:	2307      	movs	r3, #7
 800022c:	713b      	strb	r3, [r7, #4]
	SPI_Inter_Pin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 800022e:	2300      	movs	r3, #0
 8000230:	717b      	strb	r3, [r7, #5]
	SPI_Inter_Pin.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 8000232:	2302      	movs	r3, #2
 8000234:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&SPI_Inter_Pin);
 8000236:	463b      	mov	r3, r7
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f99b 	bl	8000574 <GPIO_Init>

	// Button interrupt configuration
	GPIO_InterHandler(&SPI_Inter_Pin, INTER_FALLING_EDGE); //Trigger Interrupt in the falling edge
 800023e:	463b      	mov	r3, r7
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fa58 	bl	80006f8 <GPIO_InterHandler>

	GPIO_IRQPriority(IRQ_NO_EXTI9_5, NVIC_PRIO_15);
 8000248:	210f      	movs	r1, #15
 800024a:	2017      	movs	r0, #23
 800024c:	f000 fb98 	bl	8000980 <GPIO_IRQPriority>
	GPIO_IRQConfig(IRQ_NO_EXTI9_5, ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	2017      	movs	r0, #23
 8000254:	f000 fb10 	bl	8000878 <GPIO_IRQConfig>
}
 8000258:	bf00      	nop
 800025a:	3708      	adds	r7, #8
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40010800 	.word	0x40010800

08000264 <main>:


int main(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 800026a:	23ff      	movs	r3, #255	; 0xff
 800026c:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit(); // Initializes pin to deliver the interrupt
 800026e:	f7ff ffd1 	bl	8000214 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI_GPIOInits();
 8000272:	f7ff ff7d 	bl	8000170 <SPI_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI_Inits();
 8000276:	f7ff ffaf 	bl	80001d8 <SPI_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI1,ENABLE);
 800027a:	2101      	movs	r1, #1
 800027c:	4824      	ldr	r0, [pc, #144]	; (8000310 <main+0xac>)
 800027e:	f000 fdb9 	bl	8000df4 <SPI_SSOEConfig>

	SPI_IRQConfig(IRQ_NO_SPI1,ENABLE); // Enable interrupts for SPI
 8000282:	2101      	movs	r1, #1
 8000284:	2023      	movs	r0, #35	; 0x23
 8000286:	f000 fcc9 	bl	8000c1c <SPI_IRQConfig>

	while(1){

		rcvStop = 0;
 800028a:	4b22      	ldr	r3, [pc, #136]	; (8000314 <main+0xb0>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 8000290:	bf00      	nop
 8000292:	4b21      	ldr	r3, [pc, #132]	; (8000318 <main+0xb4>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0fa      	beq.n	8000292 <main+0x2e>

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,DISABLE); // Interrupts are disable while the communication happens
 800029c:	2100      	movs	r1, #0
 800029e:	2017      	movs	r0, #23
 80002a0:	f000 faea 	bl	8000878 <GPIO_IRQConfig>

		//enable the SPI1 peripheral
		SPI_PeripheralControl(SPI1,ENABLE);
 80002a4:	2101      	movs	r1, #1
 80002a6:	481a      	ldr	r0, [pc, #104]	; (8000310 <main+0xac>)
 80002a8:	f000 fd89 	bl	8000dbe <SPI_PeripheralControl>


		while(!rcvStop)
 80002ac:	e012      	b.n	80002d4 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while (SPI_SendData_Inter(&SPI1Handle, &dummy, 1) == SPI_BUSY_IN_TX);
 80002ae:	bf00      	nop
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	4819      	ldr	r0, [pc, #100]	; (800031c <main+0xb8>)
 80002b8:	f000 fc68 	bl	8000b8c <SPI_SendData_Inter>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d0f6      	beq.n	80002b0 <main+0x4c>
			// While the device is sending data (Busy in Tx, the program is going to stay in this loop
			while (SPI_ReceiveData_Inter(&SPI1Handle, &ReadByte, 1) == SPI_BUSY_IN_RX);
 80002c2:	bf00      	nop
 80002c4:	2201      	movs	r2, #1
 80002c6:	4916      	ldr	r1, [pc, #88]	; (8000320 <main+0xbc>)
 80002c8:	4814      	ldr	r0, [pc, #80]	; (800031c <main+0xb8>)
 80002ca:	f000 fc83 	bl	8000bd4 <SPI_ReceiveData_Inter>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d0f7      	beq.n	80002c4 <main+0x60>
		while(!rcvStop)
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <main+0xb0>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0e7      	beq.n	80002ae <main+0x4a>
			*/
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI1,SPI_BUSY_FLAG) );
 80002de:	bf00      	nop
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	480b      	ldr	r0, [pc, #44]	; (8000310 <main+0xac>)
 80002e4:	f000 fc3f 	bl	8000b66 <SPI_GetFlagStatus>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d1f8      	bne.n	80002e0 <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI1,DISABLE);
 80002ee:	2100      	movs	r1, #0
 80002f0:	4807      	ldr	r0, [pc, #28]	; (8000310 <main+0xac>)
 80002f2:	f000 fd64 	bl	8000dbe <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80002f6:	490b      	ldr	r1, [pc, #44]	; (8000324 <main+0xc0>)
 80002f8:	480b      	ldr	r0, [pc, #44]	; (8000328 <main+0xc4>)
 80002fa:	f000 fe95 	bl	8001028 <iprintf>

		dataAvailable = 0;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0xb4>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]

		GPIO_IRQConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	2017      	movs	r0, #23
 8000308:	f000 fab6 	bl	8000878 <GPIO_IRQConfig>
		rcvStop = 0;
 800030c:	e7bd      	b.n	800028a <main+0x26>
 800030e:	bf00      	nop
 8000310:	40013000 	.word	0x40013000
 8000314:	20000084 	.word	0x20000084
 8000318:	20000085 	.word	0x20000085
 800031c:	20000330 	.word	0x20000330
 8000320:	20000138 	.word	0x20000138
 8000324:	2000013c 	.word	0x2000013c
 8000328:	08002114 	.word	0x08002114

0800032c <SPI1_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI1_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI1Handle);
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <SPI1_IRQHandler+0x10>)
 8000332:	f000 fcf7 	bl	8000d24 <SPI_IRQHandling>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000330 	.word	0x20000330

08000340 <SPI_ApplicationEventCallback>:

void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_COMPLETE)
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b02      	cmp	r3, #2
 8000350:	d11f      	bne.n	8000392 <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <SPI_ApplicationEventCallback+0x5c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	1c5a      	adds	r2, r3, #1
 8000358:	4910      	ldr	r1, [pc, #64]	; (800039c <SPI_ApplicationEventCallback+0x5c>)
 800035a:	600a      	str	r2, [r1, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <SPI_ApplicationEventCallback+0x60>)
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	b2d1      	uxtb	r1, r2
 8000362:	4a10      	ldr	r2, [pc, #64]	; (80003a4 <SPI_ApplicationEventCallback+0x64>)
 8000364:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){ // Recieves data until it encounter \0 or the length of data is max
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SPI_ApplicationEventCallback+0x60>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	2b00      	cmp	r3, #0
 800036e:	d004      	beq.n	800037a <SPI_ApplicationEventCallback+0x3a>
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <SPI_ApplicationEventCallback+0x5c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000378:	d10b      	bne.n	8000392 <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <SPI_ApplicationEventCallback+0x68>)
 800037c:	2201      	movs	r2, #1
 800037e:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <SPI_ApplicationEventCallback+0x5c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <SPI_ApplicationEventCallback+0x64>)
 8000388:	2100      	movs	r1, #0
 800038a:	54d1      	strb	r1, [r2, r3]
					i = 0;
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <SPI_ApplicationEventCallback+0x5c>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
				}
	}

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	20000088 	.word	0x20000088
 80003a0:	20000138 	.word	0x20000138
 80003a4:	2000013c 	.word	0x2000013c
 80003a8:	20000084 	.word	0x20000084

080003ac <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_6);
 80003b0:	2006      	movs	r0, #6
 80003b2:	f000 fb0f 	bl	80009d4 <GPIO_IRQHandling>
	dataAvailable = 1;
 80003b6:	4b02      	ldr	r3, [pc, #8]	; (80003c0 <EXTI9_5_IRQHandler+0x14>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000085 	.word	0x20000085

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490e      	ldr	r1, [pc, #56]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0b      	ldr	r4, [pc, #44]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003ee:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 fded 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff35 	bl	8000264 <main>

080003fa <LoopForever>:

LoopForever:
    b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000408:	080021c4 	.word	0x080021c4
  ldr r2, =_sbss
 800040c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000410:	2000034c 	.word	0x2000034c

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d148      	bne.n	80004bc <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a4a      	ldr	r2, [pc, #296]	; (8000558 <GPIO_PeriClkCtrl+0x140>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 8000432:	4b4a      	ldr	r3, [pc, #296]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a49      	ldr	r2, [pc, #292]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000438:	f043 0304 	orr.w	r3, r3, #4
 800043c:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 800043e:	e085      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a47      	ldr	r2, [pc, #284]	; (8000560 <GPIO_PeriClkCtrl+0x148>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000448:	4b44      	ldr	r3, [pc, #272]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a43      	ldr	r2, [pc, #268]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
}
 8000454:	e07a      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a42      	ldr	r2, [pc, #264]	; (8000564 <GPIO_PeriClkCtrl+0x14c>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a3e      	ldr	r2, [pc, #248]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000464:	f043 0310 	orr.w	r3, r3, #16
 8000468:	6193      	str	r3, [r2, #24]
}
 800046a:	e06f      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a3e      	ldr	r2, [pc, #248]	; (8000568 <GPIO_PeriClkCtrl+0x150>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000474:	4b39      	ldr	r3, [pc, #228]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a38      	ldr	r2, [pc, #224]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
}
 8000480:	e064      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a39      	ldr	r2, [pc, #228]	; (800056c <GPIO_PeriClkCtrl+0x154>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000494:	6193      	str	r3, [r2, #24]
}
 8000496:	e059      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a35      	ldr	r2, [pc, #212]	; (8000570 <GPIO_PeriClkCtrl+0x158>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a2d      	ldr	r2, [pc, #180]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004aa:	6193      	str	r3, [r2, #24]
}
 80004ac:	e04e      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a2a      	ldr	r2, [pc, #168]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004b8:	6193      	str	r3, [r2, #24]
}
 80004ba:	e047      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a26      	ldr	r2, [pc, #152]	; (8000558 <GPIO_PeriClkCtrl+0x140>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 80004c4:	4b25      	ldr	r3, [pc, #148]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a24      	ldr	r2, [pc, #144]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004ca:	f023 0304 	bic.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
}
 80004d0:	e03c      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a22      	ldr	r2, [pc, #136]	; (8000560 <GPIO_PeriClkCtrl+0x148>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 80004da:	4b20      	ldr	r3, [pc, #128]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004e0:	f023 0308 	bic.w	r3, r3, #8
 80004e4:	6193      	str	r3, [r2, #24]
}
 80004e6:	e031      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a1e      	ldr	r2, [pc, #120]	; (8000564 <GPIO_PeriClkCtrl+0x14c>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 80004f6:	f023 0310 	bic.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
}
 80004fc:	e026      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a19      	ldr	r2, [pc, #100]	; (8000568 <GPIO_PeriClkCtrl+0x150>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800050c:	f023 0320 	bic.w	r3, r3, #32
 8000510:	6193      	str	r3, [r2, #24]
}
 8000512:	e01b      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <GPIO_PeriClkCtrl+0x154>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000526:	6193      	str	r3, [r2, #24]
}
 8000528:	e010      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <GPIO_PeriClkCtrl+0x158>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800053c:	6193      	str	r3, [r2, #24]
}
 800053e:	e005      	b.n	800054c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <GPIO_PeriClkCtrl+0x144>)
 8000546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800054a:	6193      	str	r3, [r2, #24]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40010800 	.word	0x40010800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00
 8000564:	40011000 	.word	0x40011000
 8000568:	40011400 	.word	0x40011400
 800056c:	40011800 	.word	0x40011800
 8000570:	40011c00 	.word	0x40011c00

08000574 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff48 	bl	8000418 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d84b      	bhi.n	8000630 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	795b      	ldrb	r3, [r3, #5]
 80005a2:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	799b      	ldrb	r3, [r3, #6]
 80005a8:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	3302      	adds	r3, #2
 80005b8:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 80005ba:	7d3b      	ldrb	r3, [r7, #20]
 80005bc:	2203      	movs	r2, #3
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 80005c4:	7cfb      	ldrb	r3, [r7, #19]
 80005c6:	2203      	movs	r2, #3
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 80005ce:	7dba      	ldrb	r2, [r7, #22]
 80005d0:	7d3b      	ldrb	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	43da      	mvns	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	400a      	ands	r2, r1
 80005e8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 80005fe:	7d7a      	ldrb	r2, [r7, #21]
 8000600:	7cfb      	ldrb	r3, [r7, #19]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6819      	ldr	r1, [r3, #0]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	43da      	mvns	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
 800062e:	e058      	b.n	80006e2 <GPIO_Init+0x16e>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	3b08      	subs	r3, #8
 8000636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	795b      	ldrb	r3, [r3, #5]
 800063e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	799b      	ldrb	r3, [r3, #6]
 8000646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 800064a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 8000654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3302      	adds	r3, #2
 800065e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 8000662:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000666:	2203      	movs	r2, #3
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 8000670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000674:	2203      	movs	r2, #3
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 800067e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000682:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6859      	ldr	r1, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	69fa      	ldr	r2, [r7, #28]
 8000698:	400a      	ands	r2, r1
 800069a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	6859      	ldr	r1, [r3, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006a8:	430a      	orrs	r2, r1
 80006aa:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 80006b0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80006b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006b8:	fa02 f303 	lsl.w	r3, r2, r3
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6859      	ldr	r1, [r3, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	400a      	ands	r2, r1
 80006cc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6859      	ldr	r1, [r3, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006da:	430a      	orrs	r2, r1
 80006dc:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2202      	movs	r2, #2
 80006e6:	715a      	strb	r2, [r3, #5]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2203      	movs	r2, #3
 80006ec:	715a      	strb	r2, [r3, #5]

	}
}
 80006ee:	bf00      	nop
 80006f0:	3730      	adds	r7, #48	; 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <GPIO_InterHandler>:
 * @param [in]		Type of interrupt
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_InterHandler(GPIO_Handle_t *pGPIOHandle, uint8_t InterType){
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]

	uint8_t positions = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	73fb      	strb	r3, [r7, #15]

	if (InterType == 1){ //Rising edge detection
 800070a:	78fb      	ldrb	r3, [r7, #3]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d115      	bne.n	800073c <GPIO_InterHandler+0x44>
		EXTI->RTSR |= (1 << positions);
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <GPIO_InterHandler+0x158>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	2101      	movs	r1, #1
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	4611      	mov	r1, r2
 800071e:	4a4c      	ldr	r2, [pc, #304]	; (8000850 <GPIO_InterHandler+0x158>)
 8000720:	430b      	orrs	r3, r1
 8000722:	6093      	str	r3, [r2, #8]
		EXTI->FTSR &= ~(1 << positions); // Disable falling edge
 8000724:	4b4a      	ldr	r3, [pc, #296]	; (8000850 <GPIO_InterHandler+0x158>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	7bfa      	ldrb	r2, [r7, #15]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	43d2      	mvns	r2, r2
 8000732:	4611      	mov	r1, r2
 8000734:	4a46      	ldr	r2, [pc, #280]	; (8000850 <GPIO_InterHandler+0x158>)
 8000736:	400b      	ands	r3, r1
 8000738:	60d3      	str	r3, [r2, #12]
 800073a:	e02c      	b.n	8000796 <GPIO_InterHandler+0x9e>

	} else if (InterType ==2) { //Falling edge detection
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d115      	bne.n	800076e <GPIO_InterHandler+0x76>
		EXTI->FTSR |= (1 << positions);
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <GPIO_InterHandler+0x158>)
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	4611      	mov	r1, r2
 8000750:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <GPIO_InterHandler+0x158>)
 8000752:	430b      	orrs	r3, r1
 8000754:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(1 << positions); // Disable rising edge
 8000756:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <GPIO_InterHandler+0x158>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	7bfa      	ldrb	r2, [r7, #15]
 800075c:	2101      	movs	r1, #1
 800075e:	fa01 f202 	lsl.w	r2, r1, r2
 8000762:	43d2      	mvns	r2, r2
 8000764:	4611      	mov	r1, r2
 8000766:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <GPIO_InterHandler+0x158>)
 8000768:	400b      	ands	r3, r1
 800076a:	6093      	str	r3, [r2, #8]
 800076c:	e013      	b.n	8000796 <GPIO_InterHandler+0x9e>

	} else { //Detection for both edges
		EXTI->FTSR |= (1 << positions);
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <GPIO_InterHandler+0x158>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	7bfa      	ldrb	r2, [r7, #15]
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a34      	ldr	r2, [pc, #208]	; (8000850 <GPIO_InterHandler+0x158>)
 800077e:	430b      	orrs	r3, r1
 8000780:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (1 << positions);
 8000782:	4b33      	ldr	r3, [pc, #204]	; (8000850 <GPIO_InterHandler+0x158>)
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	4611      	mov	r1, r2
 8000790:	4a2f      	ldr	r2, [pc, #188]	; (8000850 <GPIO_InterHandler+0x158>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6093      	str	r3, [r2, #8]
	}

	// Configure the GPIO port selection in AFIO_EXTICR
	uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4); // To define the EXTI (0-15)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	73bb      	strb	r3, [r7, #14]
	uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4); // To define the position in the register
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	f003 0303 	and.w	r3, r3, #3
 80007a6:	737b      	strb	r3, [r7, #13]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a29      	ldr	r2, [pc, #164]	; (8000854 <GPIO_InterHandler+0x15c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d02b      	beq.n	800080a <GPIO_InterHandler+0x112>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <GPIO_InterHandler+0x160>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d024      	beq.n	8000806 <GPIO_InterHandler+0x10e>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a26      	ldr	r2, [pc, #152]	; (800085c <GPIO_InterHandler+0x164>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d01d      	beq.n	8000802 <GPIO_InterHandler+0x10a>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a25      	ldr	r2, [pc, #148]	; (8000860 <GPIO_InterHandler+0x168>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d016      	beq.n	80007fe <GPIO_InterHandler+0x106>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a23      	ldr	r2, [pc, #140]	; (8000864 <GPIO_InterHandler+0x16c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d00f      	beq.n	80007fa <GPIO_InterHandler+0x102>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <GPIO_InterHandler+0x170>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d008      	beq.n	80007f6 <GPIO_InterHandler+0xfe>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <GPIO_InterHandler+0x174>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <GPIO_InterHandler+0xfa>
 80007ee:	2306      	movs	r3, #6
 80007f0:	e00c      	b.n	800080c <GPIO_InterHandler+0x114>
 80007f2:	2300      	movs	r3, #0
 80007f4:	e00a      	b.n	800080c <GPIO_InterHandler+0x114>
 80007f6:	2305      	movs	r3, #5
 80007f8:	e008      	b.n	800080c <GPIO_InterHandler+0x114>
 80007fa:	2304      	movs	r3, #4
 80007fc:	e006      	b.n	800080c <GPIO_InterHandler+0x114>
 80007fe:	2303      	movs	r3, #3
 8000800:	e004      	b.n	800080c <GPIO_InterHandler+0x114>
 8000802:	2302      	movs	r3, #2
 8000804:	e002      	b.n	800080c <GPIO_InterHandler+0x114>
 8000806:	2301      	movs	r3, #1
 8000808:	e000      	b.n	800080c <GPIO_InterHandler+0x114>
 800080a:	2300      	movs	r3, #0
 800080c:	733b      	strb	r3, [r7, #12]
	uint8_t aux = temp2*4;
 800080e:	7b7b      	ldrb	r3, [r7, #13]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	72fb      	strb	r3, [r7, #11]

	AFIO_PCLK_EN(); // RCC enable for AFIO
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <GPIO_InterHandler+0x178>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <GPIO_InterHandler+0x178>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6193      	str	r3, [r2, #24]
	AFIO->EXTICR[temp1] = portcode << aux;
 8000820:	7b3a      	ldrb	r2, [r7, #12]
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	fa02 f103 	lsl.w	r1, r2, r3
 8000828:	4a12      	ldr	r2, [pc, #72]	; (8000874 <GPIO_InterHandler+0x17c>)
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	3302      	adds	r3, #2
 800082e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	// Enable the EXTI Interrupt delivery using IMR
	EXTI->IMR |= (1 << positions);
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <GPIO_InterHandler+0x158>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	; (8000850 <GPIO_InterHandler+0x158>)
 8000842:	430b      	orrs	r3, r1
 8000844:	6013      	str	r3, [r2, #0]
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40010400 	.word	0x40010400
 8000854:	40010800 	.word	0x40010800
 8000858:	40010c00 	.word	0x40010c00
 800085c:	40011000 	.word	0x40011000
 8000860:	40011400 	.word	0x40011400
 8000864:	40011800 	.word	0x40011800
 8000868:	40011c00 	.word	0x40011c00
 800086c:	40012000 	.word	0x40012000
 8000870:	40021000 	.word	0x40021000
 8000874:	40010000 	.word	0x40010000

08000878 <GPIO_IRQConfig>:
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	460a      	mov	r2, r1
 8000882:	71fb      	strb	r3, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	71bb      	strb	r3, [r7, #6]
	if (EnOrDi == ENABLE){
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d133      	bne.n	80008f6 <GPIO_IRQConfig+0x7e>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b1f      	cmp	r3, #31
 8000892:	d80a      	bhi.n	80008aa <GPIO_IRQConfig+0x32>
			*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <GPIO_IRQConfig+0xf0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a31      	ldr	r2, [pc, #196]	; (8000968 <GPIO_IRQConfig+0xf0>)
 80008a4:	430b      	orrs	r3, r1
 80008a6:	6013      	str	r3, [r2, #0]
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
		}
	}
}
 80008a8:	e059      	b.n	800095e <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b1f      	cmp	r3, #31
 80008ae:	d90f      	bls.n	80008d0 <GPIO_IRQConfig+0x58>
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b3f      	cmp	r3, #63	; 0x3f
 80008b4:	d80c      	bhi.n	80008d0 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <GPIO_IRQConfig+0xf4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	f002 021f 	and.w	r2, r2, #31
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	4611      	mov	r1, r2
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <GPIO_IRQConfig+0xf4>)
 80008ca:	430b      	orrs	r3, r1
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e046      	b.n	800095e <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b3f      	cmp	r3, #63	; 0x3f
 80008d4:	d943      	bls.n	800095e <GPIO_IRQConfig+0xe6>
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b5f      	cmp	r3, #95	; 0x5f
 80008da:	d840      	bhi.n	800095e <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <GPIO_IRQConfig+0xf8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008e6:	2101      	movs	r1, #1
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <GPIO_IRQConfig+0xf8>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	e033      	b.n	800095e <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31){ // IRQ Number 0-31
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b1f      	cmp	r3, #31
 80008fa:	d80a      	bhi.n	8000912 <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <GPIO_IRQConfig+0xfc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	4611      	mov	r1, r2
 800090a:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <GPIO_IRQConfig+0xfc>)
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	e025      	b.n	800095e <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b1f      	cmp	r3, #31
 8000916:	d90f      	bls.n	8000938 <GPIO_IRQConfig+0xc0>
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b3f      	cmp	r3, #63	; 0x3f
 800091c:	d80c      	bhi.n	8000938 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <GPIO_IRQConfig+0x100>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	f002 021f 	and.w	r2, r2, #31
 8000928:	2101      	movs	r1, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	4611      	mov	r1, r2
 8000930:	4a11      	ldr	r2, [pc, #68]	; (8000978 <GPIO_IRQConfig+0x100>)
 8000932:	430b      	orrs	r3, r1
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e012      	b.n	800095e <GPIO_IRQConfig+0xe6>
		} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b3f      	cmp	r3, #63	; 0x3f
 800093c:	d90f      	bls.n	800095e <GPIO_IRQConfig+0xe6>
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b5f      	cmp	r3, #95	; 0x5f
 8000942:	d80c      	bhi.n	800095e <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000944:	4b0d      	ldr	r3, [pc, #52]	; (800097c <GPIO_IRQConfig+0x104>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	4611      	mov	r1, r2
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <GPIO_IRQConfig+0x104>)
 8000958:	430b      	orrs	r3, r1
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	e7ff      	b.n	800095e <GPIO_IRQConfig+0xe6>
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	e000e100 	.word	0xe000e100
 800096c:	e000e104 	.word	0xe000e104
 8000970:	e000e108 	.word	0xe000e108
 8000974:	e000e180 	.word	0xe000e180
 8000978:	e000e184 	.word	0xe000e184
 800097c:	e000e188 	.word	0xe000e188

08000980 <GPIO_IRQPriority>:
 * @param [in]		IRQ Number
 * @param [in]		IRQ Priority
 * @return			None
 * @note 			None
 */
void GPIO_IRQPriority (uint8_t IRQNumber,uint32_t IRQPriority){
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]

	uint8_t iprx =  IRQNumber/4; // Define which IPR Register you have to use (0-59)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	089b      	lsrs	r3, r3, #2
 8000990:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section =  IRQNumber%4; // Define the section on the IPR (0-4) * 8 bc each section is 8 bits
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	73bb      	strb	r3, [r7, #14]
	uint8_t aux =  ((8* iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED)); // This is the arrangement done bc the 4 first bits of each section are not implemented.
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3304      	adds	r3, #4
 80009a2:	737b      	strb	r3, [r7, #13]

	*(NVIC_PRIO_BASEADDR + (iprx)) |= (IRQPriority <<aux);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009ac:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	409a      	lsls	r2, r3
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80009c0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80009c4:	430a      	orrs	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <GPIO_IRQHandling>:
 * @param [in]		Pin Number
 * @return			None
 * @note 			None
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	// Clear the EXTI Pending Register Corresponding to the Pin Number
	if (EXTI->PR & (1 << PinNumber)){
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	79fa      	ldrb	r2, [r7, #7]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	4013      	ands	r3, r2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d009      	beq.n	8000a04 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	2101      	movs	r1, #1
 80009f8:	fa01 f202 	lsl.w	r2, r1, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <GPIO_IRQHandling+0x3c>)
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6153      	str	r3, [r2, #20]
	}
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40010400 	.word	0x40010400

08000a14 <SPI_PeriClkCtrl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d11c      	bne.n	8000a60 <SPI_PeriClkCtrl+0x4c>
		if (pSPIx == SPI1) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <SPI_PeriClkCtrl+0x90>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d106      	bne.n	8000a3c <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a38:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}  else {
			SPI3_PCLK_DI();
		}
	}
}
 8000a3a:	e02d      	b.n	8000a98 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <SPI_PeriClkCtrl+0x98>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d106      	bne.n	8000a52 <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	61d3      	str	r3, [r2, #28]
}
 8000a50:	e022      	b.n	8000a98 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_EN();
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a5c:	61d3      	str	r3, [r2, #28]
}
 8000a5e:	e01b      	b.n	8000a98 <SPI_PeriClkCtrl+0x84>
		if (pSPIx == SPI1) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <SPI_PeriClkCtrl+0x90>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <SPI_PeriClkCtrl+0x62>
			SPI1_PCLK_DI();
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a72:	6193      	str	r3, [r2, #24]
}
 8000a74:	e010      	b.n	8000a98 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <SPI_PeriClkCtrl+0x98>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <SPI_PeriClkCtrl+0x78>
			SPI2_PCLK_DI();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a88:	61d3      	str	r3, [r2, #28]
}
 8000a8a:	e005      	b.n	8000a98 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_DI();
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SPI_PeriClkCtrl+0x94>)
 8000a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a96:	61d3      	str	r3, [r2, #28]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40013000 	.word	0x40013000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40003800 	.word	0x40003800

08000ab0 <SPI_Init>:
 * @brief			This functions initializes a given SPI
 * @param [in]		Base Address of the SPI Handle
 * @return			None
 * @note 			None
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	//Enable clock
	SPI_PeriClkCtrl(pSPIxHandle->pSPIx, ENABLE);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2101      	movs	r1, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ffa8 	bl	8000a14 <SPI_PeriClkCtrl>


	uint32_t temp = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

	// Configuration of the device mode
	temp |= pSPIxHandle->SPI_Config.SPI_DeviceMode << 2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]

	// Configuration of the Bus
	if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d104      	bne.n	8000ae8 <SPI_Init+0x38>
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDI mode clear
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e014      	b.n	8000b12 <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d104      	bne.n	8000afa <SPI_Init+0x4a>
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e00b      	b.n	8000b12 <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RSONLY){
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	795b      	ldrb	r3, [r3, #5]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d107      	bne.n	8000b12 <SPI_Init+0x62>
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDI mode clear
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b08:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY); // RXONLY set
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b10:	60fb      	str	r3, [r7, #12]
	}

	// Configuration of the clock speed
	temp |= (pSPIxHandle->SPI_Config.SPI_SCLKSpeed << SPI_CR1_BR);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	799b      	ldrb	r3, [r3, #6]
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

	// Configuration of the DFF
	temp |= (pSPIxHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	79db      	ldrb	r3, [r3, #7]
 8000b24:	02db      	lsls	r3, r3, #11
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPOL
	temp |= (pSPIxHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7a1b      	ldrb	r3, [r3, #8]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPHA
	temp |= (pSPIxHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	461a      	mov	r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

	// Configuration of the SSM
	temp |= (pSPIxHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	7a9b      	ldrb	r3, [r3, #10]
 8000b4c:	025b      	lsls	r3, r3, #9
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]

	pSPIxHandle->pSPIx->CR1 = temp; // Here yoo can use = bc al the bit-fields are already configured
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <SPI_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){ // while(!(pSPIx->SR & (1 << 1)));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit is one in that register
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET; // The programs loops in this state until it changes and the flag is set
 8000b80:	2300      	movs	r3, #0
 }
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SPI_SendData_Inter>:
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note 			Blocked communication implemented. The function call will wait until all
 *  				the bytes are transmitted
 */
uint8_t SPI_SendData_Inter(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t len){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TxState; // Fetch state
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	7d9b      	ldrb	r3, [r3, #22]
 8000b9c:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_TX){
 8000b9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d011      	beq.n	8000bc8 <SPI_SendData_Inter+0x3c>
		// Save the Tx Buffer address and length in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = len;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	751a      	strb	r2, [r3, #20]

		// Mark the SPI state as busy in transmission so that no other code cab take over the same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	759a      	strb	r2, [r3, #22]

		// Enable TXEIE control bit to get an interrupt whenever TXE flag is set
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXNEIE);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bc6:	605a      	str	r2, [r3, #4]

		// Data transmission will be handled by the ISR code
	}

	return state;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <SPI_ReceiveData_Inter>:
 * @param [in]		Pointer to the buffer containing the data that is going to be received
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note			None blocking API
 */
uint8_t SPI_ReceiveData_Inter(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t len){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RxState;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	7ddb      	ldrb	r3, [r3, #23]
 8000be4:	75fb      	strb	r3, [r7, #23]

	if (state != SPI_BUSY_IN_RX){
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d011      	beq.n	8000c10 <SPI_ReceiveData_Inter+0x3c>
		// Save the Tx Buffer address and length in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = len;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	755a      	strb	r2, [r3, #21]

		// Mark the SPI state as busy in transmission so that no other code cab take over the same SPI peripheral until transmission is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	75da      	strb	r2, [r3, #23]

		// Enable RXEIE control bit to get an interrupt whenever RXE flag is set
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c0e:	605a      	str	r2, [r3, #4]

		// Data transmission will be handled by the ISR code
	}

	return state;
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <SPI_IRQConfig>:
 * @param [in]		IRQ Priority
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void SPI_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]

	if (EnOrDi == ENABLE){
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d133      	bne.n	8000c9a <SPI_IRQConfig+0x7e>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b1f      	cmp	r3, #31
 8000c36:	d80a      	bhi.n	8000c4e <SPI_IRQConfig+0x32>
				*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 8000c38:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <SPI_IRQConfig+0xf0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	4611      	mov	r1, r2
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <SPI_IRQConfig+0xf0>)
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
			}
		}
}
 8000c4c:	e059      	b.n	8000d02 <SPI_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b1f      	cmp	r3, #31
 8000c52:	d90f      	bls.n	8000c74 <SPI_IRQConfig+0x58>
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b3f      	cmp	r3, #63	; 0x3f
 8000c58:	d80c      	bhi.n	8000c74 <SPI_IRQConfig+0x58>
				*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <SPI_IRQConfig+0xf4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	f002 021f 	and.w	r2, r2, #31
 8000c64:	2101      	movs	r1, #1
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <SPI_IRQConfig+0xf4>)
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e046      	b.n	8000d02 <SPI_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b3f      	cmp	r3, #63	; 0x3f
 8000c78:	d943      	bls.n	8000d02 <SPI_IRQConfig+0xe6>
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c7e:	d840      	bhi.n	8000d02 <SPI_IRQConfig+0xe6>
				*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <SPI_IRQConfig+0xf8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	79fa      	ldrb	r2, [r7, #7]
 8000c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <SPI_IRQConfig+0xf8>)
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	e033      	b.n	8000d02 <SPI_IRQConfig+0xe6>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b1f      	cmp	r3, #31
 8000c9e:	d80a      	bhi.n	8000cb6 <SPI_IRQConfig+0x9a>
				*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <SPI_IRQConfig+0xfc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <SPI_IRQConfig+0xfc>)
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	e025      	b.n	8000d02 <SPI_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b1f      	cmp	r3, #31
 8000cba:	d90f      	bls.n	8000cdc <SPI_IRQConfig+0xc0>
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	d80c      	bhi.n	8000cdc <SPI_IRQConfig+0xc0>
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <SPI_IRQConfig+0x100>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	f002 021f 	and.w	r2, r2, #31
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <SPI_IRQConfig+0x100>)
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e012      	b.n	8000d02 <SPI_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce0:	d90f      	bls.n	8000d02 <SPI_IRQConfig+0xe6>
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ce6:	d80c      	bhi.n	8000d02 <SPI_IRQConfig+0xe6>
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <SPI_IRQConfig+0x104>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	79fa      	ldrb	r2, [r7, #7]
 8000cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <SPI_IRQConfig+0x104>)
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	e7ff      	b.n	8000d02 <SPI_IRQConfig+0xe6>
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000e104 	.word	0xe000e104
 8000d14:	e000e108 	.word	0xe000e108
 8000d18:	e000e180 	.word	0xe000e180
 8000d1c:	e000e184 	.word	0xe000e184
 8000d20:	e000e188 	.word	0xe000e188

08000d24 <SPI_IRQHandling>:
 * @brief			This functions process the interrupt
 * @param [in]		SPI handle
 * @return			None
 * @note 			None
 */
void SPI_IRQHandling(SPI_Handle_t *pSPIxHandle){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	// First, find out why the interrupt happened
	uint8_t temp1, temp2;

	// Check TXE
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_TXE); // Access the TXE in SR to check the value
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	73fb      	strb	r3, [r7, #15]
	// if TXE is set, temp1 = 1. If TXE is reset, temp1 = 0
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_TXNEIE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d46:	73bb      	strb	r3, [r7, #14]

	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of TXE flag
	if (temp1 && temp2){
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <SPI_IRQHandling+0x36>
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <SPI_IRQHandling+0x36>
		// Handle TXE
		SPI_TXE_Interrupt_Handle(pSPIxHandle);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f868 	bl	8000e2a <SPI_TXE_Interrupt_Handle>
	}

	// Check RXNE
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d74:	73bb      	strb	r3, [r7, #14]


	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of RXNE flag
	if (temp1 && temp2){
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <SPI_IRQHandling+0x64>
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d002      	beq.n	8000d88 <SPI_IRQHandling+0x64>
		// Handle RXNE
		SPI_RXNE_Interrupt_Handle(pSPIxHandle);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f894 	bl	8000eb0 <SPI_RXNE_Interrupt_Handle>
	}

	// Check OVR
	temp1 = pSPIxHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d94:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIxHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	f003 0320 	and.w	r3, r3, #32
 8000da2:	73bb      	strb	r3, [r7, #14]


	// If both temp1 and temp2 = 1, then the interrupt was triggered bc of OVR flag
	if (temp1 && temp2){
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <SPI_IRQHandling+0x92>
 8000daa:	7bbb      	ldrb	r3, [r7, #14]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <SPI_IRQHandling+0x92>
		// Handle RXE
		SPI_OVR_Interrupt_Handle(pSPIxHandle);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f8c0 	bl	8000f36 <SPI_OVR_Interrupt_Handle>
	}

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <SPI_PeripheralControl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d106      	bne.n	8000dde <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ddc:	e005      	b.n	8000dea <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SPI_SSOEConfig>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d106      	bne.n	8000e14 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f043 0204 	orr.w	r2, r3, #4
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000e12:	e005      	b.n	8000e20 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f023 0204 	bic.w	r2, r3, #4
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	605a      	str	r2, [r3, #4]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <SPI_TXE_Interrupt_Handle>:

/* 			  Private helpers functions	implementation   				*/
static void SPI_TXE_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]

	if(pSPIxHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d017      	beq.n	8000e70 <SPI_TXE_Interrupt_Handle+0x46>
		pSPIxHandle->pSPIx->DR = *((uint16_t*)pSPIxHandle->pTxBuffer); // Dereference the pointer to get the data
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	881a      	ldrh	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60da      	str	r2, [r3, #12]
		pSPIxHandle->TxLen--;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7d1b      	ldrb	r3, [r3, #20]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	751a      	strb	r2, [r3, #20]
		pSPIxHandle->TxLen--; // 2 bytes to decrease
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7d1b      	ldrb	r3, [r3, #20]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	751a      	strb	r2, [r3, #20]
		(uint16_t*)pSPIxHandle->pTxBuffer++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	e010      	b.n	8000e92 <SPI_TXE_Interrupt_Handle+0x68>

	} else {
		pSPIxHandle->pSPIx->DR = *pSPIxHandle->pTxBuffer;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60da      	str	r2, [r3, #12]
		pSPIxHandle->TxLen--;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7d1b      	ldrb	r3, [r3, #20]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	751a      	strb	r2, [r3, #20]
		pSPIxHandle->pTxBuffer++;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60da      	str	r2, [r3, #12]
	}

	if (! pSPIxHandle->TxLen ) { // When Length is zero, close SPI transmission
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7d1b      	ldrb	r3, [r3, #20]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <SPI_TXE_Interrupt_Handle+0x7e>
		SPI_CloseTransmission(pSPIxHandle);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f863 	bl	8000f66 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIxHandle, SPI_EVENT_TX_COMPLETE);
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fa4c 	bl	8000340 <SPI_ApplicationEventCallback>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SPI_RXNE_Interrupt_Handle>:

static void SPI_RXNE_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	if(pSPIxHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d017      	beq.n	8000ef6 <SPI_RXNE_Interrupt_Handle+0x46>
		pSPIxHandle->pSPIx->DR = *((uint16_t*)pSPIxHandle->pRxBuffer); // Dereference the pointer to get the data
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60da      	str	r2, [r3, #12]
		pSPIxHandle->RxLen--;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7d5b      	ldrb	r3, [r3, #21]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	755a      	strb	r2, [r3, #21]
		pSPIxHandle->RxLen--; // 2 bytes to decrease
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7d5b      	ldrb	r3, [r3, #21]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	755a      	strb	r2, [r3, #21]
		(uint16_t*)pSPIxHandle->pRxBuffer++;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	e010      	b.n	8000f18 <SPI_RXNE_Interrupt_Handle+0x68>

	} else {
		pSPIxHandle->pSPIx->DR = *pSPIxHandle->pRxBuffer;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60da      	str	r2, [r3, #12]
		pSPIxHandle->RxLen--;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7d5b      	ldrb	r3, [r3, #21]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	755a      	strb	r2, [r3, #21]
		pSPIxHandle->pRxBuffer++;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691b      	ldr	r3, [r3, #16]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	611a      	str	r2, [r3, #16]
	}

	if (! pSPIxHandle->RxLen ) { // When Length is zero, close SPI transmission
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7d5b      	ldrb	r3, [r3, #21]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d106      	bne.n	8000f2e <SPI_RXNE_Interrupt_Handle+0x7e>
		SPI_CloseReception(pSPIxHandle);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f83a 	bl	8000f9a <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIxHandle,SPI_EVENT_RX_COMPLETE);
 8000f26:	2102      	movs	r1, #2
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fa09 	bl	8000340 <SPI_ApplicationEventCallback>
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <SPI_OVR_Interrupt_Handle>:

static void SPI_OVR_Interrupt_Handle(SPI_Handle_t *pSPIxHandle){
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]

	// Clear OVR flag
	uint8_t temp;
	if (pSPIxHandle->TxState != SPI_BUSY_IN_TX){
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7d9b      	ldrb	r3, [r3, #22]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d007      	beq.n	8000f56 <SPI_OVR_Interrupt_Handle+0x20>
		temp = pSPIxHandle->pSPIx->DR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	73fb      	strb	r3, [r7, #15]
		temp = pSPIxHandle->pSPIx->SR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	73fb      	strb	r3, [r7, #15]
	}

	(void)temp; // To avoid the warning that the avariable is not being used

	// Inform application
	SPI_ApplicationEventCallback(pSPIxHandle,SPI_EVENT_OVR_COMPLETE);
 8000f56:	2103      	movs	r1, #3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff f9f1 	bl	8000340 <SPI_ApplicationEventCallback>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <SPI_CloseTransmission>:
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseTransmission(SPI_Handle_t *pSPIxHandle){
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]

	pSPIxHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXNEIE); // This prevents interrupts from TXE flag
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f7c:	605a      	str	r2, [r3, #4]
	pSPIxHandle->pTxBuffer = NULL;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
	pSPIxHandle->TxLen = 0;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	751a      	strb	r2, [r3, #20]
	pSPIxHandle ->TxState = SPI_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	759a      	strb	r2, [r3, #22]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr

08000f9a <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIxHandle){
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]

	pSPIxHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE); // This prevents interrupts from TXE flag
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb0:	605a      	str	r2, [r3, #4]
	pSPIxHandle->pRxBuffer = NULL;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
	pSPIxHandle->RxLen = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	755a      	strb	r2, [r3, #21]
	pSPIxHandle ->RxState = SPI_READY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	75da      	strb	r2, [r3, #23]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	4e0c      	ldr	r6, [pc, #48]	; (8001008 <__libc_init_array+0x38>)
 8000fd6:	4c0d      	ldr	r4, [pc, #52]	; (800100c <__libc_init_array+0x3c>)
 8000fd8:	1ba4      	subs	r4, r4, r6
 8000fda:	10a4      	asrs	r4, r4, #2
 8000fdc:	42a5      	cmp	r5, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	f001 f88c 	bl	80020fc <_init>
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	4e0a      	ldr	r6, [pc, #40]	; (8001010 <__libc_init_array+0x40>)
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <__libc_init_array+0x44>)
 8000fea:	1ba4      	subs	r4, r4, r6
 8000fec:	10a4      	asrs	r4, r4, #2
 8000fee:	42a5      	cmp	r5, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ff8:	4798      	blx	r3
 8000ffa:	3501      	adds	r5, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001002:	4798      	blx	r3
 8001004:	3501      	adds	r5, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	080021bc 	.word	0x080021bc
 800100c:	080021bc 	.word	0x080021bc
 8001010:	080021bc 	.word	0x080021bc
 8001014:	080021c0 	.word	0x080021c0

08001018 <memset>:
 8001018:	4603      	mov	r3, r0
 800101a:	4402      	add	r2, r0
 800101c:	4293      	cmp	r3, r2
 800101e:	d100      	bne.n	8001022 <memset+0xa>
 8001020:	4770      	bx	lr
 8001022:	f803 1b01 	strb.w	r1, [r3], #1
 8001026:	e7f9      	b.n	800101c <memset+0x4>

08001028 <iprintf>:
 8001028:	b40f      	push	{r0, r1, r2, r3}
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <iprintf+0x2c>)
 800102c:	b513      	push	{r0, r1, r4, lr}
 800102e:	681c      	ldr	r4, [r3, #0]
 8001030:	b124      	cbz	r4, 800103c <iprintf+0x14>
 8001032:	69a3      	ldr	r3, [r4, #24]
 8001034:	b913      	cbnz	r3, 800103c <iprintf+0x14>
 8001036:	4620      	mov	r0, r4
 8001038:	f000 f84e 	bl	80010d8 <__sinit>
 800103c:	ab05      	add	r3, sp, #20
 800103e:	9a04      	ldr	r2, [sp, #16]
 8001040:	68a1      	ldr	r1, [r4, #8]
 8001042:	4620      	mov	r0, r4
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f000 f953 	bl	80012f0 <_vfiprintf_r>
 800104a:	b002      	add	sp, #8
 800104c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001050:	b004      	add	sp, #16
 8001052:	4770      	bx	lr
 8001054:	20000000 	.word	0x20000000

08001058 <std>:
 8001058:	2300      	movs	r3, #0
 800105a:	b510      	push	{r4, lr}
 800105c:	4604      	mov	r4, r0
 800105e:	e9c0 3300 	strd	r3, r3, [r0]
 8001062:	6083      	str	r3, [r0, #8]
 8001064:	8181      	strh	r1, [r0, #12]
 8001066:	6643      	str	r3, [r0, #100]	; 0x64
 8001068:	81c2      	strh	r2, [r0, #14]
 800106a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800106e:	6183      	str	r3, [r0, #24]
 8001070:	4619      	mov	r1, r3
 8001072:	2208      	movs	r2, #8
 8001074:	305c      	adds	r0, #92	; 0x5c
 8001076:	f7ff ffcf 	bl	8001018 <memset>
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <std+0x38>)
 800107c:	6224      	str	r4, [r4, #32]
 800107e:	6263      	str	r3, [r4, #36]	; 0x24
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <std+0x3c>)
 8001082:	62a3      	str	r3, [r4, #40]	; 0x28
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <std+0x40>)
 8001086:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <std+0x44>)
 800108a:	6323      	str	r3, [r4, #48]	; 0x30
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop
 8001090:	0800184d 	.word	0x0800184d
 8001094:	0800186f 	.word	0x0800186f
 8001098:	080018a7 	.word	0x080018a7
 800109c:	080018cb 	.word	0x080018cb

080010a0 <_cleanup_r>:
 80010a0:	4901      	ldr	r1, [pc, #4]	; (80010a8 <_cleanup_r+0x8>)
 80010a2:	f000 b885 	b.w	80011b0 <_fwalk_reent>
 80010a6:	bf00      	nop
 80010a8:	08001ba5 	.word	0x08001ba5

080010ac <__sfmoreglue>:
 80010ac:	b570      	push	{r4, r5, r6, lr}
 80010ae:	2568      	movs	r5, #104	; 0x68
 80010b0:	1e4a      	subs	r2, r1, #1
 80010b2:	4355      	muls	r5, r2
 80010b4:	460e      	mov	r6, r1
 80010b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010ba:	f000 f897 	bl	80011ec <_malloc_r>
 80010be:	4604      	mov	r4, r0
 80010c0:	b140      	cbz	r0, 80010d4 <__sfmoreglue+0x28>
 80010c2:	2100      	movs	r1, #0
 80010c4:	e9c0 1600 	strd	r1, r6, [r0]
 80010c8:	300c      	adds	r0, #12
 80010ca:	60a0      	str	r0, [r4, #8]
 80010cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010d0:	f7ff ffa2 	bl	8001018 <memset>
 80010d4:	4620      	mov	r0, r4
 80010d6:	bd70      	pop	{r4, r5, r6, pc}

080010d8 <__sinit>:
 80010d8:	6983      	ldr	r3, [r0, #24]
 80010da:	b510      	push	{r4, lr}
 80010dc:	4604      	mov	r4, r0
 80010de:	bb33      	cbnz	r3, 800112e <__sinit+0x56>
 80010e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80010e4:	6503      	str	r3, [r0, #80]	; 0x50
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <__sinit+0x58>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <__sinit+0x5c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6282      	str	r2, [r0, #40]	; 0x28
 80010ee:	4298      	cmp	r0, r3
 80010f0:	bf04      	itt	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	6183      	streq	r3, [r0, #24]
 80010f6:	f000 f81f 	bl	8001138 <__sfp>
 80010fa:	6060      	str	r0, [r4, #4]
 80010fc:	4620      	mov	r0, r4
 80010fe:	f000 f81b 	bl	8001138 <__sfp>
 8001102:	60a0      	str	r0, [r4, #8]
 8001104:	4620      	mov	r0, r4
 8001106:	f000 f817 	bl	8001138 <__sfp>
 800110a:	2200      	movs	r2, #0
 800110c:	60e0      	str	r0, [r4, #12]
 800110e:	2104      	movs	r1, #4
 8001110:	6860      	ldr	r0, [r4, #4]
 8001112:	f7ff ffa1 	bl	8001058 <std>
 8001116:	2201      	movs	r2, #1
 8001118:	2109      	movs	r1, #9
 800111a:	68a0      	ldr	r0, [r4, #8]
 800111c:	f7ff ff9c 	bl	8001058 <std>
 8001120:	2202      	movs	r2, #2
 8001122:	2112      	movs	r1, #18
 8001124:	68e0      	ldr	r0, [r4, #12]
 8001126:	f7ff ff97 	bl	8001058 <std>
 800112a:	2301      	movs	r3, #1
 800112c:	61a3      	str	r3, [r4, #24]
 800112e:	bd10      	pop	{r4, pc}
 8001130:	08002124 	.word	0x08002124
 8001134:	080010a1 	.word	0x080010a1

08001138 <__sfp>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <__sfp+0x70>)
 800113c:	4607      	mov	r7, r0
 800113e:	681e      	ldr	r6, [r3, #0]
 8001140:	69b3      	ldr	r3, [r6, #24]
 8001142:	b913      	cbnz	r3, 800114a <__sfp+0x12>
 8001144:	4630      	mov	r0, r6
 8001146:	f7ff ffc7 	bl	80010d8 <__sinit>
 800114a:	3648      	adds	r6, #72	; 0x48
 800114c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	d503      	bpl.n	800115c <__sfp+0x24>
 8001154:	6833      	ldr	r3, [r6, #0]
 8001156:	b133      	cbz	r3, 8001166 <__sfp+0x2e>
 8001158:	6836      	ldr	r6, [r6, #0]
 800115a:	e7f7      	b.n	800114c <__sfp+0x14>
 800115c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001160:	b16d      	cbz	r5, 800117e <__sfp+0x46>
 8001162:	3468      	adds	r4, #104	; 0x68
 8001164:	e7f4      	b.n	8001150 <__sfp+0x18>
 8001166:	2104      	movs	r1, #4
 8001168:	4638      	mov	r0, r7
 800116a:	f7ff ff9f 	bl	80010ac <__sfmoreglue>
 800116e:	6030      	str	r0, [r6, #0]
 8001170:	2800      	cmp	r0, #0
 8001172:	d1f1      	bne.n	8001158 <__sfp+0x20>
 8001174:	230c      	movs	r3, #12
 8001176:	4604      	mov	r4, r0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4620      	mov	r0, r4
 800117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <__sfp+0x74>)
 8001180:	6665      	str	r5, [r4, #100]	; 0x64
 8001182:	e9c4 5500 	strd	r5, r5, [r4]
 8001186:	60a5      	str	r5, [r4, #8]
 8001188:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800118c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001190:	2208      	movs	r2, #8
 8001192:	4629      	mov	r1, r5
 8001194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001198:	f7ff ff3e 	bl	8001018 <memset>
 800119c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011a4:	e7e9      	b.n	800117a <__sfp+0x42>
 80011a6:	bf00      	nop
 80011a8:	08002124 	.word	0x08002124
 80011ac:	ffff0001 	.word	0xffff0001

080011b0 <_fwalk_reent>:
 80011b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011b4:	4680      	mov	r8, r0
 80011b6:	4689      	mov	r9, r1
 80011b8:	2600      	movs	r6, #0
 80011ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011be:	b914      	cbnz	r4, 80011c6 <_fwalk_reent+0x16>
 80011c0:	4630      	mov	r0, r6
 80011c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80011ca:	3f01      	subs	r7, #1
 80011cc:	d501      	bpl.n	80011d2 <_fwalk_reent+0x22>
 80011ce:	6824      	ldr	r4, [r4, #0]
 80011d0:	e7f5      	b.n	80011be <_fwalk_reent+0xe>
 80011d2:	89ab      	ldrh	r3, [r5, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d907      	bls.n	80011e8 <_fwalk_reent+0x38>
 80011d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011dc:	3301      	adds	r3, #1
 80011de:	d003      	beq.n	80011e8 <_fwalk_reent+0x38>
 80011e0:	4629      	mov	r1, r5
 80011e2:	4640      	mov	r0, r8
 80011e4:	47c8      	blx	r9
 80011e6:	4306      	orrs	r6, r0
 80011e8:	3568      	adds	r5, #104	; 0x68
 80011ea:	e7ee      	b.n	80011ca <_fwalk_reent+0x1a>

080011ec <_malloc_r>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	1ccd      	adds	r5, r1, #3
 80011f0:	f025 0503 	bic.w	r5, r5, #3
 80011f4:	3508      	adds	r5, #8
 80011f6:	2d0c      	cmp	r5, #12
 80011f8:	bf38      	it	cc
 80011fa:	250c      	movcc	r5, #12
 80011fc:	2d00      	cmp	r5, #0
 80011fe:	4606      	mov	r6, r0
 8001200:	db01      	blt.n	8001206 <_malloc_r+0x1a>
 8001202:	42a9      	cmp	r1, r5
 8001204:	d903      	bls.n	800120e <_malloc_r+0x22>
 8001206:	230c      	movs	r3, #12
 8001208:	6033      	str	r3, [r6, #0]
 800120a:	2000      	movs	r0, #0
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	f000 fd77 	bl	8001d00 <__malloc_lock>
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <_malloc_r+0xac>)
 8001214:	6814      	ldr	r4, [r2, #0]
 8001216:	4621      	mov	r1, r4
 8001218:	b991      	cbnz	r1, 8001240 <_malloc_r+0x54>
 800121a:	4c20      	ldr	r4, [pc, #128]	; (800129c <_malloc_r+0xb0>)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	b91b      	cbnz	r3, 8001228 <_malloc_r+0x3c>
 8001220:	4630      	mov	r0, r6
 8001222:	f000 fb03 	bl	800182c <_sbrk_r>
 8001226:	6020      	str	r0, [r4, #0]
 8001228:	4629      	mov	r1, r5
 800122a:	4630      	mov	r0, r6
 800122c:	f000 fafe 	bl	800182c <_sbrk_r>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d124      	bne.n	800127e <_malloc_r+0x92>
 8001234:	230c      	movs	r3, #12
 8001236:	4630      	mov	r0, r6
 8001238:	6033      	str	r3, [r6, #0]
 800123a:	f000 fd62 	bl	8001d02 <__malloc_unlock>
 800123e:	e7e4      	b.n	800120a <_malloc_r+0x1e>
 8001240:	680b      	ldr	r3, [r1, #0]
 8001242:	1b5b      	subs	r3, r3, r5
 8001244:	d418      	bmi.n	8001278 <_malloc_r+0x8c>
 8001246:	2b0b      	cmp	r3, #11
 8001248:	d90f      	bls.n	800126a <_malloc_r+0x7e>
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	18cc      	adds	r4, r1, r3
 800124e:	50cd      	str	r5, [r1, r3]
 8001250:	4630      	mov	r0, r6
 8001252:	f000 fd56 	bl	8001d02 <__malloc_unlock>
 8001256:	f104 000b 	add.w	r0, r4, #11
 800125a:	1d23      	adds	r3, r4, #4
 800125c:	f020 0007 	bic.w	r0, r0, #7
 8001260:	1ac3      	subs	r3, r0, r3
 8001262:	d0d3      	beq.n	800120c <_malloc_r+0x20>
 8001264:	425a      	negs	r2, r3
 8001266:	50e2      	str	r2, [r4, r3]
 8001268:	e7d0      	b.n	800120c <_malloc_r+0x20>
 800126a:	684b      	ldr	r3, [r1, #4]
 800126c:	428c      	cmp	r4, r1
 800126e:	bf16      	itet	ne
 8001270:	6063      	strne	r3, [r4, #4]
 8001272:	6013      	streq	r3, [r2, #0]
 8001274:	460c      	movne	r4, r1
 8001276:	e7eb      	b.n	8001250 <_malloc_r+0x64>
 8001278:	460c      	mov	r4, r1
 800127a:	6849      	ldr	r1, [r1, #4]
 800127c:	e7cc      	b.n	8001218 <_malloc_r+0x2c>
 800127e:	1cc4      	adds	r4, r0, #3
 8001280:	f024 0403 	bic.w	r4, r4, #3
 8001284:	42a0      	cmp	r0, r4
 8001286:	d005      	beq.n	8001294 <_malloc_r+0xa8>
 8001288:	1a21      	subs	r1, r4, r0
 800128a:	4630      	mov	r0, r6
 800128c:	f000 face 	bl	800182c <_sbrk_r>
 8001290:	3001      	adds	r0, #1
 8001292:	d0cf      	beq.n	8001234 <_malloc_r+0x48>
 8001294:	6025      	str	r5, [r4, #0]
 8001296:	e7db      	b.n	8001250 <_malloc_r+0x64>
 8001298:	2000008c 	.word	0x2000008c
 800129c:	20000090 	.word	0x20000090

080012a0 <__sfputc_r>:
 80012a0:	6893      	ldr	r3, [r2, #8]
 80012a2:	b410      	push	{r4}
 80012a4:	3b01      	subs	r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	6093      	str	r3, [r2, #8]
 80012aa:	da07      	bge.n	80012bc <__sfputc_r+0x1c>
 80012ac:	6994      	ldr	r4, [r2, #24]
 80012ae:	42a3      	cmp	r3, r4
 80012b0:	db01      	blt.n	80012b6 <__sfputc_r+0x16>
 80012b2:	290a      	cmp	r1, #10
 80012b4:	d102      	bne.n	80012bc <__sfputc_r+0x1c>
 80012b6:	bc10      	pop	{r4}
 80012b8:	f000 bb0c 	b.w	80018d4 <__swbuf_r>
 80012bc:	6813      	ldr	r3, [r2, #0]
 80012be:	1c58      	adds	r0, r3, #1
 80012c0:	6010      	str	r0, [r2, #0]
 80012c2:	7019      	strb	r1, [r3, #0]
 80012c4:	4608      	mov	r0, r1
 80012c6:	bc10      	pop	{r4}
 80012c8:	4770      	bx	lr

080012ca <__sfputs_r>:
 80012ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012cc:	4606      	mov	r6, r0
 80012ce:	460f      	mov	r7, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	18d5      	adds	r5, r2, r3
 80012d4:	42ac      	cmp	r4, r5
 80012d6:	d101      	bne.n	80012dc <__sfputs_r+0x12>
 80012d8:	2000      	movs	r0, #0
 80012da:	e007      	b.n	80012ec <__sfputs_r+0x22>
 80012dc:	463a      	mov	r2, r7
 80012de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff ffdc 	bl	80012a0 <__sfputc_r>
 80012e8:	1c43      	adds	r3, r0, #1
 80012ea:	d1f3      	bne.n	80012d4 <__sfputs_r+0xa>
 80012ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012f0 <_vfiprintf_r>:
 80012f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012f4:	460c      	mov	r4, r1
 80012f6:	b09d      	sub	sp, #116	; 0x74
 80012f8:	4617      	mov	r7, r2
 80012fa:	461d      	mov	r5, r3
 80012fc:	4606      	mov	r6, r0
 80012fe:	b118      	cbz	r0, 8001308 <_vfiprintf_r+0x18>
 8001300:	6983      	ldr	r3, [r0, #24]
 8001302:	b90b      	cbnz	r3, 8001308 <_vfiprintf_r+0x18>
 8001304:	f7ff fee8 	bl	80010d8 <__sinit>
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <_vfiprintf_r+0x20c>)
 800130a:	429c      	cmp	r4, r3
 800130c:	d158      	bne.n	80013c0 <_vfiprintf_r+0xd0>
 800130e:	6874      	ldr	r4, [r6, #4]
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	0718      	lsls	r0, r3, #28
 8001314:	d55e      	bpl.n	80013d4 <_vfiprintf_r+0xe4>
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <_vfiprintf_r+0xe4>
 800131c:	2300      	movs	r3, #0
 800131e:	9309      	str	r3, [sp, #36]	; 0x24
 8001320:	2320      	movs	r3, #32
 8001322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001326:	2330      	movs	r3, #48	; 0x30
 8001328:	f04f 0b01 	mov.w	fp, #1
 800132c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001330:	9503      	str	r5, [sp, #12]
 8001332:	46b8      	mov	r8, r7
 8001334:	4645      	mov	r5, r8
 8001336:	f815 3b01 	ldrb.w	r3, [r5], #1
 800133a:	b10b      	cbz	r3, 8001340 <_vfiprintf_r+0x50>
 800133c:	2b25      	cmp	r3, #37	; 0x25
 800133e:	d154      	bne.n	80013ea <_vfiprintf_r+0xfa>
 8001340:	ebb8 0a07 	subs.w	sl, r8, r7
 8001344:	d00b      	beq.n	800135e <_vfiprintf_r+0x6e>
 8001346:	4653      	mov	r3, sl
 8001348:	463a      	mov	r2, r7
 800134a:	4621      	mov	r1, r4
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff ffbc 	bl	80012ca <__sfputs_r>
 8001352:	3001      	adds	r0, #1
 8001354:	f000 80c2 	beq.w	80014dc <_vfiprintf_r+0x1ec>
 8001358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800135a:	4453      	add	r3, sl
 800135c:	9309      	str	r3, [sp, #36]	; 0x24
 800135e:	f898 3000 	ldrb.w	r3, [r8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 80ba 	beq.w	80014dc <_vfiprintf_r+0x1ec>
 8001368:	2300      	movs	r3, #0
 800136a:	f04f 32ff 	mov.w	r2, #4294967295
 800136e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001372:	9304      	str	r3, [sp, #16]
 8001374:	9307      	str	r3, [sp, #28]
 8001376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800137a:	931a      	str	r3, [sp, #104]	; 0x68
 800137c:	46a8      	mov	r8, r5
 800137e:	2205      	movs	r2, #5
 8001380:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001384:	485e      	ldr	r0, [pc, #376]	; (8001500 <_vfiprintf_r+0x210>)
 8001386:	f000 fcad 	bl	8001ce4 <memchr>
 800138a:	9b04      	ldr	r3, [sp, #16]
 800138c:	bb78      	cbnz	r0, 80013ee <_vfiprintf_r+0xfe>
 800138e:	06d9      	lsls	r1, r3, #27
 8001390:	bf44      	itt	mi
 8001392:	2220      	movmi	r2, #32
 8001394:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001398:	071a      	lsls	r2, r3, #28
 800139a:	bf44      	itt	mi
 800139c:	222b      	movmi	r2, #43	; 0x2b
 800139e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80013a2:	782a      	ldrb	r2, [r5, #0]
 80013a4:	2a2a      	cmp	r2, #42	; 0x2a
 80013a6:	d02a      	beq.n	80013fe <_vfiprintf_r+0x10e>
 80013a8:	46a8      	mov	r8, r5
 80013aa:	2000      	movs	r0, #0
 80013ac:	250a      	movs	r5, #10
 80013ae:	9a07      	ldr	r2, [sp, #28]
 80013b0:	4641      	mov	r1, r8
 80013b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013b6:	3b30      	subs	r3, #48	; 0x30
 80013b8:	2b09      	cmp	r3, #9
 80013ba:	d969      	bls.n	8001490 <_vfiprintf_r+0x1a0>
 80013bc:	b360      	cbz	r0, 8001418 <_vfiprintf_r+0x128>
 80013be:	e024      	b.n	800140a <_vfiprintf_r+0x11a>
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <_vfiprintf_r+0x214>)
 80013c2:	429c      	cmp	r4, r3
 80013c4:	d101      	bne.n	80013ca <_vfiprintf_r+0xda>
 80013c6:	68b4      	ldr	r4, [r6, #8]
 80013c8:	e7a2      	b.n	8001310 <_vfiprintf_r+0x20>
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <_vfiprintf_r+0x218>)
 80013cc:	429c      	cmp	r4, r3
 80013ce:	bf08      	it	eq
 80013d0:	68f4      	ldreq	r4, [r6, #12]
 80013d2:	e79d      	b.n	8001310 <_vfiprintf_r+0x20>
 80013d4:	4621      	mov	r1, r4
 80013d6:	4630      	mov	r0, r6
 80013d8:	f000 fae0 	bl	800199c <__swsetup_r>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d09d      	beq.n	800131c <_vfiprintf_r+0x2c>
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	b01d      	add	sp, #116	; 0x74
 80013e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ea:	46a8      	mov	r8, r5
 80013ec:	e7a2      	b.n	8001334 <_vfiprintf_r+0x44>
 80013ee:	4a44      	ldr	r2, [pc, #272]	; (8001500 <_vfiprintf_r+0x210>)
 80013f0:	4645      	mov	r5, r8
 80013f2:	1a80      	subs	r0, r0, r2
 80013f4:	fa0b f000 	lsl.w	r0, fp, r0
 80013f8:	4318      	orrs	r0, r3
 80013fa:	9004      	str	r0, [sp, #16]
 80013fc:	e7be      	b.n	800137c <_vfiprintf_r+0x8c>
 80013fe:	9a03      	ldr	r2, [sp, #12]
 8001400:	1d11      	adds	r1, r2, #4
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	9103      	str	r1, [sp, #12]
 8001406:	2a00      	cmp	r2, #0
 8001408:	db01      	blt.n	800140e <_vfiprintf_r+0x11e>
 800140a:	9207      	str	r2, [sp, #28]
 800140c:	e004      	b.n	8001418 <_vfiprintf_r+0x128>
 800140e:	4252      	negs	r2, r2
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	9207      	str	r2, [sp, #28]
 8001416:	9304      	str	r3, [sp, #16]
 8001418:	f898 3000 	ldrb.w	r3, [r8]
 800141c:	2b2e      	cmp	r3, #46	; 0x2e
 800141e:	d10e      	bne.n	800143e <_vfiprintf_r+0x14e>
 8001420:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001424:	2b2a      	cmp	r3, #42	; 0x2a
 8001426:	d138      	bne.n	800149a <_vfiprintf_r+0x1aa>
 8001428:	9b03      	ldr	r3, [sp, #12]
 800142a:	f108 0802 	add.w	r8, r8, #2
 800142e:	1d1a      	adds	r2, r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	9203      	str	r2, [sp, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bfb8      	it	lt
 8001438:	f04f 33ff 	movlt.w	r3, #4294967295
 800143c:	9305      	str	r3, [sp, #20]
 800143e:	4d33      	ldr	r5, [pc, #204]	; (800150c <_vfiprintf_r+0x21c>)
 8001440:	2203      	movs	r2, #3
 8001442:	f898 1000 	ldrb.w	r1, [r8]
 8001446:	4628      	mov	r0, r5
 8001448:	f000 fc4c 	bl	8001ce4 <memchr>
 800144c:	b140      	cbz	r0, 8001460 <_vfiprintf_r+0x170>
 800144e:	2340      	movs	r3, #64	; 0x40
 8001450:	1b40      	subs	r0, r0, r5
 8001452:	fa03 f000 	lsl.w	r0, r3, r0
 8001456:	9b04      	ldr	r3, [sp, #16]
 8001458:	f108 0801 	add.w	r8, r8, #1
 800145c:	4303      	orrs	r3, r0
 800145e:	9304      	str	r3, [sp, #16]
 8001460:	f898 1000 	ldrb.w	r1, [r8]
 8001464:	2206      	movs	r2, #6
 8001466:	482a      	ldr	r0, [pc, #168]	; (8001510 <_vfiprintf_r+0x220>)
 8001468:	f108 0701 	add.w	r7, r8, #1
 800146c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001470:	f000 fc38 	bl	8001ce4 <memchr>
 8001474:	2800      	cmp	r0, #0
 8001476:	d037      	beq.n	80014e8 <_vfiprintf_r+0x1f8>
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <_vfiprintf_r+0x224>)
 800147a:	bb1b      	cbnz	r3, 80014c4 <_vfiprintf_r+0x1d4>
 800147c:	9b03      	ldr	r3, [sp, #12]
 800147e:	3307      	adds	r3, #7
 8001480:	f023 0307 	bic.w	r3, r3, #7
 8001484:	3308      	adds	r3, #8
 8001486:	9303      	str	r3, [sp, #12]
 8001488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800148a:	444b      	add	r3, r9
 800148c:	9309      	str	r3, [sp, #36]	; 0x24
 800148e:	e750      	b.n	8001332 <_vfiprintf_r+0x42>
 8001490:	fb05 3202 	mla	r2, r5, r2, r3
 8001494:	2001      	movs	r0, #1
 8001496:	4688      	mov	r8, r1
 8001498:	e78a      	b.n	80013b0 <_vfiprintf_r+0xc0>
 800149a:	2300      	movs	r3, #0
 800149c:	250a      	movs	r5, #10
 800149e:	4619      	mov	r1, r3
 80014a0:	f108 0801 	add.w	r8, r8, #1
 80014a4:	9305      	str	r3, [sp, #20]
 80014a6:	4640      	mov	r0, r8
 80014a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ac:	3a30      	subs	r2, #48	; 0x30
 80014ae:	2a09      	cmp	r2, #9
 80014b0:	d903      	bls.n	80014ba <_vfiprintf_r+0x1ca>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0c3      	beq.n	800143e <_vfiprintf_r+0x14e>
 80014b6:	9105      	str	r1, [sp, #20]
 80014b8:	e7c1      	b.n	800143e <_vfiprintf_r+0x14e>
 80014ba:	fb05 2101 	mla	r1, r5, r1, r2
 80014be:	2301      	movs	r3, #1
 80014c0:	4680      	mov	r8, r0
 80014c2:	e7f0      	b.n	80014a6 <_vfiprintf_r+0x1b6>
 80014c4:	ab03      	add	r3, sp, #12
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4622      	mov	r2, r4
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_vfiprintf_r+0x228>)
 80014cc:	a904      	add	r1, sp, #16
 80014ce:	4630      	mov	r0, r6
 80014d0:	f3af 8000 	nop.w
 80014d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80014d8:	4681      	mov	r9, r0
 80014da:	d1d5      	bne.n	8001488 <_vfiprintf_r+0x198>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	065b      	lsls	r3, r3, #25
 80014e0:	f53f af7e 	bmi.w	80013e0 <_vfiprintf_r+0xf0>
 80014e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014e6:	e77d      	b.n	80013e4 <_vfiprintf_r+0xf4>
 80014e8:	ab03      	add	r3, sp, #12
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4622      	mov	r2, r4
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <_vfiprintf_r+0x228>)
 80014f0:	a904      	add	r1, sp, #16
 80014f2:	4630      	mov	r0, r6
 80014f4:	f000 f888 	bl	8001608 <_printf_i>
 80014f8:	e7ec      	b.n	80014d4 <_vfiprintf_r+0x1e4>
 80014fa:	bf00      	nop
 80014fc:	08002148 	.word	0x08002148
 8001500:	08002188 	.word	0x08002188
 8001504:	08002168 	.word	0x08002168
 8001508:	08002128 	.word	0x08002128
 800150c:	0800218e 	.word	0x0800218e
 8001510:	08002192 	.word	0x08002192
 8001514:	00000000 	.word	0x00000000
 8001518:	080012cb 	.word	0x080012cb

0800151c <_printf_common>:
 800151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001520:	4691      	mov	r9, r2
 8001522:	461f      	mov	r7, r3
 8001524:	688a      	ldr	r2, [r1, #8]
 8001526:	690b      	ldr	r3, [r1, #16]
 8001528:	4606      	mov	r6, r0
 800152a:	4293      	cmp	r3, r2
 800152c:	bfb8      	it	lt
 800152e:	4613      	movlt	r3, r2
 8001530:	f8c9 3000 	str.w	r3, [r9]
 8001534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001538:	460c      	mov	r4, r1
 800153a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800153e:	b112      	cbz	r2, 8001546 <_printf_common+0x2a>
 8001540:	3301      	adds	r3, #1
 8001542:	f8c9 3000 	str.w	r3, [r9]
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	0699      	lsls	r1, r3, #26
 800154a:	bf42      	ittt	mi
 800154c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001550:	3302      	addmi	r3, #2
 8001552:	f8c9 3000 	strmi.w	r3, [r9]
 8001556:	6825      	ldr	r5, [r4, #0]
 8001558:	f015 0506 	ands.w	r5, r5, #6
 800155c:	d107      	bne.n	800156e <_printf_common+0x52>
 800155e:	f104 0a19 	add.w	sl, r4, #25
 8001562:	68e3      	ldr	r3, [r4, #12]
 8001564:	f8d9 2000 	ldr.w	r2, [r9]
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	42ab      	cmp	r3, r5
 800156c:	dc29      	bgt.n	80015c2 <_printf_common+0xa6>
 800156e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	3300      	adds	r3, #0
 8001576:	bf18      	it	ne
 8001578:	2301      	movne	r3, #1
 800157a:	0692      	lsls	r2, r2, #26
 800157c:	d42e      	bmi.n	80015dc <_printf_common+0xc0>
 800157e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001582:	4639      	mov	r1, r7
 8001584:	4630      	mov	r0, r6
 8001586:	47c0      	blx	r8
 8001588:	3001      	adds	r0, #1
 800158a:	d021      	beq.n	80015d0 <_printf_common+0xb4>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	68e5      	ldr	r5, [r4, #12]
 8001590:	f003 0306 	and.w	r3, r3, #6
 8001594:	2b04      	cmp	r3, #4
 8001596:	bf18      	it	ne
 8001598:	2500      	movne	r5, #0
 800159a:	f8d9 2000 	ldr.w	r2, [r9]
 800159e:	f04f 0900 	mov.w	r9, #0
 80015a2:	bf08      	it	eq
 80015a4:	1aad      	subeq	r5, r5, r2
 80015a6:	68a3      	ldr	r3, [r4, #8]
 80015a8:	6922      	ldr	r2, [r4, #16]
 80015aa:	bf08      	it	eq
 80015ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bfc4      	itt	gt
 80015b4:	1a9b      	subgt	r3, r3, r2
 80015b6:	18ed      	addgt	r5, r5, r3
 80015b8:	341a      	adds	r4, #26
 80015ba:	454d      	cmp	r5, r9
 80015bc:	d11a      	bne.n	80015f4 <_printf_common+0xd8>
 80015be:	2000      	movs	r0, #0
 80015c0:	e008      	b.n	80015d4 <_printf_common+0xb8>
 80015c2:	2301      	movs	r3, #1
 80015c4:	4652      	mov	r2, sl
 80015c6:	4639      	mov	r1, r7
 80015c8:	4630      	mov	r0, r6
 80015ca:	47c0      	blx	r8
 80015cc:	3001      	adds	r0, #1
 80015ce:	d103      	bne.n	80015d8 <_printf_common+0xbc>
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015d8:	3501      	adds	r5, #1
 80015da:	e7c2      	b.n	8001562 <_printf_common+0x46>
 80015dc:	2030      	movs	r0, #48	; 0x30
 80015de:	18e1      	adds	r1, r4, r3
 80015e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80015ea:	4422      	add	r2, r4
 80015ec:	3302      	adds	r3, #2
 80015ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015f2:	e7c4      	b.n	800157e <_printf_common+0x62>
 80015f4:	2301      	movs	r3, #1
 80015f6:	4622      	mov	r2, r4
 80015f8:	4639      	mov	r1, r7
 80015fa:	4630      	mov	r0, r6
 80015fc:	47c0      	blx	r8
 80015fe:	3001      	adds	r0, #1
 8001600:	d0e6      	beq.n	80015d0 <_printf_common+0xb4>
 8001602:	f109 0901 	add.w	r9, r9, #1
 8001606:	e7d8      	b.n	80015ba <_printf_common+0x9e>

08001608 <_printf_i>:
 8001608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800160c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001610:	460c      	mov	r4, r1
 8001612:	7e09      	ldrb	r1, [r1, #24]
 8001614:	b085      	sub	sp, #20
 8001616:	296e      	cmp	r1, #110	; 0x6e
 8001618:	4617      	mov	r7, r2
 800161a:	4606      	mov	r6, r0
 800161c:	4698      	mov	r8, r3
 800161e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001620:	f000 80b3 	beq.w	800178a <_printf_i+0x182>
 8001624:	d822      	bhi.n	800166c <_printf_i+0x64>
 8001626:	2963      	cmp	r1, #99	; 0x63
 8001628:	d036      	beq.n	8001698 <_printf_i+0x90>
 800162a:	d80a      	bhi.n	8001642 <_printf_i+0x3a>
 800162c:	2900      	cmp	r1, #0
 800162e:	f000 80b9 	beq.w	80017a4 <_printf_i+0x19c>
 8001632:	2958      	cmp	r1, #88	; 0x58
 8001634:	f000 8083 	beq.w	800173e <_printf_i+0x136>
 8001638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800163c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001640:	e032      	b.n	80016a8 <_printf_i+0xa0>
 8001642:	2964      	cmp	r1, #100	; 0x64
 8001644:	d001      	beq.n	800164a <_printf_i+0x42>
 8001646:	2969      	cmp	r1, #105	; 0x69
 8001648:	d1f6      	bne.n	8001638 <_printf_i+0x30>
 800164a:	6820      	ldr	r0, [r4, #0]
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	0605      	lsls	r5, r0, #24
 8001650:	f103 0104 	add.w	r1, r3, #4
 8001654:	d52a      	bpl.n	80016ac <_printf_i+0xa4>
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6011      	str	r1, [r2, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da03      	bge.n	8001666 <_printf_i+0x5e>
 800165e:	222d      	movs	r2, #45	; 0x2d
 8001660:	425b      	negs	r3, r3
 8001662:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001666:	486f      	ldr	r0, [pc, #444]	; (8001824 <_printf_i+0x21c>)
 8001668:	220a      	movs	r2, #10
 800166a:	e039      	b.n	80016e0 <_printf_i+0xd8>
 800166c:	2973      	cmp	r1, #115	; 0x73
 800166e:	f000 809d 	beq.w	80017ac <_printf_i+0x1a4>
 8001672:	d808      	bhi.n	8001686 <_printf_i+0x7e>
 8001674:	296f      	cmp	r1, #111	; 0x6f
 8001676:	d020      	beq.n	80016ba <_printf_i+0xb2>
 8001678:	2970      	cmp	r1, #112	; 0x70
 800167a:	d1dd      	bne.n	8001638 <_printf_i+0x30>
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	6023      	str	r3, [r4, #0]
 8001684:	e003      	b.n	800168e <_printf_i+0x86>
 8001686:	2975      	cmp	r1, #117	; 0x75
 8001688:	d017      	beq.n	80016ba <_printf_i+0xb2>
 800168a:	2978      	cmp	r1, #120	; 0x78
 800168c:	d1d4      	bne.n	8001638 <_printf_i+0x30>
 800168e:	2378      	movs	r3, #120	; 0x78
 8001690:	4865      	ldr	r0, [pc, #404]	; (8001828 <_printf_i+0x220>)
 8001692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001696:	e055      	b.n	8001744 <_printf_i+0x13c>
 8001698:	6813      	ldr	r3, [r2, #0]
 800169a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800169e:	1d19      	adds	r1, r3, #4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6011      	str	r1, [r2, #0]
 80016a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016a8:	2301      	movs	r3, #1
 80016aa:	e08c      	b.n	80017c6 <_printf_i+0x1be>
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016b2:	6011      	str	r1, [r2, #0]
 80016b4:	bf18      	it	ne
 80016b6:	b21b      	sxthne	r3, r3
 80016b8:	e7cf      	b.n	800165a <_printf_i+0x52>
 80016ba:	6813      	ldr	r3, [r2, #0]
 80016bc:	6825      	ldr	r5, [r4, #0]
 80016be:	1d18      	adds	r0, r3, #4
 80016c0:	6010      	str	r0, [r2, #0]
 80016c2:	0628      	lsls	r0, r5, #24
 80016c4:	d501      	bpl.n	80016ca <_printf_i+0xc2>
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	e002      	b.n	80016d0 <_printf_i+0xc8>
 80016ca:	0668      	lsls	r0, r5, #25
 80016cc:	d5fb      	bpl.n	80016c6 <_printf_i+0xbe>
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	296f      	cmp	r1, #111	; 0x6f
 80016d2:	bf14      	ite	ne
 80016d4:	220a      	movne	r2, #10
 80016d6:	2208      	moveq	r2, #8
 80016d8:	4852      	ldr	r0, [pc, #328]	; (8001824 <_printf_i+0x21c>)
 80016da:	2100      	movs	r1, #0
 80016dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016e0:	6865      	ldr	r5, [r4, #4]
 80016e2:	2d00      	cmp	r5, #0
 80016e4:	60a5      	str	r5, [r4, #8]
 80016e6:	f2c0 8095 	blt.w	8001814 <_printf_i+0x20c>
 80016ea:	6821      	ldr	r1, [r4, #0]
 80016ec:	f021 0104 	bic.w	r1, r1, #4
 80016f0:	6021      	str	r1, [r4, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d13d      	bne.n	8001772 <_printf_i+0x16a>
 80016f6:	2d00      	cmp	r5, #0
 80016f8:	f040 808e 	bne.w	8001818 <_printf_i+0x210>
 80016fc:	4665      	mov	r5, ip
 80016fe:	2a08      	cmp	r2, #8
 8001700:	d10b      	bne.n	800171a <_printf_i+0x112>
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	07db      	lsls	r3, r3, #31
 8001706:	d508      	bpl.n	800171a <_printf_i+0x112>
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	6862      	ldr	r2, [r4, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	bfde      	ittt	le
 8001710:	2330      	movle	r3, #48	; 0x30
 8001712:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001716:	f105 35ff 	addle.w	r5, r5, #4294967295
 800171a:	ebac 0305 	sub.w	r3, ip, r5
 800171e:	6123      	str	r3, [r4, #16]
 8001720:	f8cd 8000 	str.w	r8, [sp]
 8001724:	463b      	mov	r3, r7
 8001726:	aa03      	add	r2, sp, #12
 8001728:	4621      	mov	r1, r4
 800172a:	4630      	mov	r0, r6
 800172c:	f7ff fef6 	bl	800151c <_printf_common>
 8001730:	3001      	adds	r0, #1
 8001732:	d14d      	bne.n	80017d0 <_printf_i+0x1c8>
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	b005      	add	sp, #20
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	4839      	ldr	r0, [pc, #228]	; (8001824 <_printf_i+0x21c>)
 8001740:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	6821      	ldr	r1, [r4, #0]
 8001748:	1d1d      	adds	r5, r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6015      	str	r5, [r2, #0]
 800174e:	060a      	lsls	r2, r1, #24
 8001750:	d50b      	bpl.n	800176a <_printf_i+0x162>
 8001752:	07ca      	lsls	r2, r1, #31
 8001754:	bf44      	itt	mi
 8001756:	f041 0120 	orrmi.w	r1, r1, #32
 800175a:	6021      	strmi	r1, [r4, #0]
 800175c:	b91b      	cbnz	r3, 8001766 <_printf_i+0x15e>
 800175e:	6822      	ldr	r2, [r4, #0]
 8001760:	f022 0220 	bic.w	r2, r2, #32
 8001764:	6022      	str	r2, [r4, #0]
 8001766:	2210      	movs	r2, #16
 8001768:	e7b7      	b.n	80016da <_printf_i+0xd2>
 800176a:	064d      	lsls	r5, r1, #25
 800176c:	bf48      	it	mi
 800176e:	b29b      	uxthmi	r3, r3
 8001770:	e7ef      	b.n	8001752 <_printf_i+0x14a>
 8001772:	4665      	mov	r5, ip
 8001774:	fbb3 f1f2 	udiv	r1, r3, r2
 8001778:	fb02 3311 	mls	r3, r2, r1, r3
 800177c:	5cc3      	ldrb	r3, [r0, r3]
 800177e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001782:	460b      	mov	r3, r1
 8001784:	2900      	cmp	r1, #0
 8001786:	d1f5      	bne.n	8001774 <_printf_i+0x16c>
 8001788:	e7b9      	b.n	80016fe <_printf_i+0xf6>
 800178a:	6813      	ldr	r3, [r2, #0]
 800178c:	6825      	ldr	r5, [r4, #0]
 800178e:	1d18      	adds	r0, r3, #4
 8001790:	6961      	ldr	r1, [r4, #20]
 8001792:	6010      	str	r0, [r2, #0]
 8001794:	0628      	lsls	r0, r5, #24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	d501      	bpl.n	800179e <_printf_i+0x196>
 800179a:	6019      	str	r1, [r3, #0]
 800179c:	e002      	b.n	80017a4 <_printf_i+0x19c>
 800179e:	066a      	lsls	r2, r5, #25
 80017a0:	d5fb      	bpl.n	800179a <_printf_i+0x192>
 80017a2:	8019      	strh	r1, [r3, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	4665      	mov	r5, ip
 80017a8:	6123      	str	r3, [r4, #16]
 80017aa:	e7b9      	b.n	8001720 <_printf_i+0x118>
 80017ac:	6813      	ldr	r3, [r2, #0]
 80017ae:	1d19      	adds	r1, r3, #4
 80017b0:	6011      	str	r1, [r2, #0]
 80017b2:	681d      	ldr	r5, [r3, #0]
 80017b4:	6862      	ldr	r2, [r4, #4]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4628      	mov	r0, r5
 80017ba:	f000 fa93 	bl	8001ce4 <memchr>
 80017be:	b108      	cbz	r0, 80017c4 <_printf_i+0x1bc>
 80017c0:	1b40      	subs	r0, r0, r5
 80017c2:	6060      	str	r0, [r4, #4]
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	6123      	str	r3, [r4, #16]
 80017c8:	2300      	movs	r3, #0
 80017ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017ce:	e7a7      	b.n	8001720 <_printf_i+0x118>
 80017d0:	6923      	ldr	r3, [r4, #16]
 80017d2:	462a      	mov	r2, r5
 80017d4:	4639      	mov	r1, r7
 80017d6:	4630      	mov	r0, r6
 80017d8:	47c0      	blx	r8
 80017da:	3001      	adds	r0, #1
 80017dc:	d0aa      	beq.n	8001734 <_printf_i+0x12c>
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	079b      	lsls	r3, r3, #30
 80017e2:	d413      	bmi.n	800180c <_printf_i+0x204>
 80017e4:	68e0      	ldr	r0, [r4, #12]
 80017e6:	9b03      	ldr	r3, [sp, #12]
 80017e8:	4298      	cmp	r0, r3
 80017ea:	bfb8      	it	lt
 80017ec:	4618      	movlt	r0, r3
 80017ee:	e7a3      	b.n	8001738 <_printf_i+0x130>
 80017f0:	2301      	movs	r3, #1
 80017f2:	464a      	mov	r2, r9
 80017f4:	4639      	mov	r1, r7
 80017f6:	4630      	mov	r0, r6
 80017f8:	47c0      	blx	r8
 80017fa:	3001      	adds	r0, #1
 80017fc:	d09a      	beq.n	8001734 <_printf_i+0x12c>
 80017fe:	3501      	adds	r5, #1
 8001800:	68e3      	ldr	r3, [r4, #12]
 8001802:	9a03      	ldr	r2, [sp, #12]
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	42ab      	cmp	r3, r5
 8001808:	dcf2      	bgt.n	80017f0 <_printf_i+0x1e8>
 800180a:	e7eb      	b.n	80017e4 <_printf_i+0x1dc>
 800180c:	2500      	movs	r5, #0
 800180e:	f104 0919 	add.w	r9, r4, #25
 8001812:	e7f5      	b.n	8001800 <_printf_i+0x1f8>
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ac      	bne.n	8001772 <_printf_i+0x16a>
 8001818:	7803      	ldrb	r3, [r0, #0]
 800181a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800181e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001822:	e76c      	b.n	80016fe <_printf_i+0xf6>
 8001824:	08002199 	.word	0x08002199
 8001828:	080021aa 	.word	0x080021aa

0800182c <_sbrk_r>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	2300      	movs	r3, #0
 8001830:	4c05      	ldr	r4, [pc, #20]	; (8001848 <_sbrk_r+0x1c>)
 8001832:	4605      	mov	r5, r0
 8001834:	4608      	mov	r0, r1
 8001836:	6023      	str	r3, [r4, #0]
 8001838:	f000 fbea 	bl	8002010 <_sbrk>
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	d102      	bne.n	8001846 <_sbrk_r+0x1a>
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	b103      	cbz	r3, 8001846 <_sbrk_r+0x1a>
 8001844:	602b      	str	r3, [r5, #0]
 8001846:	bd38      	pop	{r3, r4, r5, pc}
 8001848:	20000348 	.word	0x20000348

0800184c <__sread>:
 800184c:	b510      	push	{r4, lr}
 800184e:	460c      	mov	r4, r1
 8001850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001854:	f000 faa2 	bl	8001d9c <_read_r>
 8001858:	2800      	cmp	r0, #0
 800185a:	bfab      	itete	ge
 800185c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800185e:	89a3      	ldrhlt	r3, [r4, #12]
 8001860:	181b      	addge	r3, r3, r0
 8001862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001866:	bfac      	ite	ge
 8001868:	6563      	strge	r3, [r4, #84]	; 0x54
 800186a:	81a3      	strhlt	r3, [r4, #12]
 800186c:	bd10      	pop	{r4, pc}

0800186e <__swrite>:
 800186e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001872:	461f      	mov	r7, r3
 8001874:	898b      	ldrh	r3, [r1, #12]
 8001876:	4605      	mov	r5, r0
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	460c      	mov	r4, r1
 800187c:	4616      	mov	r6, r2
 800187e:	d505      	bpl.n	800188c <__swrite+0x1e>
 8001880:	2302      	movs	r3, #2
 8001882:	2200      	movs	r2, #0
 8001884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001888:	f000 f9b6 	bl	8001bf8 <_lseek_r>
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	4632      	mov	r2, r6
 8001890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001894:	81a3      	strh	r3, [r4, #12]
 8001896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800189a:	463b      	mov	r3, r7
 800189c:	4628      	mov	r0, r5
 800189e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018a2:	f000 b869 	b.w	8001978 <_write_r>

080018a6 <__sseek>:
 80018a6:	b510      	push	{r4, lr}
 80018a8:	460c      	mov	r4, r1
 80018aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ae:	f000 f9a3 	bl	8001bf8 <_lseek_r>
 80018b2:	1c43      	adds	r3, r0, #1
 80018b4:	89a3      	ldrh	r3, [r4, #12]
 80018b6:	bf15      	itete	ne
 80018b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80018ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018c2:	81a3      	strheq	r3, [r4, #12]
 80018c4:	bf18      	it	ne
 80018c6:	81a3      	strhne	r3, [r4, #12]
 80018c8:	bd10      	pop	{r4, pc}

080018ca <__sclose>:
 80018ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ce:	f000 b8d3 	b.w	8001a78 <_close_r>
	...

080018d4 <__swbuf_r>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	460e      	mov	r6, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	4605      	mov	r5, r0
 80018dc:	b118      	cbz	r0, 80018e6 <__swbuf_r+0x12>
 80018de:	6983      	ldr	r3, [r0, #24]
 80018e0:	b90b      	cbnz	r3, 80018e6 <__swbuf_r+0x12>
 80018e2:	f7ff fbf9 	bl	80010d8 <__sinit>
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <__swbuf_r+0x98>)
 80018e8:	429c      	cmp	r4, r3
 80018ea:	d12a      	bne.n	8001942 <__swbuf_r+0x6e>
 80018ec:	686c      	ldr	r4, [r5, #4]
 80018ee:	69a3      	ldr	r3, [r4, #24]
 80018f0:	60a3      	str	r3, [r4, #8]
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	071a      	lsls	r2, r3, #28
 80018f6:	d52e      	bpl.n	8001956 <__swbuf_r+0x82>
 80018f8:	6923      	ldr	r3, [r4, #16]
 80018fa:	b363      	cbz	r3, 8001956 <__swbuf_r+0x82>
 80018fc:	6923      	ldr	r3, [r4, #16]
 80018fe:	6820      	ldr	r0, [r4, #0]
 8001900:	b2f6      	uxtb	r6, r6
 8001902:	1ac0      	subs	r0, r0, r3
 8001904:	6963      	ldr	r3, [r4, #20]
 8001906:	4637      	mov	r7, r6
 8001908:	4283      	cmp	r3, r0
 800190a:	dc04      	bgt.n	8001916 <__swbuf_r+0x42>
 800190c:	4621      	mov	r1, r4
 800190e:	4628      	mov	r0, r5
 8001910:	f000 f948 	bl	8001ba4 <_fflush_r>
 8001914:	bb28      	cbnz	r0, 8001962 <__swbuf_r+0x8e>
 8001916:	68a3      	ldr	r3, [r4, #8]
 8001918:	3001      	adds	r0, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	60a3      	str	r3, [r4, #8]
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	6022      	str	r2, [r4, #0]
 8001924:	701e      	strb	r6, [r3, #0]
 8001926:	6963      	ldr	r3, [r4, #20]
 8001928:	4283      	cmp	r3, r0
 800192a:	d004      	beq.n	8001936 <__swbuf_r+0x62>
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	07db      	lsls	r3, r3, #31
 8001930:	d519      	bpl.n	8001966 <__swbuf_r+0x92>
 8001932:	2e0a      	cmp	r6, #10
 8001934:	d117      	bne.n	8001966 <__swbuf_r+0x92>
 8001936:	4621      	mov	r1, r4
 8001938:	4628      	mov	r0, r5
 800193a:	f000 f933 	bl	8001ba4 <_fflush_r>
 800193e:	b190      	cbz	r0, 8001966 <__swbuf_r+0x92>
 8001940:	e00f      	b.n	8001962 <__swbuf_r+0x8e>
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <__swbuf_r+0x9c>)
 8001944:	429c      	cmp	r4, r3
 8001946:	d101      	bne.n	800194c <__swbuf_r+0x78>
 8001948:	68ac      	ldr	r4, [r5, #8]
 800194a:	e7d0      	b.n	80018ee <__swbuf_r+0x1a>
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <__swbuf_r+0xa0>)
 800194e:	429c      	cmp	r4, r3
 8001950:	bf08      	it	eq
 8001952:	68ec      	ldreq	r4, [r5, #12]
 8001954:	e7cb      	b.n	80018ee <__swbuf_r+0x1a>
 8001956:	4621      	mov	r1, r4
 8001958:	4628      	mov	r0, r5
 800195a:	f000 f81f 	bl	800199c <__swsetup_r>
 800195e:	2800      	cmp	r0, #0
 8001960:	d0cc      	beq.n	80018fc <__swbuf_r+0x28>
 8001962:	f04f 37ff 	mov.w	r7, #4294967295
 8001966:	4638      	mov	r0, r7
 8001968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196a:	bf00      	nop
 800196c:	08002148 	.word	0x08002148
 8001970:	08002168 	.word	0x08002168
 8001974:	08002128 	.word	0x08002128

08001978 <_write_r>:
 8001978:	b538      	push	{r3, r4, r5, lr}
 800197a:	4605      	mov	r5, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	2200      	movs	r2, #0
 8001982:	4c05      	ldr	r4, [pc, #20]	; (8001998 <_write_r+0x20>)
 8001984:	6022      	str	r2, [r4, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f000 faed 	bl	8001f66 <_write>
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	d102      	bne.n	8001996 <_write_r+0x1e>
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	b103      	cbz	r3, 8001996 <_write_r+0x1e>
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	bd38      	pop	{r3, r4, r5, pc}
 8001998:	20000348 	.word	0x20000348

0800199c <__swsetup_r>:
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <__swsetup_r+0xcc>)
 800199e:	b570      	push	{r4, r5, r6, lr}
 80019a0:	681d      	ldr	r5, [r3, #0]
 80019a2:	4606      	mov	r6, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	b125      	cbz	r5, 80019b2 <__swsetup_r+0x16>
 80019a8:	69ab      	ldr	r3, [r5, #24]
 80019aa:	b913      	cbnz	r3, 80019b2 <__swsetup_r+0x16>
 80019ac:	4628      	mov	r0, r5
 80019ae:	f7ff fb93 	bl	80010d8 <__sinit>
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <__swsetup_r+0xd0>)
 80019b4:	429c      	cmp	r4, r3
 80019b6:	d10f      	bne.n	80019d8 <__swsetup_r+0x3c>
 80019b8:	686c      	ldr	r4, [r5, #4]
 80019ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	0715      	lsls	r5, r2, #28
 80019c2:	d42c      	bmi.n	8001a1e <__swsetup_r+0x82>
 80019c4:	06d0      	lsls	r0, r2, #27
 80019c6:	d411      	bmi.n	80019ec <__swsetup_r+0x50>
 80019c8:	2209      	movs	r2, #9
 80019ca:	6032      	str	r2, [r6, #0]
 80019cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d0:	81a3      	strh	r3, [r4, #12]
 80019d2:	f04f 30ff 	mov.w	r0, #4294967295
 80019d6:	e03e      	b.n	8001a56 <__swsetup_r+0xba>
 80019d8:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <__swsetup_r+0xd4>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d101      	bne.n	80019e2 <__swsetup_r+0x46>
 80019de:	68ac      	ldr	r4, [r5, #8]
 80019e0:	e7eb      	b.n	80019ba <__swsetup_r+0x1e>
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <__swsetup_r+0xd8>)
 80019e4:	429c      	cmp	r4, r3
 80019e6:	bf08      	it	eq
 80019e8:	68ec      	ldreq	r4, [r5, #12]
 80019ea:	e7e6      	b.n	80019ba <__swsetup_r+0x1e>
 80019ec:	0751      	lsls	r1, r2, #29
 80019ee:	d512      	bpl.n	8001a16 <__swsetup_r+0x7a>
 80019f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019f2:	b141      	cbz	r1, 8001a06 <__swsetup_r+0x6a>
 80019f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019f8:	4299      	cmp	r1, r3
 80019fa:	d002      	beq.n	8001a02 <__swsetup_r+0x66>
 80019fc:	4630      	mov	r0, r6
 80019fe:	f000 f981 	bl	8001d04 <_free_r>
 8001a02:	2300      	movs	r3, #0
 8001a04:	6363      	str	r3, [r4, #52]	; 0x34
 8001a06:	89a3      	ldrh	r3, [r4, #12]
 8001a08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001a0c:	81a3      	strh	r3, [r4, #12]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	6063      	str	r3, [r4, #4]
 8001a12:	6923      	ldr	r3, [r4, #16]
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	81a3      	strh	r3, [r4, #12]
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	b94b      	cbnz	r3, 8001a36 <__swsetup_r+0x9a>
 8001a22:	89a3      	ldrh	r3, [r4, #12]
 8001a24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2c:	d003      	beq.n	8001a36 <__swsetup_r+0x9a>
 8001a2e:	4621      	mov	r1, r4
 8001a30:	4630      	mov	r0, r6
 8001a32:	f000 f917 	bl	8001c64 <__smakebuf_r>
 8001a36:	89a2      	ldrh	r2, [r4, #12]
 8001a38:	f012 0301 	ands.w	r3, r2, #1
 8001a3c:	d00c      	beq.n	8001a58 <__swsetup_r+0xbc>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60a3      	str	r3, [r4, #8]
 8001a42:	6963      	ldr	r3, [r4, #20]
 8001a44:	425b      	negs	r3, r3
 8001a46:	61a3      	str	r3, [r4, #24]
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	b953      	cbnz	r3, 8001a62 <__swsetup_r+0xc6>
 8001a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001a54:	d1ba      	bne.n	80019cc <__swsetup_r+0x30>
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	0792      	lsls	r2, r2, #30
 8001a5a:	bf58      	it	pl
 8001a5c:	6963      	ldrpl	r3, [r4, #20]
 8001a5e:	60a3      	str	r3, [r4, #8]
 8001a60:	e7f2      	b.n	8001a48 <__swsetup_r+0xac>
 8001a62:	2000      	movs	r0, #0
 8001a64:	e7f7      	b.n	8001a56 <__swsetup_r+0xba>
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	08002148 	.word	0x08002148
 8001a70:	08002168 	.word	0x08002168
 8001a74:	08002128 	.word	0x08002128

08001a78 <_close_r>:
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	4c05      	ldr	r4, [pc, #20]	; (8001a94 <_close_r+0x1c>)
 8001a7e:	4605      	mov	r5, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	6023      	str	r3, [r4, #0]
 8001a84:	f000 fa9e 	bl	8001fc4 <_close>
 8001a88:	1c43      	adds	r3, r0, #1
 8001a8a:	d102      	bne.n	8001a92 <_close_r+0x1a>
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	b103      	cbz	r3, 8001a92 <_close_r+0x1a>
 8001a90:	602b      	str	r3, [r5, #0]
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
 8001a94:	20000348 	.word	0x20000348

08001a98 <__sflush_r>:
 8001a98:	898a      	ldrh	r2, [r1, #12]
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	0710      	lsls	r0, r2, #28
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	d458      	bmi.n	8001b58 <__sflush_r+0xc0>
 8001aa6:	684b      	ldr	r3, [r1, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	dc05      	bgt.n	8001ab8 <__sflush_r+0x20>
 8001aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dc02      	bgt.n	8001ab8 <__sflush_r+0x20>
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	d0f9      	beq.n	8001ab2 <__sflush_r+0x1a>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ac4:	682f      	ldr	r7, [r5, #0]
 8001ac6:	6a21      	ldr	r1, [r4, #32]
 8001ac8:	602b      	str	r3, [r5, #0]
 8001aca:	d032      	beq.n	8001b32 <__sflush_r+0x9a>
 8001acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ace:	89a3      	ldrh	r3, [r4, #12]
 8001ad0:	075a      	lsls	r2, r3, #29
 8001ad2:	d505      	bpl.n	8001ae0 <__sflush_r+0x48>
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	1ac0      	subs	r0, r0, r3
 8001ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ada:	b10b      	cbz	r3, 8001ae0 <__sflush_r+0x48>
 8001adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ade:	1ac0      	subs	r0, r0, r3
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ae6:	6a21      	ldr	r1, [r4, #32]
 8001ae8:	4628      	mov	r0, r5
 8001aea:	47b0      	blx	r6
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	89a3      	ldrh	r3, [r4, #12]
 8001af0:	d106      	bne.n	8001b00 <__sflush_r+0x68>
 8001af2:	6829      	ldr	r1, [r5, #0]
 8001af4:	291d      	cmp	r1, #29
 8001af6:	d848      	bhi.n	8001b8a <__sflush_r+0xf2>
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <__sflush_r+0x108>)
 8001afa:	40ca      	lsrs	r2, r1
 8001afc:	07d6      	lsls	r6, r2, #31
 8001afe:	d544      	bpl.n	8001b8a <__sflush_r+0xf2>
 8001b00:	2200      	movs	r2, #0
 8001b02:	6062      	str	r2, [r4, #4]
 8001b04:	6922      	ldr	r2, [r4, #16]
 8001b06:	04d9      	lsls	r1, r3, #19
 8001b08:	6022      	str	r2, [r4, #0]
 8001b0a:	d504      	bpl.n	8001b16 <__sflush_r+0x7e>
 8001b0c:	1c42      	adds	r2, r0, #1
 8001b0e:	d101      	bne.n	8001b14 <__sflush_r+0x7c>
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	b903      	cbnz	r3, 8001b16 <__sflush_r+0x7e>
 8001b14:	6560      	str	r0, [r4, #84]	; 0x54
 8001b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b18:	602f      	str	r7, [r5, #0]
 8001b1a:	2900      	cmp	r1, #0
 8001b1c:	d0c9      	beq.n	8001ab2 <__sflush_r+0x1a>
 8001b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b22:	4299      	cmp	r1, r3
 8001b24:	d002      	beq.n	8001b2c <__sflush_r+0x94>
 8001b26:	4628      	mov	r0, r5
 8001b28:	f000 f8ec 	bl	8001d04 <_free_r>
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8001b30:	e7c0      	b.n	8001ab4 <__sflush_r+0x1c>
 8001b32:	2301      	movs	r3, #1
 8001b34:	4628      	mov	r0, r5
 8001b36:	47b0      	blx	r6
 8001b38:	1c41      	adds	r1, r0, #1
 8001b3a:	d1c8      	bne.n	8001ace <__sflush_r+0x36>
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0c5      	beq.n	8001ace <__sflush_r+0x36>
 8001b42:	2b1d      	cmp	r3, #29
 8001b44:	d001      	beq.n	8001b4a <__sflush_r+0xb2>
 8001b46:	2b16      	cmp	r3, #22
 8001b48:	d101      	bne.n	8001b4e <__sflush_r+0xb6>
 8001b4a:	602f      	str	r7, [r5, #0]
 8001b4c:	e7b1      	b.n	8001ab2 <__sflush_r+0x1a>
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	e7ad      	b.n	8001ab4 <__sflush_r+0x1c>
 8001b58:	690f      	ldr	r7, [r1, #16]
 8001b5a:	2f00      	cmp	r7, #0
 8001b5c:	d0a9      	beq.n	8001ab2 <__sflush_r+0x1a>
 8001b5e:	0793      	lsls	r3, r2, #30
 8001b60:	bf18      	it	ne
 8001b62:	2300      	movne	r3, #0
 8001b64:	680e      	ldr	r6, [r1, #0]
 8001b66:	bf08      	it	eq
 8001b68:	694b      	ldreq	r3, [r1, #20]
 8001b6a:	eba6 0807 	sub.w	r8, r6, r7
 8001b6e:	600f      	str	r7, [r1, #0]
 8001b70:	608b      	str	r3, [r1, #8]
 8001b72:	f1b8 0f00 	cmp.w	r8, #0
 8001b76:	dd9c      	ble.n	8001ab2 <__sflush_r+0x1a>
 8001b78:	4643      	mov	r3, r8
 8001b7a:	463a      	mov	r2, r7
 8001b7c:	6a21      	ldr	r1, [r4, #32]
 8001b7e:	4628      	mov	r0, r5
 8001b80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b82:	47b0      	blx	r6
 8001b84:	2800      	cmp	r0, #0
 8001b86:	dc06      	bgt.n	8001b96 <__sflush_r+0xfe>
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8e:	81a3      	strh	r3, [r4, #12]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	e78e      	b.n	8001ab4 <__sflush_r+0x1c>
 8001b96:	4407      	add	r7, r0
 8001b98:	eba8 0800 	sub.w	r8, r8, r0
 8001b9c:	e7e9      	b.n	8001b72 <__sflush_r+0xda>
 8001b9e:	bf00      	nop
 8001ba0:	20400001 	.word	0x20400001

08001ba4 <_fflush_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	690b      	ldr	r3, [r1, #16]
 8001ba8:	4605      	mov	r5, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	b1db      	cbz	r3, 8001be6 <_fflush_r+0x42>
 8001bae:	b118      	cbz	r0, 8001bb8 <_fflush_r+0x14>
 8001bb0:	6983      	ldr	r3, [r0, #24]
 8001bb2:	b90b      	cbnz	r3, 8001bb8 <_fflush_r+0x14>
 8001bb4:	f7ff fa90 	bl	80010d8 <__sinit>
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <_fflush_r+0x48>)
 8001bba:	429c      	cmp	r4, r3
 8001bbc:	d109      	bne.n	8001bd2 <_fflush_r+0x2e>
 8001bbe:	686c      	ldr	r4, [r5, #4]
 8001bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bc4:	b17b      	cbz	r3, 8001be6 <_fflush_r+0x42>
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	4628      	mov	r0, r5
 8001bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bce:	f7ff bf63 	b.w	8001a98 <__sflush_r>
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_fflush_r+0x4c>)
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	d101      	bne.n	8001bdc <_fflush_r+0x38>
 8001bd8:	68ac      	ldr	r4, [r5, #8]
 8001bda:	e7f1      	b.n	8001bc0 <_fflush_r+0x1c>
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <_fflush_r+0x50>)
 8001bde:	429c      	cmp	r4, r3
 8001be0:	bf08      	it	eq
 8001be2:	68ec      	ldreq	r4, [r5, #12]
 8001be4:	e7ec      	b.n	8001bc0 <_fflush_r+0x1c>
 8001be6:	2000      	movs	r0, #0
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
 8001bea:	bf00      	nop
 8001bec:	08002148 	.word	0x08002148
 8001bf0:	08002168 	.word	0x08002168
 8001bf4:	08002128 	.word	0x08002128

08001bf8 <_lseek_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4605      	mov	r5, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	4611      	mov	r1, r2
 8001c00:	2200      	movs	r2, #0
 8001c02:	4c05      	ldr	r4, [pc, #20]	; (8001c18 <_lseek_r+0x20>)
 8001c04:	6022      	str	r2, [r4, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f000 f99b 	bl	8001f42 <_lseek>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_lseek_r+0x1e>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_lseek_r+0x1e>
 8001c14:	602b      	str	r3, [r5, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	20000348 	.word	0x20000348

08001c1c <__swhatbuf_r>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460e      	mov	r6, r1
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	b096      	sub	sp, #88	; 0x58
 8001c26:	2900      	cmp	r1, #0
 8001c28:	4614      	mov	r4, r2
 8001c2a:	461d      	mov	r5, r3
 8001c2c:	da07      	bge.n	8001c3e <__swhatbuf_r+0x22>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	602b      	str	r3, [r5, #0]
 8001c32:	89b3      	ldrh	r3, [r6, #12]
 8001c34:	061a      	lsls	r2, r3, #24
 8001c36:	d410      	bmi.n	8001c5a <__swhatbuf_r+0x3e>
 8001c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3c:	e00e      	b.n	8001c5c <__swhatbuf_r+0x40>
 8001c3e:	466a      	mov	r2, sp
 8001c40:	f000 f8be 	bl	8001dc0 <_fstat_r>
 8001c44:	2800      	cmp	r0, #0
 8001c46:	dbf2      	blt.n	8001c2e <__swhatbuf_r+0x12>
 8001c48:	9a01      	ldr	r2, [sp, #4]
 8001c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c52:	425a      	negs	r2, r3
 8001c54:	415a      	adcs	r2, r3
 8001c56:	602a      	str	r2, [r5, #0]
 8001c58:	e7ee      	b.n	8001c38 <__swhatbuf_r+0x1c>
 8001c5a:	2340      	movs	r3, #64	; 0x40
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	6023      	str	r3, [r4, #0]
 8001c60:	b016      	add	sp, #88	; 0x58
 8001c62:	bd70      	pop	{r4, r5, r6, pc}

08001c64 <__smakebuf_r>:
 8001c64:	898b      	ldrh	r3, [r1, #12]
 8001c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c68:	079d      	lsls	r5, r3, #30
 8001c6a:	4606      	mov	r6, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	d507      	bpl.n	8001c80 <__smakebuf_r+0x1c>
 8001c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	6123      	str	r3, [r4, #16]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	6163      	str	r3, [r4, #20]
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd70      	pop	{r4, r5, r6, pc}
 8001c80:	ab01      	add	r3, sp, #4
 8001c82:	466a      	mov	r2, sp
 8001c84:	f7ff ffca 	bl	8001c1c <__swhatbuf_r>
 8001c88:	9900      	ldr	r1, [sp, #0]
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f7ff faad 	bl	80011ec <_malloc_r>
 8001c92:	b948      	cbnz	r0, 8001ca8 <__smakebuf_r+0x44>
 8001c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c98:	059a      	lsls	r2, r3, #22
 8001c9a:	d4ef      	bmi.n	8001c7c <__smakebuf_r+0x18>
 8001c9c:	f023 0303 	bic.w	r3, r3, #3
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	e7e3      	b.n	8001c70 <__smakebuf_r+0xc>
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <__smakebuf_r+0x7c>)
 8001caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	6020      	str	r0, [r4, #0]
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	9b00      	ldr	r3, [sp, #0]
 8001cb8:	6120      	str	r0, [r4, #16]
 8001cba:	6163      	str	r3, [r4, #20]
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	b15b      	cbz	r3, 8001cd8 <__smakebuf_r+0x74>
 8001cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	f000 f88d 	bl	8001de4 <_isatty_r>
 8001cca:	b128      	cbz	r0, 8001cd8 <__smakebuf_r+0x74>
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	f023 0303 	bic.w	r3, r3, #3
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	81a3      	strh	r3, [r4, #12]
 8001cd8:	89a3      	ldrh	r3, [r4, #12]
 8001cda:	431d      	orrs	r5, r3
 8001cdc:	81a5      	strh	r5, [r4, #12]
 8001cde:	e7cd      	b.n	8001c7c <__smakebuf_r+0x18>
 8001ce0:	080010a1 	.word	0x080010a1

08001ce4 <memchr>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	b2c9      	uxtb	r1, r1
 8001ce8:	4402      	add	r2, r0
 8001cea:	4290      	cmp	r0, r2
 8001cec:	4603      	mov	r3, r0
 8001cee:	d101      	bne.n	8001cf4 <memchr+0x10>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e003      	b.n	8001cfc <memchr+0x18>
 8001cf4:	781c      	ldrb	r4, [r3, #0]
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	428c      	cmp	r4, r1
 8001cfa:	d1f6      	bne.n	8001cea <memchr+0x6>
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd10      	pop	{r4, pc}

08001d00 <__malloc_lock>:
 8001d00:	4770      	bx	lr

08001d02 <__malloc_unlock>:
 8001d02:	4770      	bx	lr

08001d04 <_free_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	4605      	mov	r5, r0
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	d043      	beq.n	8001d94 <_free_r+0x90>
 8001d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d10:	1f0c      	subs	r4, r1, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bfb8      	it	lt
 8001d16:	18e4      	addlt	r4, r4, r3
 8001d18:	f7ff fff2 	bl	8001d00 <__malloc_lock>
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <_free_r+0x94>)
 8001d1e:	6813      	ldr	r3, [r2, #0]
 8001d20:	4610      	mov	r0, r2
 8001d22:	b933      	cbnz	r3, 8001d32 <_free_r+0x2e>
 8001d24:	6063      	str	r3, [r4, #4]
 8001d26:	6014      	str	r4, [r2, #0]
 8001d28:	4628      	mov	r0, r5
 8001d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d2e:	f7ff bfe8 	b.w	8001d02 <__malloc_unlock>
 8001d32:	42a3      	cmp	r3, r4
 8001d34:	d90b      	bls.n	8001d4e <_free_r+0x4a>
 8001d36:	6821      	ldr	r1, [r4, #0]
 8001d38:	1862      	adds	r2, r4, r1
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	bf01      	itttt	eq
 8001d3e:	681a      	ldreq	r2, [r3, #0]
 8001d40:	685b      	ldreq	r3, [r3, #4]
 8001d42:	1852      	addeq	r2, r2, r1
 8001d44:	6022      	streq	r2, [r4, #0]
 8001d46:	6063      	str	r3, [r4, #4]
 8001d48:	6004      	str	r4, [r0, #0]
 8001d4a:	e7ed      	b.n	8001d28 <_free_r+0x24>
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	b10a      	cbz	r2, 8001d56 <_free_r+0x52>
 8001d52:	42a2      	cmp	r2, r4
 8001d54:	d9fa      	bls.n	8001d4c <_free_r+0x48>
 8001d56:	6819      	ldr	r1, [r3, #0]
 8001d58:	1858      	adds	r0, r3, r1
 8001d5a:	42a0      	cmp	r0, r4
 8001d5c:	d10b      	bne.n	8001d76 <_free_r+0x72>
 8001d5e:	6820      	ldr	r0, [r4, #0]
 8001d60:	4401      	add	r1, r0
 8001d62:	1858      	adds	r0, r3, r1
 8001d64:	4282      	cmp	r2, r0
 8001d66:	6019      	str	r1, [r3, #0]
 8001d68:	d1de      	bne.n	8001d28 <_free_r+0x24>
 8001d6a:	6810      	ldr	r0, [r2, #0]
 8001d6c:	6852      	ldr	r2, [r2, #4]
 8001d6e:	4401      	add	r1, r0
 8001d70:	6019      	str	r1, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	e7d8      	b.n	8001d28 <_free_r+0x24>
 8001d76:	d902      	bls.n	8001d7e <_free_r+0x7a>
 8001d78:	230c      	movs	r3, #12
 8001d7a:	602b      	str	r3, [r5, #0]
 8001d7c:	e7d4      	b.n	8001d28 <_free_r+0x24>
 8001d7e:	6820      	ldr	r0, [r4, #0]
 8001d80:	1821      	adds	r1, r4, r0
 8001d82:	428a      	cmp	r2, r1
 8001d84:	bf01      	itttt	eq
 8001d86:	6811      	ldreq	r1, [r2, #0]
 8001d88:	6852      	ldreq	r2, [r2, #4]
 8001d8a:	1809      	addeq	r1, r1, r0
 8001d8c:	6021      	streq	r1, [r4, #0]
 8001d8e:	6062      	str	r2, [r4, #4]
 8001d90:	605c      	str	r4, [r3, #4]
 8001d92:	e7c9      	b.n	8001d28 <_free_r+0x24>
 8001d94:	bd38      	pop	{r3, r4, r5, pc}
 8001d96:	bf00      	nop
 8001d98:	2000008c 	.word	0x2000008c

08001d9c <_read_r>:
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4605      	mov	r5, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	2200      	movs	r2, #0
 8001da6:	4c05      	ldr	r4, [pc, #20]	; (8001dbc <_read_r+0x20>)
 8001da8:	6022      	str	r2, [r4, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f000 f872 	bl	8001e94 <_read>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_read_r+0x1e>
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_read_r+0x1e>
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	20000348 	.word	0x20000348

08001dc0 <_fstat_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	4c06      	ldr	r4, [pc, #24]	; (8001de0 <_fstat_r+0x20>)
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	6023      	str	r3, [r4, #0]
 8001dce:	f000 f964 	bl	800209a <_fstat>
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	d102      	bne.n	8001ddc <_fstat_r+0x1c>
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	b103      	cbz	r3, 8001ddc <_fstat_r+0x1c>
 8001dda:	602b      	str	r3, [r5, #0]
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
 8001dde:	bf00      	nop
 8001de0:	20000348 	.word	0x20000348

08001de4 <_isatty_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	2300      	movs	r3, #0
 8001de8:	4c05      	ldr	r4, [pc, #20]	; (8001e00 <_isatty_r+0x1c>)
 8001dea:	4605      	mov	r5, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	f000 f961 	bl	80020b6 <_isatty>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_isatty_r+0x1a>
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_isatty_r+0x1a>
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	20000348 	.word	0x20000348

08001e04 <findslot>:
 8001e04:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <findslot+0x2c>)
 8001e06:	b510      	push	{r4, lr}
 8001e08:	4604      	mov	r4, r0
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	b118      	cbz	r0, 8001e16 <findslot+0x12>
 8001e0e:	6983      	ldr	r3, [r0, #24]
 8001e10:	b90b      	cbnz	r3, 8001e16 <findslot+0x12>
 8001e12:	f7ff f961 	bl	80010d8 <__sinit>
 8001e16:	2c13      	cmp	r4, #19
 8001e18:	d807      	bhi.n	8001e2a <findslot+0x26>
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <findslot+0x30>)
 8001e1c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001e20:	3301      	adds	r3, #1
 8001e22:	d002      	beq.n	8001e2a <findslot+0x26>
 8001e24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001e28:	bd10      	pop	{r4, pc}
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	e7fc      	b.n	8001e28 <findslot+0x24>
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000098 	.word	0x20000098

08001e38 <checkerror>:
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	1c43      	adds	r3, r0, #1
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	d109      	bne.n	8001e54 <checkerror+0x1c>
 8001e40:	f000 f956 	bl	80020f0 <__errno>
 8001e44:	2413      	movs	r4, #19
 8001e46:	4606      	mov	r6, r0
 8001e48:	2700      	movs	r7, #0
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4639      	mov	r1, r7
 8001e4e:	beab      	bkpt	0x00ab
 8001e50:	4604      	mov	r4, r0
 8001e52:	6034      	str	r4, [r6, #0]
 8001e54:	4628      	mov	r0, r5
 8001e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e58 <error>:
 8001e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	f000 f948 	bl	80020f0 <__errno>
 8001e60:	2413      	movs	r4, #19
 8001e62:	4606      	mov	r6, r0
 8001e64:	2700      	movs	r7, #0
 8001e66:	4620      	mov	r0, r4
 8001e68:	4639      	mov	r1, r7
 8001e6a:	beab      	bkpt	0x00ab
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	6034      	str	r4, [r6, #0]
 8001e70:	4628      	mov	r0, r5
 8001e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e74 <_swiread>:
 8001e74:	b530      	push	{r4, r5, lr}
 8001e76:	b085      	sub	sp, #20
 8001e78:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e7c:	9203      	str	r2, [sp, #12]
 8001e7e:	2406      	movs	r4, #6
 8001e80:	ad01      	add	r5, sp, #4
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	beab      	bkpt	0x00ab
 8001e88:	4604      	mov	r4, r0
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff ffd4 	bl	8001e38 <checkerror>
 8001e90:	b005      	add	sp, #20
 8001e92:	bd30      	pop	{r4, r5, pc}

08001e94 <_read>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460e      	mov	r6, r1
 8001e98:	4615      	mov	r5, r2
 8001e9a:	f7ff ffb3 	bl	8001e04 <findslot>
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	b930      	cbnz	r0, 8001eb0 <_read+0x1c>
 8001ea2:	f000 f925 	bl	80020f0 <__errno>
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	6003      	str	r3, [r0, #0]
 8001eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8001eae:	bd70      	pop	{r4, r5, r6, pc}
 8001eb0:	462a      	mov	r2, r5
 8001eb2:	4631      	mov	r1, r6
 8001eb4:	6800      	ldr	r0, [r0, #0]
 8001eb6:	f7ff ffdd 	bl	8001e74 <_swiread>
 8001eba:	1c43      	adds	r3, r0, #1
 8001ebc:	bf1f      	itttt	ne
 8001ebe:	6863      	ldrne	r3, [r4, #4]
 8001ec0:	1a28      	subne	r0, r5, r0
 8001ec2:	181b      	addne	r3, r3, r0
 8001ec4:	6063      	strne	r3, [r4, #4]
 8001ec6:	e7f2      	b.n	8001eae <_read+0x1a>

08001ec8 <_swilseek>:
 8001ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4616      	mov	r6, r2
 8001ece:	f7ff ff99 	bl	8001e04 <findslot>
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	b940      	cbnz	r0, 8001ee8 <_swilseek+0x20>
 8001ed6:	f000 f90b 	bl	80020f0 <__errno>
 8001eda:	2309      	movs	r3, #9
 8001edc:	6003      	str	r3, [r0, #0]
 8001ede:	f04f 34ff 	mov.w	r4, #4294967295
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	b003      	add	sp, #12
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee8:	2e02      	cmp	r6, #2
 8001eea:	d903      	bls.n	8001ef4 <_swilseek+0x2c>
 8001eec:	f000 f900 	bl	80020f0 <__errno>
 8001ef0:	2316      	movs	r3, #22
 8001ef2:	e7f3      	b.n	8001edc <_swilseek+0x14>
 8001ef4:	2e01      	cmp	r6, #1
 8001ef6:	d112      	bne.n	8001f1e <_swilseek+0x56>
 8001ef8:	6843      	ldr	r3, [r0, #4]
 8001efa:	18e4      	adds	r4, r4, r3
 8001efc:	d4f6      	bmi.n	8001eec <_swilseek+0x24>
 8001efe:	682b      	ldr	r3, [r5, #0]
 8001f00:	260a      	movs	r6, #10
 8001f02:	e9cd 3400 	strd	r3, r4, [sp]
 8001f06:	466f      	mov	r7, sp
 8001f08:	4630      	mov	r0, r6
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	beab      	bkpt	0x00ab
 8001f0e:	4606      	mov	r6, r0
 8001f10:	4630      	mov	r0, r6
 8001f12:	f7ff ff91 	bl	8001e38 <checkerror>
 8001f16:	2800      	cmp	r0, #0
 8001f18:	dbe1      	blt.n	8001ede <_swilseek+0x16>
 8001f1a:	606c      	str	r4, [r5, #4]
 8001f1c:	e7e1      	b.n	8001ee2 <_swilseek+0x1a>
 8001f1e:	2e02      	cmp	r6, #2
 8001f20:	d1ed      	bne.n	8001efe <_swilseek+0x36>
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001f2a:	260c      	movs	r6, #12
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	4639      	mov	r1, r7
 8001f30:	beab      	bkpt	0x00ab
 8001f32:	4606      	mov	r6, r0
 8001f34:	4630      	mov	r0, r6
 8001f36:	f7ff ff7f 	bl	8001e38 <checkerror>
 8001f3a:	1c43      	adds	r3, r0, #1
 8001f3c:	d0cf      	beq.n	8001ede <_swilseek+0x16>
 8001f3e:	4404      	add	r4, r0
 8001f40:	e7dd      	b.n	8001efe <_swilseek+0x36>

08001f42 <_lseek>:
 8001f42:	f7ff bfc1 	b.w	8001ec8 <_swilseek>

08001f46 <_swiwrite>:
 8001f46:	b530      	push	{r4, r5, lr}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f4e:	9203      	str	r2, [sp, #12]
 8001f50:	2405      	movs	r4, #5
 8001f52:	ad01      	add	r5, sp, #4
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	beab      	bkpt	0x00ab
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7ff ff6b 	bl	8001e38 <checkerror>
 8001f62:	b005      	add	sp, #20
 8001f64:	bd30      	pop	{r4, r5, pc}

08001f66 <_write>:
 8001f66:	b570      	push	{r4, r5, r6, lr}
 8001f68:	460e      	mov	r6, r1
 8001f6a:	4615      	mov	r5, r2
 8001f6c:	f7ff ff4a 	bl	8001e04 <findslot>
 8001f70:	4604      	mov	r4, r0
 8001f72:	b930      	cbnz	r0, 8001f82 <_write+0x1c>
 8001f74:	f000 f8bc 	bl	80020f0 <__errno>
 8001f78:	2309      	movs	r3, #9
 8001f7a:	6003      	str	r3, [r0, #0]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	bd70      	pop	{r4, r5, r6, pc}
 8001f82:	462a      	mov	r2, r5
 8001f84:	4631      	mov	r1, r6
 8001f86:	6800      	ldr	r0, [r0, #0]
 8001f88:	f7ff ffdd 	bl	8001f46 <_swiwrite>
 8001f8c:	1e02      	subs	r2, r0, #0
 8001f8e:	dbf5      	blt.n	8001f7c <_write+0x16>
 8001f90:	6863      	ldr	r3, [r4, #4]
 8001f92:	1aa8      	subs	r0, r5, r2
 8001f94:	4403      	add	r3, r0
 8001f96:	42aa      	cmp	r2, r5
 8001f98:	6063      	str	r3, [r4, #4]
 8001f9a:	d1f1      	bne.n	8001f80 <_write+0x1a>
 8001f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff bf59 	b.w	8001e58 <error>

08001fa6 <_swiclose>:
 8001fa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fa8:	ad02      	add	r5, sp, #8
 8001faa:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001fae:	2402      	movs	r4, #2
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	beab      	bkpt	0x00ab
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff ff3d 	bl	8001e38 <checkerror>
 8001fbe:	b003      	add	sp, #12
 8001fc0:	bd30      	pop	{r4, r5, pc}
	...

08001fc4 <_close>:
 8001fc4:	b538      	push	{r3, r4, r5, lr}
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	f7ff ff1c 	bl	8001e04 <findslot>
 8001fcc:	4604      	mov	r4, r0
 8001fce:	b930      	cbnz	r0, 8001fde <_close+0x1a>
 8001fd0:	f000 f88e 	bl	80020f0 <__errno>
 8001fd4:	2309      	movs	r3, #9
 8001fd6:	6003      	str	r3, [r0, #0]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	bd38      	pop	{r3, r4, r5, pc}
 8001fde:	3d01      	subs	r5, #1
 8001fe0:	2d01      	cmp	r5, #1
 8001fe2:	d809      	bhi.n	8001ff8 <_close+0x34>
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <_close+0x48>)
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d104      	bne.n	8001ff8 <_close+0x34>
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	6003      	str	r3, [r0, #0]
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	e7f1      	b.n	8001fdc <_close+0x18>
 8001ff8:	6820      	ldr	r0, [r4, #0]
 8001ffa:	f7ff ffd4 	bl	8001fa6 <_swiclose>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d1ec      	bne.n	8001fdc <_close+0x18>
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	e7e8      	b.n	8001fdc <_close+0x18>
 800200a:	bf00      	nop
 800200c:	20000098 	.word	0x20000098

08002010 <_sbrk>:
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <_sbrk+0x38>)
 8002012:	b510      	push	{r4, lr}
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	4602      	mov	r2, r0
 8002018:	b909      	cbnz	r1, 800201e <_sbrk+0xe>
 800201a:	490c      	ldr	r1, [pc, #48]	; (800204c <_sbrk+0x3c>)
 800201c:	6019      	str	r1, [r3, #0]
 800201e:	4669      	mov	r1, sp
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	4402      	add	r2, r0
 8002024:	428a      	cmp	r2, r1
 8002026:	d806      	bhi.n	8002036 <_sbrk+0x26>
 8002028:	4909      	ldr	r1, [pc, #36]	; (8002050 <_sbrk+0x40>)
 800202a:	4c0a      	ldr	r4, [pc, #40]	; (8002054 <_sbrk+0x44>)
 800202c:	6809      	ldr	r1, [r1, #0]
 800202e:	42a1      	cmp	r1, r4
 8002030:	d008      	beq.n	8002044 <_sbrk+0x34>
 8002032:	428a      	cmp	r2, r1
 8002034:	d906      	bls.n	8002044 <_sbrk+0x34>
 8002036:	f000 f85b 	bl	80020f0 <__errno>
 800203a:	230c      	movs	r3, #12
 800203c:	6003      	str	r3, [r0, #0]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	bd10      	pop	{r4, pc}
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e7fc      	b.n	8002042 <_sbrk+0x32>
 8002048:	20000094 	.word	0x20000094
 800204c:	20000350 	.word	0x20000350
 8002050:	20000064 	.word	0x20000064
 8002054:	cafedead 	.word	0xcafedead

08002058 <_swistat>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460c      	mov	r4, r1
 800205c:	f7ff fed2 	bl	8001e04 <findslot>
 8002060:	4606      	mov	r6, r0
 8002062:	b930      	cbnz	r0, 8002072 <_swistat+0x1a>
 8002064:	f000 f844 	bl	80020f0 <__errno>
 8002068:	2309      	movs	r3, #9
 800206a:	6003      	str	r3, [r0, #0]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	6863      	ldr	r3, [r4, #4]
 8002074:	250c      	movs	r5, #12
 8002076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800207a:	6063      	str	r3, [r4, #4]
 800207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002080:	6463      	str	r3, [r4, #68]	; 0x44
 8002082:	4628      	mov	r0, r5
 8002084:	4631      	mov	r1, r6
 8002086:	beab      	bkpt	0x00ab
 8002088:	4605      	mov	r5, r0
 800208a:	4628      	mov	r0, r5
 800208c:	f7ff fed4 	bl	8001e38 <checkerror>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	bf1c      	itt	ne
 8002094:	6120      	strne	r0, [r4, #16]
 8002096:	2000      	movne	r0, #0
 8002098:	e7ea      	b.n	8002070 <_swistat+0x18>

0800209a <_fstat>:
 800209a:	460b      	mov	r3, r1
 800209c:	b510      	push	{r4, lr}
 800209e:	2100      	movs	r1, #0
 80020a0:	4604      	mov	r4, r0
 80020a2:	2258      	movs	r2, #88	; 0x58
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ffb7 	bl	8001018 <memset>
 80020aa:	4601      	mov	r1, r0
 80020ac:	4620      	mov	r0, r4
 80020ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020b2:	f7ff bfd1 	b.w	8002058 <_swistat>

080020b6 <_isatty>:
 80020b6:	b570      	push	{r4, r5, r6, lr}
 80020b8:	f7ff fea4 	bl	8001e04 <findslot>
 80020bc:	2509      	movs	r5, #9
 80020be:	4604      	mov	r4, r0
 80020c0:	b920      	cbnz	r0, 80020cc <_isatty+0x16>
 80020c2:	f000 f815 	bl	80020f0 <__errno>
 80020c6:	6005      	str	r5, [r0, #0]
 80020c8:	4620      	mov	r0, r4
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	4628      	mov	r0, r5
 80020ce:	4621      	mov	r1, r4
 80020d0:	beab      	bkpt	0x00ab
 80020d2:	4604      	mov	r4, r0
 80020d4:	2c01      	cmp	r4, #1
 80020d6:	d0f7      	beq.n	80020c8 <_isatty+0x12>
 80020d8:	f000 f80a 	bl	80020f0 <__errno>
 80020dc:	2400      	movs	r4, #0
 80020de:	4606      	mov	r6, r0
 80020e0:	2513      	movs	r5, #19
 80020e2:	4628      	mov	r0, r5
 80020e4:	4621      	mov	r1, r4
 80020e6:	beab      	bkpt	0x00ab
 80020e8:	4605      	mov	r5, r0
 80020ea:	6035      	str	r5, [r6, #0]
 80020ec:	e7ec      	b.n	80020c8 <_isatty+0x12>
	...

080020f0 <__errno>:
 80020f0:	4b01      	ldr	r3, [pc, #4]	; (80020f8 <__errno+0x8>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000000 	.word	0x20000000

080020fc <_init>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr

08002108 <_fini>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

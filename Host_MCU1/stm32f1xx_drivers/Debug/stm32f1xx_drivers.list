
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a30  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001b60  08001b60  00011b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf8  08001bf8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf8  08001bf8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf8  08001bf8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08001c70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08001c70  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cef  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000051c  00000000  00000000  00021d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024a3  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000014e3  00000000  00000000  00024ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009f89  00000000  00000000  00025f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ff1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001064  00000000  00000000  0002ff9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b48 	.word	0x08001b48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08001b48 	.word	0x08001b48

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
// Arduino LED
#define LED_PIN				13

/*                                     FUNCTIONS                                          */

void delay (void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <delay+0x24>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	0003d08f 	.word	0x0003d08f

080001a8 <SPI_GPIOInits>:

void SPI_GPIOInits (void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOA;
 80001ae:	4b17      	ldr	r3, [pc, #92]	; (800020c <SPI_GPIOInits+0x64>)
 80001b0:	603b      	str	r3, [r7, #0]

	// NSS -- Not used in this case
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1; // Input
 80001b2:	2301      	movs	r3, #1
 80001b4:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Floating Input
 80001b6:	2302      	movs	r3, #2
 80001b8:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80001ba:	2304      	movs	r3, #4
 80001bc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001be:	463b      	mov	r3, r7
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fb2b 	bl	800081c <GPIO_Init>

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001c6:	2301      	movs	r3, #1
 80001c8:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001ca:	2302      	movs	r3, #2
 80001cc:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80001ce:	2305      	movs	r3, #5
 80001d0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001d2:	463b      	mov	r3, r7
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fb21 	bl	800081c <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 0; // Input
 80001da:	2300      	movs	r3, #0
 80001dc:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 1; // Floating input
 80001de:	2301      	movs	r3, #1
 80001e0:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001e2:	2306      	movs	r3, #6
 80001e4:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001e6:	463b      	mov	r3, r7
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fb17 	bl	800081c <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001f2:	2302      	movs	r3, #2
 80001f4:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001f6:	2307      	movs	r3, #7
 80001f8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001fa:	463b      	mov	r3, r7
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fb0d 	bl	800081c <GPIO_Init>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800

08000210 <SPI1_Inits>:

void SPI1_Inits(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI1;
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <SPI1_Inits+0x38>)
 8000218:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD ;
 800021a:	2301      	movs	r3, #1
 800021c:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800021e:	2301      	movs	r3, #1
 8000220:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPI_Config.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV_8;
 8000222:	2302      	movs	r3, #2
 8000224:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000226:	2300      	movs	r3, #0
 8000228:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800022a:	2300      	movs	r3, #0
 800022c:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800022e:	2300      	movs	r3, #0
 8000230:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 8000232:	2300      	movs	r3, #0
 8000234:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 8000236:	463b      	mov	r3, r7
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fc13 	bl	8000a64 <SPI_Init>
}
 800023e:	bf00      	nop
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40013000 	.word	0x40013000

0800024c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioBtn; // Variable for the GPIO Handle

	// GPIO Button Configuration
	gpioBtn.pGPIOx = GPIOA; // Initialize variable and select port
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <GPIO_ButtonInit+0x28>)
 8000254:	603b      	str	r3, [r7, #0]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000256:	2300      	movs	r3, #0
 8000258:	713b      	strb	r3, [r7, #4]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 800025a:	2300      	movs	r3, #0
 800025c:	717b      	strb	r3, [r7, #5]
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 800025e:	2302      	movs	r3, #2
 8000260:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&gpioBtn);
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fad9 	bl	800081c <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse (uint8_t ackbyte){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]

	if (ackbyte == 0xf5){
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2bf5      	cmp	r3, #245	; 0xf5
 8000286:	d101      	bne.n	800028c <SPI_VerifyResponse+0x14>
		// Acknowledged
		return 1;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <SPI_VerifyResponse+0x16>
	} else {
		// Not acknowledged
		return 0;
 800028c:	2300      	movs	r3, #0
	}
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <CMD_LED_CTRL>:

/*** Send command #1 CMD LED CTRL. You have to send pin number and value ***/
void CMD_LED_CTRL (uint8_t commandcode){
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1, &commandcode, 1);
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	2201      	movs	r2, #1
 80002a6:	4619      	mov	r1, r3
 80002a8:	4817      	ldr	r0, [pc, #92]	; (8000308 <CMD_LED_CTRL+0x70>)
 80002aa:	f000 fc49 	bl	8000b40 <SPI_SendData>

	// Read the dummy to clear off RXNE
	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 80002ae:	f107 030f 	add.w	r3, r7, #15
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	4814      	ldr	r0, [pc, #80]	; (8000308 <CMD_LED_CTRL+0x70>)
 80002b8:	f000 fc78 	bl	8000bac <SPI_ReceiveData>

	// Send some dummy byte to fetch the response from the slave (ACK or NACK)
	uint8_t dummywrite = 0xff;
 80002bc:	23ff      	movs	r3, #255	; 0xff
 80002be:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 80002c0:	f107 030e 	add.w	r3, r7, #14
 80002c4:	2201      	movs	r2, #1
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <CMD_LED_CTRL+0x70>)
 80002ca:	f000 fc39 	bl	8000b40 <SPI_SendData>

	// Read the response from the slave
	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 80002ce:	f107 030d 	add.w	r3, r7, #13
 80002d2:	2201      	movs	r2, #1
 80002d4:	4619      	mov	r1, r3
 80002d6:	480c      	ldr	r0, [pc, #48]	; (8000308 <CMD_LED_CTRL+0x70>)
 80002d8:	f000 fc68 	bl	8000bac <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[2]; // args[0] = Pin number, args[1] = Value

	if (SPI_VerifyResponse(ackbyte)){
 80002dc:	7b7b      	ldrb	r3, [r7, #13]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffca 	bl	8000278 <SPI_VerifyResponse>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d00a      	beq.n	8000300 <CMD_LED_CTRL+0x68>
		// Send arguments pin number and value
		args[0] = LED_PIN;
 80002ea:	230d      	movs	r3, #13
 80002ec:	723b      	strb	r3, [r7, #8]
		args[1] = LED_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	727b      	strb	r3, [r7, #9]
		SPI_SendData(SPI1, args, 2);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2202      	movs	r2, #2
 80002f8:	4619      	mov	r1, r3
 80002fa:	4803      	ldr	r0, [pc, #12]	; (8000308 <CMD_LED_CTRL+0x70>)
 80002fc:	f000 fc20 	bl	8000b40 <SPI_SendData>
	}
}
 8000300:	bf00      	nop
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40013000 	.word	0x40013000

0800030c <CMD_SENSOR>:

/*** Send command #2 CMD SENSOR READ. You have to send analog pin number ***/
void CMD_SENSOR(uint8_t commandcode){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1, &commandcode, 1);
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	4822      	ldr	r0, [pc, #136]	; (80003a8 <CMD_SENSOR+0x9c>)
 800031e:	f000 fc0f 	bl	8000b40 <SPI_SendData>

	// Read the dummy to clear off RXNE
	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 8000322:	f107 030f 	add.w	r3, r7, #15
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	481f      	ldr	r0, [pc, #124]	; (80003a8 <CMD_SENSOR+0x9c>)
 800032c:	f000 fc3e 	bl	8000bac <SPI_ReceiveData>

	// Send some dummy byte to fetch the response from the slave (ACK or NACK)
	uint8_t dummywrite = 0xff;
 8000330:	23ff      	movs	r3, #255	; 0xff
 8000332:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 8000334:	f107 030e 	add.w	r3, r7, #14
 8000338:	2201      	movs	r2, #1
 800033a:	4619      	mov	r1, r3
 800033c:	481a      	ldr	r0, [pc, #104]	; (80003a8 <CMD_SENSOR+0x9c>)
 800033e:	f000 fbff 	bl	8000b40 <SPI_SendData>

	// Read the response from the slave
	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 8000342:	f107 030d 	add.w	r3, r7, #13
 8000346:	2201      	movs	r2, #1
 8000348:	4619      	mov	r1, r3
 800034a:	4817      	ldr	r0, [pc, #92]	; (80003a8 <CMD_SENSOR+0x9c>)
 800034c:	f000 fc2e 	bl	8000bac <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[1]; // args[0] = Analog pin number

	if (SPI_VerifyResponse(ackbyte)){
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff90 	bl	8000278 <SPI_VerifyResponse>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d01f      	beq.n	800039e <CMD_SENSOR+0x92>
		// Send arguments pin number and value
		args[0] = ANALOG_PIN0;
 800035e:	2300      	movs	r3, #0
 8000360:	733b      	strb	r3, [r7, #12]
		SPI_SendData(SPI1, args, 1);
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2201      	movs	r2, #1
 8000368:	4619      	mov	r1, r3
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <CMD_SENSOR+0x9c>)
 800036c:	f000 fbe8 	bl	8000b40 <SPI_SendData>

		// Read RNXE again
		SPI_ReceiveData(SPI1, &dummyread, 1);
 8000370:	f107 030f 	add.w	r3, r7, #15
 8000374:	2201      	movs	r2, #1
 8000376:	4619      	mov	r1, r3
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <CMD_SENSOR+0x9c>)
 800037a:	f000 fc17 	bl	8000bac <SPI_ReceiveData>

		// Some delay so the sensor has time to read
		delay();
 800037e:	f7ff feff 	bl	8000180 <delay>

		// Send dummy byte to fetch the response
		SPI_SendData(SPI1, &dummywrite, 1);
 8000382:	f107 030e 	add.w	r3, r7, #14
 8000386:	2201      	movs	r2, #1
 8000388:	4619      	mov	r1, r3
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <CMD_SENSOR+0x9c>)
 800038c:	f000 fbd8 	bl	8000b40 <SPI_SendData>

		// Read the value of the sensor
		uint8_t analog_read;
		SPI_ReceiveData(SPI1, &analog_read, 1);
 8000390:	f107 030b 	add.w	r3, r7, #11
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	4803      	ldr	r0, [pc, #12]	; (80003a8 <CMD_SENSOR+0x9c>)
 800039a:	f000 fc07 	bl	8000bac <SPI_ReceiveData>
	}
}
 800039e:	bf00      	nop
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40013000 	.word	0x40013000

080003ac <CMD_LED_READ>:

void CMD_LED_READ(uint8_t commandcode){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	4822      	ldr	r0, [pc, #136]	; (8000448 <CMD_LED_READ+0x9c>)
 80003be:	f000 fbbf 	bl	8000b40 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 80003c2:	f107 030f 	add.w	r3, r7, #15
 80003c6:	2201      	movs	r2, #1
 80003c8:	4619      	mov	r1, r3
 80003ca:	481f      	ldr	r0, [pc, #124]	; (8000448 <CMD_LED_READ+0x9c>)
 80003cc:	f000 fbee 	bl	8000bac <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 80003d0:	23ff      	movs	r3, #255	; 0xff
 80003d2:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 80003d4:	f107 030e 	add.w	r3, r7, #14
 80003d8:	2201      	movs	r2, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	481a      	ldr	r0, [pc, #104]	; (8000448 <CMD_LED_READ+0x9c>)
 80003de:	f000 fbaf 	bl	8000b40 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 80003e2:	f107 030d 	add.w	r3, r7, #13
 80003e6:	2201      	movs	r2, #1
 80003e8:	4619      	mov	r1, r3
 80003ea:	4817      	ldr	r0, [pc, #92]	; (8000448 <CMD_LED_READ+0x9c>)
 80003ec:	f000 fbde 	bl	8000bac <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[1]; // args[0] = Digital pin number

	if (SPI_VerifyResponse(ackbyte)){
 80003f0:	7b7b      	ldrb	r3, [r7, #13]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f7ff ff40 	bl	8000278 <SPI_VerifyResponse>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d01f      	beq.n	800043e <CMD_LED_READ+0x92>
		// Send arguments pin number and value
		args[0] = LED_PIN;
 80003fe:	230d      	movs	r3, #13
 8000400:	733b      	strb	r3, [r7, #12]
		SPI_SendData(SPI1, args, 1);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	2201      	movs	r2, #1
 8000408:	4619      	mov	r1, r3
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <CMD_LED_READ+0x9c>)
 800040c:	f000 fb98 	bl	8000b40 <SPI_SendData>

		// Read RNXE again
		SPI_ReceiveData(SPI1, &dummyread, 1);
 8000410:	f107 030f 	add.w	r3, r7, #15
 8000414:	2201      	movs	r2, #1
 8000416:	4619      	mov	r1, r3
 8000418:	480b      	ldr	r0, [pc, #44]	; (8000448 <CMD_LED_READ+0x9c>)
 800041a:	f000 fbc7 	bl	8000bac <SPI_ReceiveData>

		// Some delay so the sensor has time to read
		delay();
 800041e:	f7ff feaf 	bl	8000180 <delay>

		// Send dummy byte to fetch the response
		SPI_SendData(SPI1, &dummywrite, 1);
 8000422:	f107 030e 	add.w	r3, r7, #14
 8000426:	2201      	movs	r2, #1
 8000428:	4619      	mov	r1, r3
 800042a:	4807      	ldr	r0, [pc, #28]	; (8000448 <CMD_LED_READ+0x9c>)
 800042c:	f000 fb88 	bl	8000b40 <SPI_SendData>

		// Read the value of the sensor
		uint8_t led_status;
		SPI_ReceiveData(SPI1, &led_status,1);
 8000430:	f107 030b 	add.w	r3, r7, #11
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	4803      	ldr	r0, [pc, #12]	; (8000448 <CMD_LED_READ+0x9c>)
 800043a:	f000 fbb7 	bl	8000bac <SPI_ReceiveData>
	}

}
 800043e:	bf00      	nop
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40013000 	.word	0x40013000

0800044c <CMD_PRINT>:

void CMD_PRINT (uint8_t commandcode){
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4830      	ldr	r0, [pc, #192]	; (8000520 <CMD_PRINT+0xd4>)
 800045e:	f000 fb6f 	bl	8000b40 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 8000462:	f107 031b 	add.w	r3, r7, #27
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	482d      	ldr	r0, [pc, #180]	; (8000520 <CMD_PRINT+0xd4>)
 800046c:	f000 fb9e 	bl	8000bac <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 8000470:	23ff      	movs	r3, #255	; 0xff
 8000472:	76bb      	strb	r3, [r7, #26]
	SPI_SendData(SPI1, &dummywrite, 1);
 8000474:	f107 031a 	add.w	r3, r7, #26
 8000478:	2201      	movs	r2, #1
 800047a:	4619      	mov	r1, r3
 800047c:	4828      	ldr	r0, [pc, #160]	; (8000520 <CMD_PRINT+0xd4>)
 800047e:	f000 fb5f 	bl	8000b40 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 8000482:	f107 0319 	add.w	r3, r7, #25
 8000486:	2201      	movs	r2, #1
 8000488:	4619      	mov	r1, r3
 800048a:	4825      	ldr	r0, [pc, #148]	; (8000520 <CMD_PRINT+0xd4>)
 800048c:	f000 fb8e 	bl	8000bac <SPI_ReceiveData>

	uint8_t message[] = "Hello Word";
 8000490:	4a24      	ldr	r2, [pc, #144]	; (8000524 <CMD_PRINT+0xd8>)
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	ca07      	ldmia	r2, {r0, r1, r2}
 8000498:	c303      	stmia	r3!, {r0, r1}
 800049a:	801a      	strh	r2, [r3, #0]
 800049c:	3302      	adds	r3, #2
 800049e:	0c12      	lsrs	r2, r2, #16
 80004a0:	701a      	strb	r2, [r3, #0]
	uint8_t args[1];

	if (SPI_VerifyResponse(ackbyte)){
 80004a2:	7e7b      	ldrb	r3, [r7, #25]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fee7 	bl	8000278 <SPI_VerifyResponse>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d032      	beq.n	8000516 <CMD_PRINT+0xca>
		args[0] = strlen((char*)message);
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe5b 	bl	8000170 <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	723b      	strb	r3, [r7, #8]

		SPI_SendData(SPI1,args,1);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	2201      	movs	r2, #1
 80004c6:	4619      	mov	r1, r3
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <CMD_PRINT+0xd4>)
 80004ca:	f000 fb39 	bl	8000b40 <SPI_SendData>

		SPI_ReceiveData(SPI1,&dummyread,1);
 80004ce:	f107 031b 	add.w	r3, r7, #27
 80004d2:	2201      	movs	r2, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <CMD_PRINT+0xd4>)
 80004d8:	f000 fb68 	bl	8000bac <SPI_ReceiveData>

		delay();
 80004dc:	f7ff fe50 	bl	8000180 <delay>

		for(int i = 0 ; i < args[0] ; i++){
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	e012      	b.n	800050c <CMD_PRINT+0xc0>
			SPI_SendData(SPI1,&message[i],1);
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	4413      	add	r3, r2
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <CMD_PRINT+0xd4>)
 80004f4:	f000 fb24 	bl	8000b40 <SPI_SendData>
			SPI_ReceiveData(SPI1,&dummyread,1);
 80004f8:	f107 031b 	add.w	r3, r7, #27
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	4807      	ldr	r0, [pc, #28]	; (8000520 <CMD_PRINT+0xd4>)
 8000502:	f000 fb53 	bl	8000bac <SPI_ReceiveData>
		for(int i = 0 ; i < args[0] ; i++){
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	3301      	adds	r3, #1
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	7a3b      	ldrb	r3, [r7, #8]
 800050e:	461a      	mov	r2, r3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	4293      	cmp	r3, r2
 8000514:	dbe7      	blt.n	80004e6 <CMD_PRINT+0x9a>
		}
	}
}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40013000 	.word	0x40013000
 8000524:	08001b60 	.word	0x08001b60

08000528 <CMD_ID>:

void CMD_ID (uint8_t commandcode){
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	481f      	ldr	r0, [pc, #124]	; (80005b8 <CMD_ID+0x90>)
 800053a:	f000 fb01 	bl	8000b40 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 800053e:	f107 031b 	add.w	r3, r7, #27
 8000542:	2201      	movs	r2, #1
 8000544:	4619      	mov	r1, r3
 8000546:	481c      	ldr	r0, [pc, #112]	; (80005b8 <CMD_ID+0x90>)
 8000548:	f000 fb30 	bl	8000bac <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 800054c:	23ff      	movs	r3, #255	; 0xff
 800054e:	76bb      	strb	r3, [r7, #26]
	SPI_SendData(SPI1, &dummywrite, 1);
 8000550:	f107 031a 	add.w	r3, r7, #26
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <CMD_ID+0x90>)
 800055a:	f000 faf1 	bl	8000b40 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 800055e:	f107 0319 	add.w	r3, r7, #25
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	4814      	ldr	r0, [pc, #80]	; (80005b8 <CMD_ID+0x90>)
 8000568:	f000 fb20 	bl	8000bac <SPI_ReceiveData>

	uint8_t id[11];

	if(SPI_VerifyResponse(ackbyte)){
 800056c:	7e7b      	ldrb	r3, [r7, #25]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe82 	bl	8000278 <SPI_VerifyResponse>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d01a      	beq.n	80005b0 <CMD_ID+0x88>
		for (uint32_t i = 0; i<10; i++){
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
 800057e:	e012      	b.n	80005a6 <CMD_ID+0x7e>
			SPI_SendData(SPI1, &dummywrite, 1);
 8000580:	f107 031a 	add.w	r3, r7, #26
 8000584:	2201      	movs	r2, #1
 8000586:	4619      	mov	r1, r3
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <CMD_ID+0x90>)
 800058a:	f000 fad9 	bl	8000b40 <SPI_SendData>
			SPI_ReceiveData(SPI1, &id[i], 1);
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	4413      	add	r3, r2
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <CMD_ID+0x90>)
 800059c:	f000 fb06 	bl	8000bac <SPI_ReceiveData>
		for (uint32_t i = 0; i<10; i++){
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	3301      	adds	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d9e9      	bls.n	8000580 <CMD_ID+0x58>
		}
		id[10] = '\0';
 80005ac:	2300      	movs	r3, #0
 80005ae:	75bb      	strb	r3, [r7, #22]
	}
}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40013000 	.word	0x40013000

080005bc <main>:

extern void initialise_monitor_handles(void);

int main (void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 80005c2:	f001 fa41 	bl	8001a48 <initialise_monitor_handles>

	printf("It works!\n");
 80005c6:	4826      	ldr	r0, [pc, #152]	; (8000660 <main+0xa4>)
 80005c8:	f000 fbe4 	bl	8000d94 <puts>

	GPIO_ButtonInit();
 80005cc:	f7ff fe3e 	bl	800024c <GPIO_ButtonInit>

	SPI_GPIOInits(); // Function to initialize the GPIO pins to behave as SPI1
 80005d0:	f7ff fdea 	bl	80001a8 <SPI_GPIOInits>

	SPI1_Inits(); // Function to initialize SPI1 parameters
 80005d4:	f7ff fe1c 	bl	8000210 <SPI1_Inits>

	SPI_SSOEConfig(SPI1, ENABLE);
 80005d8:	2101      	movs	r1, #1
 80005da:	4822      	ldr	r0, [pc, #136]	; (8000664 <main+0xa8>)
 80005dc:	f000 fb37 	bl	8000c4e <SPI_SSOEConfig>

	while (1) {

		uint8_t button_value = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	4821      	ldr	r0, [pc, #132]	; (8000668 <main+0xac>)
 80005e4:	f000 f9db 	bl	800099e <GPIO_ReadFromInputPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	71fb      	strb	r3, [r7, #7]

		// Button pressed for the 1st time
		while((button_value));
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d1fc      	bne.n	80005ec <main+0x30>
		delay();
 80005f2:	f7ff fdc5 	bl	8000180 <delay>

		SPI_PeripheralControl(SPI1, ENABLE); // Enable SPI
 80005f6:	2101      	movs	r1, #1
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <main+0xa8>)
 80005fa:	f000 fb0d 	bl	8000c18 <SPI_PeripheralControl>

		// CMD 1: Send command to turn ON/OFF the LED
		CMD_LED_CTRL(COMMAND_LED_CTRL);
 80005fe:	2050      	movs	r0, #80	; 0x50
 8000600:	f7ff fe4a 	bl	8000298 <CMD_LED_CTRL>

		// Button pressed for the 2nd time
		while((button_value));
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1fc      	bne.n	8000604 <main+0x48>
		delay();
 800060a:	f7ff fdb9 	bl	8000180 <delay>

		// CMD 2: Send command to read sensor
		CMD_SENSOR(COMMAND_SENSOR_READ);
 800060e:	2051      	movs	r0, #81	; 0x51
 8000610:	f7ff fe7c 	bl	800030c <CMD_SENSOR>

		// Button pressed for the 3rd time
		while((button_value));
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1fc      	bne.n	8000614 <main+0x58>
		delay();
 800061a:	f7ff fdb1 	bl	8000180 <delay>

		// CMD 3:
		CMD_LED_READ(COMMAND_LED_READ);
 800061e:	2052      	movs	r0, #82	; 0x52
 8000620:	f7ff fec4 	bl	80003ac <CMD_LED_READ>

		// Button pressed for the 4th time
		while((button_value));
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d1fc      	bne.n	8000624 <main+0x68>
		delay();
 800062a:	f7ff fda9 	bl	8000180 <delay>

		// CMD 4:
		CMD_PRINT(COMMAND_PRINT);
 800062e:	2053      	movs	r0, #83	; 0x53
 8000630:	f7ff ff0c 	bl	800044c <CMD_PRINT>

		// Button pressed for the 5th time
		while((button_value));
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1fc      	bne.n	8000634 <main+0x78>
		delay();
 800063a:	f7ff fda1 	bl	8000180 <delay>

		// CMD 5:
		CMD_ID(COMMAND_ID_READ);
 800063e:	2054      	movs	r0, #84	; 0x54
 8000640:	f7ff ff72 	bl	8000528 <CMD_ID>

		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 8000644:	bf00      	nop
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <main+0xa8>)
 800064a:	f000 fa66 	bl	8000b1a <SPI_GetFlagStatus>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f8      	bne.n	8000646 <main+0x8a>

		SPI_PeripheralControl(SPI1, DISABLE); // Disable SPI. To close the line communication
 8000654:	2100      	movs	r1, #0
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0xa8>)
 8000658:	f000 fade 	bl	8000c18 <SPI_PeripheralControl>
	while (1) {
 800065c:	e7c0      	b.n	80005e0 <main+0x24>
 800065e:	bf00      	nop
 8000660:	08001b6c 	.word	0x08001b6c
 8000664:	40013000 	.word	0x40013000
 8000668:	40010800 	.word	0x40010800

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000674:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000688:	4c0b      	ldr	r4, [pc, #44]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000696:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800069a:	f000 faf3 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff ff8d 	bl	80005bc <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006b0:	08001c00 	.word	0x08001c00
  ldr r2, =_sbss
 80006b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006b8:	20000148 	.word	0x20000148

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d148      	bne.n	8000764 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <GPIO_PeriClkCtrl+0x140>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80006da:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a49      	ldr	r2, [pc, #292]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 80006e6:	e085      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a47      	ldr	r2, [pc, #284]	; (8000808 <GPIO_PeriClkCtrl+0x148>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a43      	ldr	r2, [pc, #268]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
}
 80006fc:	e07a      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a42      	ldr	r2, [pc, #264]	; (800080c <GPIO_PeriClkCtrl+0x14c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a3e      	ldr	r2, [pc, #248]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	6193      	str	r3, [r2, #24]
}
 8000712:	e06f      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a3e      	ldr	r2, [pc, #248]	; (8000810 <GPIO_PeriClkCtrl+0x150>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 800071c:	4b39      	ldr	r3, [pc, #228]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a38      	ldr	r2, [pc, #224]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6193      	str	r3, [r2, #24]
}
 8000728:	e064      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a39      	ldr	r2, [pc, #228]	; (8000814 <GPIO_PeriClkCtrl+0x154>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	6193      	str	r3, [r2, #24]
}
 800073e:	e059      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a35      	ldr	r2, [pc, #212]	; (8000818 <GPIO_PeriClkCtrl+0x158>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000748:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	6193      	str	r3, [r2, #24]
}
 8000754:	e04e      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	6193      	str	r3, [r2, #24]
}
 8000762:	e047      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a26      	ldr	r2, [pc, #152]	; (8000800 <GPIO_PeriClkCtrl+0x140>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d106      	bne.n	800077a <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000772:	f023 0304 	bic.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
}
 8000778:	e03c      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <GPIO_PeriClkCtrl+0x148>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d106      	bne.n	8000790 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 8000788:	f023 0308 	bic.w	r3, r3, #8
 800078c:	6193      	str	r3, [r2, #24]
}
 800078e:	e031      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <GPIO_PeriClkCtrl+0x14c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d106      	bne.n	80007a6 <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 800079e:	f023 0310 	bic.w	r3, r3, #16
 80007a2:	6193      	str	r3, [r2, #24]
}
 80007a4:	e026      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a19      	ldr	r2, [pc, #100]	; (8000810 <GPIO_PeriClkCtrl+0x150>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d106      	bne.n	80007bc <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007b4:	f023 0320 	bic.w	r3, r3, #32
 80007b8:	6193      	str	r3, [r2, #24]
}
 80007ba:	e01b      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a15      	ldr	r2, [pc, #84]	; (8000814 <GPIO_PeriClkCtrl+0x154>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d106      	bne.n	80007d2 <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ce:	6193      	str	r3, [r2, #24]
}
 80007d0:	e010      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <GPIO_PeriClkCtrl+0x158>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d106      	bne.n	80007e8 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007e4:	6193      	str	r3, [r2, #24]
}
 80007e6:	e005      	b.n	80007f4 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <GPIO_PeriClkCtrl+0x144>)
 80007ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007f2:	6193      	str	r3, [r2, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40010800 	.word	0x40010800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010c00 	.word	0x40010c00
 800080c:	40011000 	.word	0x40011000
 8000810:	40011400 	.word	0x40011400
 8000814:	40011800 	.word	0x40011800
 8000818:	40011c00 	.word	0x40011c00

0800081c <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff48 	bl	80006c0 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	2b07      	cmp	r3, #7
 800083e:	d84b      	bhi.n	80008d8 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	799b      	ldrb	r3, [r3, #6]
 8000850:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3302      	adds	r3, #2
 8000860:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 8000862:	7d3b      	ldrb	r3, [r7, #20]
 8000864:	2203      	movs	r2, #3
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	2203      	movs	r2, #3
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 8000876:	7dba      	ldrb	r2, [r7, #22]
 8000878:	7d3b      	ldrb	r3, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	43da      	mvns	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	400a      	ands	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 80008a6:	7d7a      	ldrb	r2, [r7, #21]
 80008a8:	7cfb      	ldrb	r3, [r7, #19]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6819      	ldr	r1, [r3, #0]
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	43da      	mvns	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	400a      	ands	r2, r1
 80008c0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	6819      	ldr	r1, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80008d6:	e058      	b.n	800098a <GPIO_Init+0x16e>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	3b08      	subs	r3, #8
 80008de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	799b      	ldrb	r3, [r3, #6]
 80008ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 80008f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 80008fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	3302      	adds	r3, #2
 8000906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 800090a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 8000918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800091c:	2203      	movs	r2, #3
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43db      	mvns	r3, r3
 8000924:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 8000926:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800092a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6859      	ldr	r1, [r3, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	400a      	ands	r2, r1
 8000942:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6859      	ldr	r1, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000950:	430a      	orrs	r2, r1
 8000952:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000958:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800095c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6859      	ldr	r1, [r3, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	400a      	ands	r2, r1
 8000974:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6859      	ldr	r1, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000982:	430a      	orrs	r2, r1
 8000984:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2202      	movs	r2, #2
 800098e:	715a      	strb	r2, [r3, #5]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2203      	movs	r2, #3
 8000994:	715a      	strb	r2, [r3, #5]

	}
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <GPIO_ReadFromInputPin>:
 * @param [in]		Pin number
 * @return			Read value 0 or 1
 * @note 			None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800099e:	b480      	push	{r7}
 80009a0:	b085      	sub	sp, #20
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	fa22 f303 	lsr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	73fb      	strb	r3, [r7, #15]
	return value;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <SPI_PeriClkCtrl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d11c      	bne.n	8000a14 <SPI_PeriClkCtrl+0x4c>
		if (pSPIx == SPI1) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a1e      	ldr	r2, [pc, #120]	; (8000a58 <SPI_PeriClkCtrl+0x90>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 80009e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ec:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}  else {
			SPI3_PCLK_DI();
		}
	}
}
 80009ee:	e02d      	b.n	8000a4c <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <SPI_PeriClkCtrl+0x98>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	61d3      	str	r3, [r2, #28]
}
 8000a04:	e022      	b.n	8000a4c <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_EN();
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a10:	61d3      	str	r3, [r2, #28]
}
 8000a12:	e01b      	b.n	8000a4c <SPI_PeriClkCtrl+0x84>
		if (pSPIx == SPI1) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <SPI_PeriClkCtrl+0x90>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d106      	bne.n	8000a2a <SPI_PeriClkCtrl+0x62>
			SPI1_PCLK_DI();
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a26:	6193      	str	r3, [r2, #24]
}
 8000a28:	e010      	b.n	8000a4c <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <SPI_PeriClkCtrl+0x98>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <SPI_PeriClkCtrl+0x78>
			SPI2_PCLK_DI();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a3c:	61d3      	str	r3, [r2, #28]
}
 8000a3e:	e005      	b.n	8000a4c <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_DI();
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <SPI_PeriClkCtrl+0x94>)
 8000a46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a4a:	61d3      	str	r3, [r2, #28]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40003800 	.word	0x40003800

08000a64 <SPI_Init>:
 * @brief			This functions initializes a given SPI
 * @param [in]		Base Address of the SPI Handle
 * @return			None
 * @note 			None
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

	//Enable clock
	SPI_PeriClkCtrl(pSPIxHandle->pSPIx, ENABLE);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffa8 	bl	80009c8 <SPI_PeriClkCtrl>


	uint32_t temp = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]

	// Configuration of the device mode
	temp |= pSPIxHandle->SPI_Config.SPI_DeviceMode << 2;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	791b      	ldrb	r3, [r3, #4]
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]

	// Configuration of the Bus
	if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	795b      	ldrb	r3, [r3, #5]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d104      	bne.n	8000a9c <SPI_Init+0x38>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e014      	b.n	8000ac6 <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	795b      	ldrb	r3, [r3, #5]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d104      	bne.n	8000aae <SPI_Init+0x4a>
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e00b      	b.n	8000ac6 <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RSONLY){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	795b      	ldrb	r3, [r3, #5]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d107      	bne.n	8000ac6 <SPI_Init+0x62>
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000abc:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac4:	60fb      	str	r3, [r7, #12]
	}

	// Configuration of the clock speed
	temp |= (pSPIxHandle->SPI_Config.SPI_SCLKSpeed << SPI_CR1_BR);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	799b      	ldrb	r3, [r3, #6]
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

	// Configuration of the DFF
	temp |= (pSPIxHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	79db      	ldrb	r3, [r3, #7]
 8000ad8:	02db      	lsls	r3, r3, #11
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPOL
	temp |= (pSPIxHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7a1b      	ldrb	r3, [r3, #8]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPHA
	temp |= (pSPIxHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7a5b      	ldrb	r3, [r3, #9]
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

	// Configuration of the SSM
	temp |= (pSPIxHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7a9b      	ldrb	r3, [r3, #10]
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

	pSPIxHandle->pSPIx->CR1 = temp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <SPI_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b1a:	b480      	push	{r7}
 8000b1c:	b083      	sub	sp, #12
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){ // while(!(pSPIx->SR & (1 << 1)));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit TXE is one in that register
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000b34:	2300      	movs	r3, #0
 }
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <SPI_SendData>:
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note 			Blocked communication implemented. The function call will wait until all
 *  				the bytes are transmitted
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]

	while (len > 0){
 8000b4c:	e027      	b.n	8000b9e <SPI_SendData+0x5e>
		// Wait until TXE is set -> Tx Buffer is empty
		while((SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG)) == FLAG_RESET);
 8000b4e:	bf00      	nop
 8000b50:	2102      	movs	r1, #2
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff ffe1 	bl	8000b1a <SPI_GetFlagStatus>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f8      	beq.n	8000b50 <SPI_SendData+0x10>
		// When the expression is true and the flag is still in reset, it will wait in the while

		// Check DFF bit
		if(pSPIx->CR1 & (SPI_CR1_DFF)){
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 030b 	and.w	r3, r3, #11
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00e      	beq.n	8000b88 <SPI_SendData+0x48>
			// 16-Bit format
			// Load data into Tx Buffer
			pSPIx->DR = *((uint16_t*)pTxBuffer); // Dereference the pointer to get the data
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	60da      	str	r2, [r3, #12]

			// Decrease the length
			len--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
			len--; // 2 bytes to decrease
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]

			// Increment TxBuffer in order to make it point to the next data item
			(uint16_t*)pTxBuffer++;
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	e00a      	b.n	8000b9e <SPI_SendData+0x5e>

		} else {
			// 8-Bit format
			pSPIx->DR = *pTxBuffer;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	60da      	str	r2, [r3, #12]
			len--;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	60bb      	str	r3, [r7, #8]
	while (len > 0){
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1d4      	bne.n	8000b4e <SPI_SendData+0xe>
		}
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SPI_ReceiveData>:
 * @param [in]		Pointer to the buffer containing the data that is going to be received
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]

	while (len > 0){
 8000bb8:	e027      	b.n	8000c0a <SPI_ReceiveData+0x5e>
			// Wait until RXE is set -> Tx Buffer is empty
			while((SPI_GetFlagStatus(pSPIx, SPI_RXE_FLAG)) == FLAG_RESET);
 8000bba:	bf00      	nop
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff ffab 	bl	8000b1a <SPI_GetFlagStatus>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f8      	beq.n	8000bbc <SPI_ReceiveData+0x10>
			// When the expression is true and the flag is still in reset, it will wait in the while

			// Check DFF bit
			if(pSPIx->CR1 & (SPI_CR1_DFF)){
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 030b 	and.w	r3, r3, #11
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00e      	beq.n	8000bf4 <SPI_ReceiveData+0x48>
				// 16-Bit format
				// Load data from DR to RxBuffer
				*((uint16_t*)pRxBuffer) = pSPIx->DR; // Dereference the pointer to get the data
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	b29a      	uxth	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	801a      	strh	r2, [r3, #0]

				// Decrease the length
				len--;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
				len--; // 2 bytes to decrease
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]

				// Increment TxBuffer in order to make it point to the next data item
				(uint16_t*)pRxBuffer++;
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	e00a      	b.n	8000c0a <SPI_ReceiveData+0x5e>

			} else {
				// 8-Bit format
				*pRxBuffer = pSPIx->DR ;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	701a      	strb	r2, [r3, #0]
				len--;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
	while (len > 0){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1d4      	bne.n	8000bba <SPI_ReceiveData+0xe>
			}
		}
}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SPI_PeripheralControl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d106      	bne.n	8000c38 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c36:	e005      	b.n	8000c44 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <SPI_SSOEConfig>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	460b      	mov	r3, r1
 8000c58:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000c5a:	78fb      	ldrb	r3, [r7, #3]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d106      	bne.n	8000c6e <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f043 0204 	orr.w	r2, r3, #4
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000c6c:	e005      	b.n	8000c7a <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f023 0204 	bic.w	r2, r3, #4
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	2500      	movs	r5, #0
 8000c88:	4e0c      	ldr	r6, [pc, #48]	; (8000cbc <__libc_init_array+0x38>)
 8000c8a:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8c:	1ba4      	subs	r4, r4, r6
 8000c8e:	10a4      	asrs	r4, r4, #2
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	f000 ff58 	bl	8001b48 <_init>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	4e0a      	ldr	r6, [pc, #40]	; (8000cc4 <__libc_init_array+0x40>)
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <__libc_init_array+0x44>)
 8000c9e:	1ba4      	subs	r4, r4, r6
 8000ca0:	10a4      	asrs	r4, r4, #2
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cac:	4798      	blx	r3
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08001bf8 	.word	0x08001bf8
 8000cc0:	08001bf8 	.word	0x08001bf8
 8000cc4:	08001bf8 	.word	0x08001bf8
 8000cc8:	08001bfc 	.word	0x08001bfc

08000ccc <memset>:
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4402      	add	r2, r0
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d100      	bne.n	8000cd6 <memset+0xa>
 8000cd4:	4770      	bx	lr
 8000cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8000cda:	e7f9      	b.n	8000cd0 <memset+0x4>

08000cdc <_puts_r>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	460e      	mov	r6, r1
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	b118      	cbz	r0, 8000cec <_puts_r+0x10>
 8000ce4:	6983      	ldr	r3, [r0, #24]
 8000ce6:	b90b      	cbnz	r3, 8000cec <_puts_r+0x10>
 8000ce8:	f000 fa0c 	bl	8001104 <__sinit>
 8000cec:	69ab      	ldr	r3, [r5, #24]
 8000cee:	68ac      	ldr	r4, [r5, #8]
 8000cf0:	b913      	cbnz	r3, 8000cf8 <_puts_r+0x1c>
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f000 fa06 	bl	8001104 <__sinit>
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <_puts_r+0xac>)
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	d117      	bne.n	8000d2e <_puts_r+0x52>
 8000cfe:	686c      	ldr	r4, [r5, #4]
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	071b      	lsls	r3, r3, #28
 8000d04:	d51d      	bpl.n	8000d42 <_puts_r+0x66>
 8000d06:	6923      	ldr	r3, [r4, #16]
 8000d08:	b1db      	cbz	r3, 8000d42 <_puts_r+0x66>
 8000d0a:	3e01      	subs	r6, #1
 8000d0c:	68a3      	ldr	r3, [r4, #8]
 8000d0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d12:	3b01      	subs	r3, #1
 8000d14:	60a3      	str	r3, [r4, #8]
 8000d16:	b9e9      	cbnz	r1, 8000d54 <_puts_r+0x78>
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da2e      	bge.n	8000d7a <_puts_r+0x9e>
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	210a      	movs	r1, #10
 8000d20:	4628      	mov	r0, r5
 8000d22:	f000 f83f 	bl	8000da4 <__swbuf_r>
 8000d26:	3001      	adds	r0, #1
 8000d28:	d011      	beq.n	8000d4e <_puts_r+0x72>
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	e011      	b.n	8000d52 <_puts_r+0x76>
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <_puts_r+0xb0>)
 8000d30:	429c      	cmp	r4, r3
 8000d32:	d101      	bne.n	8000d38 <_puts_r+0x5c>
 8000d34:	68ac      	ldr	r4, [r5, #8]
 8000d36:	e7e3      	b.n	8000d00 <_puts_r+0x24>
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <_puts_r+0xb4>)
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	bf08      	it	eq
 8000d3e:	68ec      	ldreq	r4, [r5, #12]
 8000d40:	e7de      	b.n	8000d00 <_puts_r+0x24>
 8000d42:	4621      	mov	r1, r4
 8000d44:	4628      	mov	r0, r5
 8000d46:	f000 f87f 	bl	8000e48 <__swsetup_r>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d0dd      	beq.n	8000d0a <_puts_r+0x2e>
 8000d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	da04      	bge.n	8000d62 <_puts_r+0x86>
 8000d58:	69a2      	ldr	r2, [r4, #24]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dc06      	bgt.n	8000d6c <_puts_r+0x90>
 8000d5e:	290a      	cmp	r1, #10
 8000d60:	d004      	beq.n	8000d6c <_puts_r+0x90>
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	1c5a      	adds	r2, r3, #1
 8000d66:	6022      	str	r2, [r4, #0]
 8000d68:	7019      	strb	r1, [r3, #0]
 8000d6a:	e7cf      	b.n	8000d0c <_puts_r+0x30>
 8000d6c:	4622      	mov	r2, r4
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f000 f818 	bl	8000da4 <__swbuf_r>
 8000d74:	3001      	adds	r0, #1
 8000d76:	d1c9      	bne.n	8000d0c <_puts_r+0x30>
 8000d78:	e7e9      	b.n	8000d4e <_puts_r+0x72>
 8000d7a:	200a      	movs	r0, #10
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	6022      	str	r2, [r4, #0]
 8000d82:	7018      	strb	r0, [r3, #0]
 8000d84:	e7e5      	b.n	8000d52 <_puts_r+0x76>
 8000d86:	bf00      	nop
 8000d88:	08001b9c 	.word	0x08001b9c
 8000d8c:	08001bbc 	.word	0x08001bbc
 8000d90:	08001b7c 	.word	0x08001b7c

08000d94 <puts>:
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <puts+0xc>)
 8000d96:	4601      	mov	r1, r0
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	f7ff bf9f 	b.w	8000cdc <_puts_r>
 8000d9e:	bf00      	nop
 8000da0:	20000000 	.word	0x20000000

08000da4 <__swbuf_r>:
 8000da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da6:	460e      	mov	r6, r1
 8000da8:	4614      	mov	r4, r2
 8000daa:	4605      	mov	r5, r0
 8000dac:	b118      	cbz	r0, 8000db6 <__swbuf_r+0x12>
 8000dae:	6983      	ldr	r3, [r0, #24]
 8000db0:	b90b      	cbnz	r3, 8000db6 <__swbuf_r+0x12>
 8000db2:	f000 f9a7 	bl	8001104 <__sinit>
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <__swbuf_r+0x98>)
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d12a      	bne.n	8000e12 <__swbuf_r+0x6e>
 8000dbc:	686c      	ldr	r4, [r5, #4]
 8000dbe:	69a3      	ldr	r3, [r4, #24]
 8000dc0:	60a3      	str	r3, [r4, #8]
 8000dc2:	89a3      	ldrh	r3, [r4, #12]
 8000dc4:	071a      	lsls	r2, r3, #28
 8000dc6:	d52e      	bpl.n	8000e26 <__swbuf_r+0x82>
 8000dc8:	6923      	ldr	r3, [r4, #16]
 8000dca:	b363      	cbz	r3, 8000e26 <__swbuf_r+0x82>
 8000dcc:	6923      	ldr	r3, [r4, #16]
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	b2f6      	uxtb	r6, r6
 8000dd2:	1ac0      	subs	r0, r0, r3
 8000dd4:	6963      	ldr	r3, [r4, #20]
 8000dd6:	4637      	mov	r7, r6
 8000dd8:	4283      	cmp	r3, r0
 8000dda:	dc04      	bgt.n	8000de6 <__swbuf_r+0x42>
 8000ddc:	4621      	mov	r1, r4
 8000dde:	4628      	mov	r0, r5
 8000de0:	f000 f926 	bl	8001030 <_fflush_r>
 8000de4:	bb28      	cbnz	r0, 8000e32 <__swbuf_r+0x8e>
 8000de6:	68a3      	ldr	r3, [r4, #8]
 8000de8:	3001      	adds	r0, #1
 8000dea:	3b01      	subs	r3, #1
 8000dec:	60a3      	str	r3, [r4, #8]
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	6022      	str	r2, [r4, #0]
 8000df4:	701e      	strb	r6, [r3, #0]
 8000df6:	6963      	ldr	r3, [r4, #20]
 8000df8:	4283      	cmp	r3, r0
 8000dfa:	d004      	beq.n	8000e06 <__swbuf_r+0x62>
 8000dfc:	89a3      	ldrh	r3, [r4, #12]
 8000dfe:	07db      	lsls	r3, r3, #31
 8000e00:	d519      	bpl.n	8000e36 <__swbuf_r+0x92>
 8000e02:	2e0a      	cmp	r6, #10
 8000e04:	d117      	bne.n	8000e36 <__swbuf_r+0x92>
 8000e06:	4621      	mov	r1, r4
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f000 f911 	bl	8001030 <_fflush_r>
 8000e0e:	b190      	cbz	r0, 8000e36 <__swbuf_r+0x92>
 8000e10:	e00f      	b.n	8000e32 <__swbuf_r+0x8e>
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <__swbuf_r+0x9c>)
 8000e14:	429c      	cmp	r4, r3
 8000e16:	d101      	bne.n	8000e1c <__swbuf_r+0x78>
 8000e18:	68ac      	ldr	r4, [r5, #8]
 8000e1a:	e7d0      	b.n	8000dbe <__swbuf_r+0x1a>
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <__swbuf_r+0xa0>)
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	bf08      	it	eq
 8000e22:	68ec      	ldreq	r4, [r5, #12]
 8000e24:	e7cb      	b.n	8000dbe <__swbuf_r+0x1a>
 8000e26:	4621      	mov	r1, r4
 8000e28:	4628      	mov	r0, r5
 8000e2a:	f000 f80d 	bl	8000e48 <__swsetup_r>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d0cc      	beq.n	8000dcc <__swbuf_r+0x28>
 8000e32:	f04f 37ff 	mov.w	r7, #4294967295
 8000e36:	4638      	mov	r0, r7
 8000e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08001b9c 	.word	0x08001b9c
 8000e40:	08001bbc 	.word	0x08001bbc
 8000e44:	08001b7c 	.word	0x08001b7c

08000e48 <__swsetup_r>:
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <__swsetup_r+0xcc>)
 8000e4a:	b570      	push	{r4, r5, r6, lr}
 8000e4c:	681d      	ldr	r5, [r3, #0]
 8000e4e:	4606      	mov	r6, r0
 8000e50:	460c      	mov	r4, r1
 8000e52:	b125      	cbz	r5, 8000e5e <__swsetup_r+0x16>
 8000e54:	69ab      	ldr	r3, [r5, #24]
 8000e56:	b913      	cbnz	r3, 8000e5e <__swsetup_r+0x16>
 8000e58:	4628      	mov	r0, r5
 8000e5a:	f000 f953 	bl	8001104 <__sinit>
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <__swsetup_r+0xd0>)
 8000e60:	429c      	cmp	r4, r3
 8000e62:	d10f      	bne.n	8000e84 <__swsetup_r+0x3c>
 8000e64:	686c      	ldr	r4, [r5, #4]
 8000e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	0715      	lsls	r5, r2, #28
 8000e6e:	d42c      	bmi.n	8000eca <__swsetup_r+0x82>
 8000e70:	06d0      	lsls	r0, r2, #27
 8000e72:	d411      	bmi.n	8000e98 <__swsetup_r+0x50>
 8000e74:	2209      	movs	r2, #9
 8000e76:	6032      	str	r2, [r6, #0]
 8000e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7c:	81a3      	strh	r3, [r4, #12]
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	e03e      	b.n	8000f02 <__swsetup_r+0xba>
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <__swsetup_r+0xd4>)
 8000e86:	429c      	cmp	r4, r3
 8000e88:	d101      	bne.n	8000e8e <__swsetup_r+0x46>
 8000e8a:	68ac      	ldr	r4, [r5, #8]
 8000e8c:	e7eb      	b.n	8000e66 <__swsetup_r+0x1e>
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <__swsetup_r+0xd8>)
 8000e90:	429c      	cmp	r4, r3
 8000e92:	bf08      	it	eq
 8000e94:	68ec      	ldreq	r4, [r5, #12]
 8000e96:	e7e6      	b.n	8000e66 <__swsetup_r+0x1e>
 8000e98:	0751      	lsls	r1, r2, #29
 8000e9a:	d512      	bpl.n	8000ec2 <__swsetup_r+0x7a>
 8000e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e9e:	b141      	cbz	r1, 8000eb2 <__swsetup_r+0x6a>
 8000ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	d002      	beq.n	8000eae <__swsetup_r+0x66>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	f000 fa19 	bl	80012e0 <_free_r>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000eb8:	81a3      	strh	r3, [r4, #12]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	6063      	str	r3, [r4, #4]
 8000ebe:	6923      	ldr	r3, [r4, #16]
 8000ec0:	6023      	str	r3, [r4, #0]
 8000ec2:	89a3      	ldrh	r3, [r4, #12]
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	81a3      	strh	r3, [r4, #12]
 8000eca:	6923      	ldr	r3, [r4, #16]
 8000ecc:	b94b      	cbnz	r3, 8000ee2 <__swsetup_r+0x9a>
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ed8:	d003      	beq.n	8000ee2 <__swsetup_r+0x9a>
 8000eda:	4621      	mov	r1, r4
 8000edc:	4630      	mov	r0, r6
 8000ede:	f000 f9bf 	bl	8001260 <__smakebuf_r>
 8000ee2:	89a2      	ldrh	r2, [r4, #12]
 8000ee4:	f012 0301 	ands.w	r3, r2, #1
 8000ee8:	d00c      	beq.n	8000f04 <__swsetup_r+0xbc>
 8000eea:	2300      	movs	r3, #0
 8000eec:	60a3      	str	r3, [r4, #8]
 8000eee:	6963      	ldr	r3, [r4, #20]
 8000ef0:	425b      	negs	r3, r3
 8000ef2:	61a3      	str	r3, [r4, #24]
 8000ef4:	6923      	ldr	r3, [r4, #16]
 8000ef6:	b953      	cbnz	r3, 8000f0e <__swsetup_r+0xc6>
 8000ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000efc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000f00:	d1ba      	bne.n	8000e78 <__swsetup_r+0x30>
 8000f02:	bd70      	pop	{r4, r5, r6, pc}
 8000f04:	0792      	lsls	r2, r2, #30
 8000f06:	bf58      	it	pl
 8000f08:	6963      	ldrpl	r3, [r4, #20]
 8000f0a:	60a3      	str	r3, [r4, #8]
 8000f0c:	e7f2      	b.n	8000ef4 <__swsetup_r+0xac>
 8000f0e:	2000      	movs	r0, #0
 8000f10:	e7f7      	b.n	8000f02 <__swsetup_r+0xba>
 8000f12:	bf00      	nop
 8000f14:	20000000 	.word	0x20000000
 8000f18:	08001b9c 	.word	0x08001b9c
 8000f1c:	08001bbc 	.word	0x08001bbc
 8000f20:	08001b7c 	.word	0x08001b7c

08000f24 <__sflush_r>:
 8000f24:	898a      	ldrh	r2, [r1, #12]
 8000f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	0710      	lsls	r0, r2, #28
 8000f2e:	460c      	mov	r4, r1
 8000f30:	d458      	bmi.n	8000fe4 <__sflush_r+0xc0>
 8000f32:	684b      	ldr	r3, [r1, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dc05      	bgt.n	8000f44 <__sflush_r+0x20>
 8000f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	dc02      	bgt.n	8000f44 <__sflush_r+0x20>
 8000f3e:	2000      	movs	r0, #0
 8000f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d0f9      	beq.n	8000f3e <__sflush_r+0x1a>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f50:	682f      	ldr	r7, [r5, #0]
 8000f52:	6a21      	ldr	r1, [r4, #32]
 8000f54:	602b      	str	r3, [r5, #0]
 8000f56:	d032      	beq.n	8000fbe <__sflush_r+0x9a>
 8000f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f5a:	89a3      	ldrh	r3, [r4, #12]
 8000f5c:	075a      	lsls	r2, r3, #29
 8000f5e:	d505      	bpl.n	8000f6c <__sflush_r+0x48>
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	1ac0      	subs	r0, r0, r3
 8000f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f66:	b10b      	cbz	r3, 8000f6c <__sflush_r+0x48>
 8000f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f6a:	1ac0      	subs	r0, r0, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4602      	mov	r2, r0
 8000f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f72:	6a21      	ldr	r1, [r4, #32]
 8000f74:	4628      	mov	r0, r5
 8000f76:	47b0      	blx	r6
 8000f78:	1c43      	adds	r3, r0, #1
 8000f7a:	89a3      	ldrh	r3, [r4, #12]
 8000f7c:	d106      	bne.n	8000f8c <__sflush_r+0x68>
 8000f7e:	6829      	ldr	r1, [r5, #0]
 8000f80:	291d      	cmp	r1, #29
 8000f82:	d848      	bhi.n	8001016 <__sflush_r+0xf2>
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <__sflush_r+0x108>)
 8000f86:	40ca      	lsrs	r2, r1
 8000f88:	07d6      	lsls	r6, r2, #31
 8000f8a:	d544      	bpl.n	8001016 <__sflush_r+0xf2>
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6062      	str	r2, [r4, #4]
 8000f90:	6922      	ldr	r2, [r4, #16]
 8000f92:	04d9      	lsls	r1, r3, #19
 8000f94:	6022      	str	r2, [r4, #0]
 8000f96:	d504      	bpl.n	8000fa2 <__sflush_r+0x7e>
 8000f98:	1c42      	adds	r2, r0, #1
 8000f9a:	d101      	bne.n	8000fa0 <__sflush_r+0x7c>
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	b903      	cbnz	r3, 8000fa2 <__sflush_r+0x7e>
 8000fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8000fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fa4:	602f      	str	r7, [r5, #0]
 8000fa6:	2900      	cmp	r1, #0
 8000fa8:	d0c9      	beq.n	8000f3e <__sflush_r+0x1a>
 8000faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d002      	beq.n	8000fb8 <__sflush_r+0x94>
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f000 f994 	bl	80012e0 <_free_r>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	6360      	str	r0, [r4, #52]	; 0x34
 8000fbc:	e7c0      	b.n	8000f40 <__sflush_r+0x1c>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	47b0      	blx	r6
 8000fc4:	1c41      	adds	r1, r0, #1
 8000fc6:	d1c8      	bne.n	8000f5a <__sflush_r+0x36>
 8000fc8:	682b      	ldr	r3, [r5, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0c5      	beq.n	8000f5a <__sflush_r+0x36>
 8000fce:	2b1d      	cmp	r3, #29
 8000fd0:	d001      	beq.n	8000fd6 <__sflush_r+0xb2>
 8000fd2:	2b16      	cmp	r3, #22
 8000fd4:	d101      	bne.n	8000fda <__sflush_r+0xb6>
 8000fd6:	602f      	str	r7, [r5, #0]
 8000fd8:	e7b1      	b.n	8000f3e <__sflush_r+0x1a>
 8000fda:	89a3      	ldrh	r3, [r4, #12]
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	81a3      	strh	r3, [r4, #12]
 8000fe2:	e7ad      	b.n	8000f40 <__sflush_r+0x1c>
 8000fe4:	690f      	ldr	r7, [r1, #16]
 8000fe6:	2f00      	cmp	r7, #0
 8000fe8:	d0a9      	beq.n	8000f3e <__sflush_r+0x1a>
 8000fea:	0793      	lsls	r3, r2, #30
 8000fec:	bf18      	it	ne
 8000fee:	2300      	movne	r3, #0
 8000ff0:	680e      	ldr	r6, [r1, #0]
 8000ff2:	bf08      	it	eq
 8000ff4:	694b      	ldreq	r3, [r1, #20]
 8000ff6:	eba6 0807 	sub.w	r8, r6, r7
 8000ffa:	600f      	str	r7, [r1, #0]
 8000ffc:	608b      	str	r3, [r1, #8]
 8000ffe:	f1b8 0f00 	cmp.w	r8, #0
 8001002:	dd9c      	ble.n	8000f3e <__sflush_r+0x1a>
 8001004:	4643      	mov	r3, r8
 8001006:	463a      	mov	r2, r7
 8001008:	6a21      	ldr	r1, [r4, #32]
 800100a:	4628      	mov	r0, r5
 800100c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800100e:	47b0      	blx	r6
 8001010:	2800      	cmp	r0, #0
 8001012:	dc06      	bgt.n	8001022 <__sflush_r+0xfe>
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800101a:	81a3      	strh	r3, [r4, #12]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	e78e      	b.n	8000f40 <__sflush_r+0x1c>
 8001022:	4407      	add	r7, r0
 8001024:	eba8 0800 	sub.w	r8, r8, r0
 8001028:	e7e9      	b.n	8000ffe <__sflush_r+0xda>
 800102a:	bf00      	nop
 800102c:	20400001 	.word	0x20400001

08001030 <_fflush_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	690b      	ldr	r3, [r1, #16]
 8001034:	4605      	mov	r5, r0
 8001036:	460c      	mov	r4, r1
 8001038:	b1db      	cbz	r3, 8001072 <_fflush_r+0x42>
 800103a:	b118      	cbz	r0, 8001044 <_fflush_r+0x14>
 800103c:	6983      	ldr	r3, [r0, #24]
 800103e:	b90b      	cbnz	r3, 8001044 <_fflush_r+0x14>
 8001040:	f000 f860 	bl	8001104 <__sinit>
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <_fflush_r+0x48>)
 8001046:	429c      	cmp	r4, r3
 8001048:	d109      	bne.n	800105e <_fflush_r+0x2e>
 800104a:	686c      	ldr	r4, [r5, #4]
 800104c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001050:	b17b      	cbz	r3, 8001072 <_fflush_r+0x42>
 8001052:	4621      	mov	r1, r4
 8001054:	4628      	mov	r0, r5
 8001056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800105a:	f7ff bf63 	b.w	8000f24 <__sflush_r>
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <_fflush_r+0x4c>)
 8001060:	429c      	cmp	r4, r3
 8001062:	d101      	bne.n	8001068 <_fflush_r+0x38>
 8001064:	68ac      	ldr	r4, [r5, #8]
 8001066:	e7f1      	b.n	800104c <_fflush_r+0x1c>
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <_fflush_r+0x50>)
 800106a:	429c      	cmp	r4, r3
 800106c:	bf08      	it	eq
 800106e:	68ec      	ldreq	r4, [r5, #12]
 8001070:	e7ec      	b.n	800104c <_fflush_r+0x1c>
 8001072:	2000      	movs	r0, #0
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	08001b9c 	.word	0x08001b9c
 800107c:	08001bbc 	.word	0x08001bbc
 8001080:	08001b7c 	.word	0x08001b7c

08001084 <std>:
 8001084:	2300      	movs	r3, #0
 8001086:	b510      	push	{r4, lr}
 8001088:	4604      	mov	r4, r0
 800108a:	e9c0 3300 	strd	r3, r3, [r0]
 800108e:	6083      	str	r3, [r0, #8]
 8001090:	8181      	strh	r1, [r0, #12]
 8001092:	6643      	str	r3, [r0, #100]	; 0x64
 8001094:	81c2      	strh	r2, [r0, #14]
 8001096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800109a:	6183      	str	r3, [r0, #24]
 800109c:	4619      	mov	r1, r3
 800109e:	2208      	movs	r2, #8
 80010a0:	305c      	adds	r0, #92	; 0x5c
 80010a2:	f7ff fe13 	bl	8000ccc <memset>
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <std+0x38>)
 80010a8:	6224      	str	r4, [r4, #32]
 80010aa:	6263      	str	r3, [r4, #36]	; 0x24
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <std+0x3c>)
 80010ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <std+0x40>)
 80010b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <std+0x44>)
 80010b6:	6323      	str	r3, [r4, #48]	; 0x30
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	bf00      	nop
 80010bc:	0800144d 	.word	0x0800144d
 80010c0:	0800146f 	.word	0x0800146f
 80010c4:	080014a7 	.word	0x080014a7
 80010c8:	080014cb 	.word	0x080014cb

080010cc <_cleanup_r>:
 80010cc:	4901      	ldr	r1, [pc, #4]	; (80010d4 <_cleanup_r+0x8>)
 80010ce:	f000 b885 	b.w	80011dc <_fwalk_reent>
 80010d2:	bf00      	nop
 80010d4:	08001031 	.word	0x08001031

080010d8 <__sfmoreglue>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	2568      	movs	r5, #104	; 0x68
 80010dc:	1e4a      	subs	r2, r1, #1
 80010de:	4355      	muls	r5, r2
 80010e0:	460e      	mov	r6, r1
 80010e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80010e6:	f000 f947 	bl	8001378 <_malloc_r>
 80010ea:	4604      	mov	r4, r0
 80010ec:	b140      	cbz	r0, 8001100 <__sfmoreglue+0x28>
 80010ee:	2100      	movs	r1, #0
 80010f0:	e9c0 1600 	strd	r1, r6, [r0]
 80010f4:	300c      	adds	r0, #12
 80010f6:	60a0      	str	r0, [r4, #8]
 80010f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010fc:	f7ff fde6 	bl	8000ccc <memset>
 8001100:	4620      	mov	r0, r4
 8001102:	bd70      	pop	{r4, r5, r6, pc}

08001104 <__sinit>:
 8001104:	6983      	ldr	r3, [r0, #24]
 8001106:	b510      	push	{r4, lr}
 8001108:	4604      	mov	r4, r0
 800110a:	bb33      	cbnz	r3, 800115a <__sinit+0x56>
 800110c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001110:	6503      	str	r3, [r0, #80]	; 0x50
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <__sinit+0x58>)
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <__sinit+0x5c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6282      	str	r2, [r0, #40]	; 0x28
 800111a:	4298      	cmp	r0, r3
 800111c:	bf04      	itt	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	6183      	streq	r3, [r0, #24]
 8001122:	f000 f81f 	bl	8001164 <__sfp>
 8001126:	6060      	str	r0, [r4, #4]
 8001128:	4620      	mov	r0, r4
 800112a:	f000 f81b 	bl	8001164 <__sfp>
 800112e:	60a0      	str	r0, [r4, #8]
 8001130:	4620      	mov	r0, r4
 8001132:	f000 f817 	bl	8001164 <__sfp>
 8001136:	2200      	movs	r2, #0
 8001138:	60e0      	str	r0, [r4, #12]
 800113a:	2104      	movs	r1, #4
 800113c:	6860      	ldr	r0, [r4, #4]
 800113e:	f7ff ffa1 	bl	8001084 <std>
 8001142:	2201      	movs	r2, #1
 8001144:	2109      	movs	r1, #9
 8001146:	68a0      	ldr	r0, [r4, #8]
 8001148:	f7ff ff9c 	bl	8001084 <std>
 800114c:	2202      	movs	r2, #2
 800114e:	2112      	movs	r1, #18
 8001150:	68e0      	ldr	r0, [r4, #12]
 8001152:	f7ff ff97 	bl	8001084 <std>
 8001156:	2301      	movs	r3, #1
 8001158:	61a3      	str	r3, [r4, #24]
 800115a:	bd10      	pop	{r4, pc}
 800115c:	08001b78 	.word	0x08001b78
 8001160:	080010cd 	.word	0x080010cd

08001164 <__sfp>:
 8001164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <__sfp+0x70>)
 8001168:	4607      	mov	r7, r0
 800116a:	681e      	ldr	r6, [r3, #0]
 800116c:	69b3      	ldr	r3, [r6, #24]
 800116e:	b913      	cbnz	r3, 8001176 <__sfp+0x12>
 8001170:	4630      	mov	r0, r6
 8001172:	f7ff ffc7 	bl	8001104 <__sinit>
 8001176:	3648      	adds	r6, #72	; 0x48
 8001178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800117c:	3b01      	subs	r3, #1
 800117e:	d503      	bpl.n	8001188 <__sfp+0x24>
 8001180:	6833      	ldr	r3, [r6, #0]
 8001182:	b133      	cbz	r3, 8001192 <__sfp+0x2e>
 8001184:	6836      	ldr	r6, [r6, #0]
 8001186:	e7f7      	b.n	8001178 <__sfp+0x14>
 8001188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800118c:	b16d      	cbz	r5, 80011aa <__sfp+0x46>
 800118e:	3468      	adds	r4, #104	; 0x68
 8001190:	e7f4      	b.n	800117c <__sfp+0x18>
 8001192:	2104      	movs	r1, #4
 8001194:	4638      	mov	r0, r7
 8001196:	f7ff ff9f 	bl	80010d8 <__sfmoreglue>
 800119a:	6030      	str	r0, [r6, #0]
 800119c:	2800      	cmp	r0, #0
 800119e:	d1f1      	bne.n	8001184 <__sfp+0x20>
 80011a0:	230c      	movs	r3, #12
 80011a2:	4604      	mov	r4, r0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4620      	mov	r0, r4
 80011a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__sfp+0x74>)
 80011ac:	6665      	str	r5, [r4, #100]	; 0x64
 80011ae:	e9c4 5500 	strd	r5, r5, [r4]
 80011b2:	60a5      	str	r5, [r4, #8]
 80011b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80011b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80011bc:	2208      	movs	r2, #8
 80011be:	4629      	mov	r1, r5
 80011c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80011c4:	f7ff fd82 	bl	8000ccc <memset>
 80011c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80011cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80011d0:	e7e9      	b.n	80011a6 <__sfp+0x42>
 80011d2:	bf00      	nop
 80011d4:	08001b78 	.word	0x08001b78
 80011d8:	ffff0001 	.word	0xffff0001

080011dc <_fwalk_reent>:
 80011dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011e0:	4680      	mov	r8, r0
 80011e2:	4689      	mov	r9, r1
 80011e4:	2600      	movs	r6, #0
 80011e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80011ea:	b914      	cbnz	r4, 80011f2 <_fwalk_reent+0x16>
 80011ec:	4630      	mov	r0, r6
 80011ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80011f6:	3f01      	subs	r7, #1
 80011f8:	d501      	bpl.n	80011fe <_fwalk_reent+0x22>
 80011fa:	6824      	ldr	r4, [r4, #0]
 80011fc:	e7f5      	b.n	80011ea <_fwalk_reent+0xe>
 80011fe:	89ab      	ldrh	r3, [r5, #12]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d907      	bls.n	8001214 <_fwalk_reent+0x38>
 8001204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001208:	3301      	adds	r3, #1
 800120a:	d003      	beq.n	8001214 <_fwalk_reent+0x38>
 800120c:	4629      	mov	r1, r5
 800120e:	4640      	mov	r0, r8
 8001210:	47c8      	blx	r9
 8001212:	4306      	orrs	r6, r0
 8001214:	3568      	adds	r5, #104	; 0x68
 8001216:	e7ee      	b.n	80011f6 <_fwalk_reent+0x1a>

08001218 <__swhatbuf_r>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	460e      	mov	r6, r1
 800121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001220:	b096      	sub	sp, #88	; 0x58
 8001222:	2900      	cmp	r1, #0
 8001224:	4614      	mov	r4, r2
 8001226:	461d      	mov	r5, r3
 8001228:	da07      	bge.n	800123a <__swhatbuf_r+0x22>
 800122a:	2300      	movs	r3, #0
 800122c:	602b      	str	r3, [r5, #0]
 800122e:	89b3      	ldrh	r3, [r6, #12]
 8001230:	061a      	lsls	r2, r3, #24
 8001232:	d410      	bmi.n	8001256 <__swhatbuf_r+0x3e>
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	e00e      	b.n	8001258 <__swhatbuf_r+0x40>
 800123a:	466a      	mov	r2, sp
 800123c:	f000 f96c 	bl	8001518 <_fstat_r>
 8001240:	2800      	cmp	r0, #0
 8001242:	dbf2      	blt.n	800122a <__swhatbuf_r+0x12>
 8001244:	9a01      	ldr	r2, [sp, #4]
 8001246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800124a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800124e:	425a      	negs	r2, r3
 8001250:	415a      	adcs	r2, r3
 8001252:	602a      	str	r2, [r5, #0]
 8001254:	e7ee      	b.n	8001234 <__swhatbuf_r+0x1c>
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	2000      	movs	r0, #0
 800125a:	6023      	str	r3, [r4, #0]
 800125c:	b016      	add	sp, #88	; 0x58
 800125e:	bd70      	pop	{r4, r5, r6, pc}

08001260 <__smakebuf_r>:
 8001260:	898b      	ldrh	r3, [r1, #12]
 8001262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001264:	079d      	lsls	r5, r3, #30
 8001266:	4606      	mov	r6, r0
 8001268:	460c      	mov	r4, r1
 800126a:	d507      	bpl.n	800127c <__smakebuf_r+0x1c>
 800126c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	6123      	str	r3, [r4, #16]
 8001274:	2301      	movs	r3, #1
 8001276:	6163      	str	r3, [r4, #20]
 8001278:	b002      	add	sp, #8
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	ab01      	add	r3, sp, #4
 800127e:	466a      	mov	r2, sp
 8001280:	f7ff ffca 	bl	8001218 <__swhatbuf_r>
 8001284:	9900      	ldr	r1, [sp, #0]
 8001286:	4605      	mov	r5, r0
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f875 	bl	8001378 <_malloc_r>
 800128e:	b948      	cbnz	r0, 80012a4 <__smakebuf_r+0x44>
 8001290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001294:	059a      	lsls	r2, r3, #22
 8001296:	d4ef      	bmi.n	8001278 <__smakebuf_r+0x18>
 8001298:	f023 0303 	bic.w	r3, r3, #3
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	81a3      	strh	r3, [r4, #12]
 80012a2:	e7e3      	b.n	800126c <__smakebuf_r+0xc>
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <__smakebuf_r+0x7c>)
 80012a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80012a8:	89a3      	ldrh	r3, [r4, #12]
 80012aa:	6020      	str	r0, [r4, #0]
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	81a3      	strh	r3, [r4, #12]
 80012b2:	9b00      	ldr	r3, [sp, #0]
 80012b4:	6120      	str	r0, [r4, #16]
 80012b6:	6163      	str	r3, [r4, #20]
 80012b8:	9b01      	ldr	r3, [sp, #4]
 80012ba:	b15b      	cbz	r3, 80012d4 <__smakebuf_r+0x74>
 80012bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012c0:	4630      	mov	r0, r6
 80012c2:	f000 f93b 	bl	800153c <_isatty_r>
 80012c6:	b128      	cbz	r0, 80012d4 <__smakebuf_r+0x74>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	f023 0303 	bic.w	r3, r3, #3
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	81a3      	strh	r3, [r4, #12]
 80012d4:	89a3      	ldrh	r3, [r4, #12]
 80012d6:	431d      	orrs	r5, r3
 80012d8:	81a5      	strh	r5, [r4, #12]
 80012da:	e7cd      	b.n	8001278 <__smakebuf_r+0x18>
 80012dc:	080010cd 	.word	0x080010cd

080012e0 <_free_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4605      	mov	r5, r0
 80012e4:	2900      	cmp	r1, #0
 80012e6:	d043      	beq.n	8001370 <_free_r+0x90>
 80012e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012ec:	1f0c      	subs	r4, r1, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bfb8      	it	lt
 80012f2:	18e4      	addlt	r4, r4, r3
 80012f4:	f000 f944 	bl	8001580 <__malloc_lock>
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <_free_r+0x94>)
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	4610      	mov	r0, r2
 80012fe:	b933      	cbnz	r3, 800130e <_free_r+0x2e>
 8001300:	6063      	str	r3, [r4, #4]
 8001302:	6014      	str	r4, [r2, #0]
 8001304:	4628      	mov	r0, r5
 8001306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800130a:	f000 b93a 	b.w	8001582 <__malloc_unlock>
 800130e:	42a3      	cmp	r3, r4
 8001310:	d90b      	bls.n	800132a <_free_r+0x4a>
 8001312:	6821      	ldr	r1, [r4, #0]
 8001314:	1862      	adds	r2, r4, r1
 8001316:	4293      	cmp	r3, r2
 8001318:	bf01      	itttt	eq
 800131a:	681a      	ldreq	r2, [r3, #0]
 800131c:	685b      	ldreq	r3, [r3, #4]
 800131e:	1852      	addeq	r2, r2, r1
 8001320:	6022      	streq	r2, [r4, #0]
 8001322:	6063      	str	r3, [r4, #4]
 8001324:	6004      	str	r4, [r0, #0]
 8001326:	e7ed      	b.n	8001304 <_free_r+0x24>
 8001328:	4613      	mov	r3, r2
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	b10a      	cbz	r2, 8001332 <_free_r+0x52>
 800132e:	42a2      	cmp	r2, r4
 8001330:	d9fa      	bls.n	8001328 <_free_r+0x48>
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	1858      	adds	r0, r3, r1
 8001336:	42a0      	cmp	r0, r4
 8001338:	d10b      	bne.n	8001352 <_free_r+0x72>
 800133a:	6820      	ldr	r0, [r4, #0]
 800133c:	4401      	add	r1, r0
 800133e:	1858      	adds	r0, r3, r1
 8001340:	4282      	cmp	r2, r0
 8001342:	6019      	str	r1, [r3, #0]
 8001344:	d1de      	bne.n	8001304 <_free_r+0x24>
 8001346:	6810      	ldr	r0, [r2, #0]
 8001348:	6852      	ldr	r2, [r2, #4]
 800134a:	4401      	add	r1, r0
 800134c:	6019      	str	r1, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	e7d8      	b.n	8001304 <_free_r+0x24>
 8001352:	d902      	bls.n	800135a <_free_r+0x7a>
 8001354:	230c      	movs	r3, #12
 8001356:	602b      	str	r3, [r5, #0]
 8001358:	e7d4      	b.n	8001304 <_free_r+0x24>
 800135a:	6820      	ldr	r0, [r4, #0]
 800135c:	1821      	adds	r1, r4, r0
 800135e:	428a      	cmp	r2, r1
 8001360:	bf01      	itttt	eq
 8001362:	6811      	ldreq	r1, [r2, #0]
 8001364:	6852      	ldreq	r2, [r2, #4]
 8001366:	1809      	addeq	r1, r1, r0
 8001368:	6021      	streq	r1, [r4, #0]
 800136a:	6062      	str	r2, [r4, #4]
 800136c:	605c      	str	r4, [r3, #4]
 800136e:	e7c9      	b.n	8001304 <_free_r+0x24>
 8001370:	bd38      	pop	{r3, r4, r5, pc}
 8001372:	bf00      	nop
 8001374:	2000008c 	.word	0x2000008c

08001378 <_malloc_r>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	1ccd      	adds	r5, r1, #3
 800137c:	f025 0503 	bic.w	r5, r5, #3
 8001380:	3508      	adds	r5, #8
 8001382:	2d0c      	cmp	r5, #12
 8001384:	bf38      	it	cc
 8001386:	250c      	movcc	r5, #12
 8001388:	2d00      	cmp	r5, #0
 800138a:	4606      	mov	r6, r0
 800138c:	db01      	blt.n	8001392 <_malloc_r+0x1a>
 800138e:	42a9      	cmp	r1, r5
 8001390:	d903      	bls.n	800139a <_malloc_r+0x22>
 8001392:	230c      	movs	r3, #12
 8001394:	6033      	str	r3, [r6, #0]
 8001396:	2000      	movs	r0, #0
 8001398:	bd70      	pop	{r4, r5, r6, pc}
 800139a:	f000 f8f1 	bl	8001580 <__malloc_lock>
 800139e:	4a21      	ldr	r2, [pc, #132]	; (8001424 <_malloc_r+0xac>)
 80013a0:	6814      	ldr	r4, [r2, #0]
 80013a2:	4621      	mov	r1, r4
 80013a4:	b991      	cbnz	r1, 80013cc <_malloc_r+0x54>
 80013a6:	4c20      	ldr	r4, [pc, #128]	; (8001428 <_malloc_r+0xb0>)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	b91b      	cbnz	r3, 80013b4 <_malloc_r+0x3c>
 80013ac:	4630      	mov	r0, r6
 80013ae:	f000 f83d 	bl	800142c <_sbrk_r>
 80013b2:	6020      	str	r0, [r4, #0]
 80013b4:	4629      	mov	r1, r5
 80013b6:	4630      	mov	r0, r6
 80013b8:	f000 f838 	bl	800142c <_sbrk_r>
 80013bc:	1c43      	adds	r3, r0, #1
 80013be:	d124      	bne.n	800140a <_malloc_r+0x92>
 80013c0:	230c      	movs	r3, #12
 80013c2:	4630      	mov	r0, r6
 80013c4:	6033      	str	r3, [r6, #0]
 80013c6:	f000 f8dc 	bl	8001582 <__malloc_unlock>
 80013ca:	e7e4      	b.n	8001396 <_malloc_r+0x1e>
 80013cc:	680b      	ldr	r3, [r1, #0]
 80013ce:	1b5b      	subs	r3, r3, r5
 80013d0:	d418      	bmi.n	8001404 <_malloc_r+0x8c>
 80013d2:	2b0b      	cmp	r3, #11
 80013d4:	d90f      	bls.n	80013f6 <_malloc_r+0x7e>
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	18cc      	adds	r4, r1, r3
 80013da:	50cd      	str	r5, [r1, r3]
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f8d0 	bl	8001582 <__malloc_unlock>
 80013e2:	f104 000b 	add.w	r0, r4, #11
 80013e6:	1d23      	adds	r3, r4, #4
 80013e8:	f020 0007 	bic.w	r0, r0, #7
 80013ec:	1ac3      	subs	r3, r0, r3
 80013ee:	d0d3      	beq.n	8001398 <_malloc_r+0x20>
 80013f0:	425a      	negs	r2, r3
 80013f2:	50e2      	str	r2, [r4, r3]
 80013f4:	e7d0      	b.n	8001398 <_malloc_r+0x20>
 80013f6:	684b      	ldr	r3, [r1, #4]
 80013f8:	428c      	cmp	r4, r1
 80013fa:	bf16      	itet	ne
 80013fc:	6063      	strne	r3, [r4, #4]
 80013fe:	6013      	streq	r3, [r2, #0]
 8001400:	460c      	movne	r4, r1
 8001402:	e7eb      	b.n	80013dc <_malloc_r+0x64>
 8001404:	460c      	mov	r4, r1
 8001406:	6849      	ldr	r1, [r1, #4]
 8001408:	e7cc      	b.n	80013a4 <_malloc_r+0x2c>
 800140a:	1cc4      	adds	r4, r0, #3
 800140c:	f024 0403 	bic.w	r4, r4, #3
 8001410:	42a0      	cmp	r0, r4
 8001412:	d005      	beq.n	8001420 <_malloc_r+0xa8>
 8001414:	1a21      	subs	r1, r4, r0
 8001416:	4630      	mov	r0, r6
 8001418:	f000 f808 	bl	800142c <_sbrk_r>
 800141c:	3001      	adds	r0, #1
 800141e:	d0cf      	beq.n	80013c0 <_malloc_r+0x48>
 8001420:	6025      	str	r5, [r4, #0]
 8001422:	e7db      	b.n	80013dc <_malloc_r+0x64>
 8001424:	2000008c 	.word	0x2000008c
 8001428:	20000090 	.word	0x20000090

0800142c <_sbrk_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	2300      	movs	r3, #0
 8001430:	4c05      	ldr	r4, [pc, #20]	; (8001448 <_sbrk_r+0x1c>)
 8001432:	4605      	mov	r5, r0
 8001434:	4608      	mov	r0, r1
 8001436:	6023      	str	r3, [r4, #0]
 8001438:	f000 f9bc 	bl	80017b4 <_sbrk>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d102      	bne.n	8001446 <_sbrk_r+0x1a>
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	b103      	cbz	r3, 8001446 <_sbrk_r+0x1a>
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	20000144 	.word	0x20000144

0800144c <__sread>:
 800144c:	b510      	push	{r4, lr}
 800144e:	460c      	mov	r4, r1
 8001450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001454:	f000 f896 	bl	8001584 <_read_r>
 8001458:	2800      	cmp	r0, #0
 800145a:	bfab      	itete	ge
 800145c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800145e:	89a3      	ldrhlt	r3, [r4, #12]
 8001460:	181b      	addge	r3, r3, r0
 8001462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001466:	bfac      	ite	ge
 8001468:	6563      	strge	r3, [r4, #84]	; 0x54
 800146a:	81a3      	strhlt	r3, [r4, #12]
 800146c:	bd10      	pop	{r4, pc}

0800146e <__swrite>:
 800146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001472:	461f      	mov	r7, r3
 8001474:	898b      	ldrh	r3, [r1, #12]
 8001476:	4605      	mov	r5, r0
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	460c      	mov	r4, r1
 800147c:	4616      	mov	r6, r2
 800147e:	d505      	bpl.n	800148c <__swrite+0x1e>
 8001480:	2302      	movs	r3, #2
 8001482:	2200      	movs	r2, #0
 8001484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001488:	f000 f868 	bl	800155c <_lseek_r>
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	4632      	mov	r2, r6
 8001490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001494:	81a3      	strh	r3, [r4, #12]
 8001496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149a:	463b      	mov	r3, r7
 800149c:	4628      	mov	r0, r5
 800149e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014a2:	f000 b817 	b.w	80014d4 <_write_r>

080014a6 <__sseek>:
 80014a6:	b510      	push	{r4, lr}
 80014a8:	460c      	mov	r4, r1
 80014aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ae:	f000 f855 	bl	800155c <_lseek_r>
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	bf15      	itete	ne
 80014b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80014ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80014be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80014c2:	81a3      	strheq	r3, [r4, #12]
 80014c4:	bf18      	it	ne
 80014c6:	81a3      	strhne	r3, [r4, #12]
 80014c8:	bd10      	pop	{r4, pc}

080014ca <__sclose>:
 80014ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014ce:	f000 b813 	b.w	80014f8 <_close_r>
	...

080014d4 <_write_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4605      	mov	r5, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	4c05      	ldr	r4, [pc, #20]	; (80014f4 <_write_r+0x20>)
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	f000 f911 	bl	800170a <_write>
 80014e8:	1c43      	adds	r3, r0, #1
 80014ea:	d102      	bne.n	80014f2 <_write_r+0x1e>
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	b103      	cbz	r3, 80014f2 <_write_r+0x1e>
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	bd38      	pop	{r3, r4, r5, pc}
 80014f4:	20000144 	.word	0x20000144

080014f8 <_close_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	2300      	movs	r3, #0
 80014fc:	4c05      	ldr	r4, [pc, #20]	; (8001514 <_close_r+0x1c>)
 80014fe:	4605      	mov	r5, r0
 8001500:	4608      	mov	r0, r1
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	f000 f930 	bl	8001768 <_close>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_close_r+0x1a>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	b103      	cbz	r3, 8001512 <_close_r+0x1a>
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	20000144 	.word	0x20000144

08001518 <_fstat_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	2300      	movs	r3, #0
 800151c:	4c06      	ldr	r4, [pc, #24]	; (8001538 <_fstat_r+0x20>)
 800151e:	4605      	mov	r5, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	f000 f98a 	bl	800183e <_fstat>
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	d102      	bne.n	8001534 <_fstat_r+0x1c>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	b103      	cbz	r3, 8001534 <_fstat_r+0x1c>
 8001532:	602b      	str	r3, [r5, #0]
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	20000144 	.word	0x20000144

0800153c <_isatty_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	2300      	movs	r3, #0
 8001540:	4c05      	ldr	r4, [pc, #20]	; (8001558 <_isatty_r+0x1c>)
 8001542:	4605      	mov	r5, r0
 8001544:	4608      	mov	r0, r1
 8001546:	6023      	str	r3, [r4, #0]
 8001548:	f000 fadc 	bl	8001b04 <_isatty>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_isatty_r+0x1a>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	b103      	cbz	r3, 8001556 <_isatty_r+0x1a>
 8001554:	602b      	str	r3, [r5, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	20000144 	.word	0x20000144

0800155c <_lseek_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4605      	mov	r5, r0
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	2200      	movs	r2, #0
 8001566:	4c05      	ldr	r4, [pc, #20]	; (800157c <_lseek_r+0x20>)
 8001568:	6022      	str	r2, [r4, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f000 f8bb 	bl	80016e6 <_lseek>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	d102      	bne.n	800157a <_lseek_r+0x1e>
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	b103      	cbz	r3, 800157a <_lseek_r+0x1e>
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	20000144 	.word	0x20000144

08001580 <__malloc_lock>:
 8001580:	4770      	bx	lr

08001582 <__malloc_unlock>:
 8001582:	4770      	bx	lr

08001584 <_read_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4605      	mov	r5, r0
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	2200      	movs	r2, #0
 800158e:	4c05      	ldr	r4, [pc, #20]	; (80015a4 <_read_r+0x20>)
 8001590:	6022      	str	r2, [r4, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	f000 f850 	bl	8001638 <_read>
 8001598:	1c43      	adds	r3, r0, #1
 800159a:	d102      	bne.n	80015a2 <_read_r+0x1e>
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	b103      	cbz	r3, 80015a2 <_read_r+0x1e>
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	bd38      	pop	{r3, r4, r5, pc}
 80015a4:	20000144 	.word	0x20000144

080015a8 <findslot>:
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <findslot+0x2c>)
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	b118      	cbz	r0, 80015ba <findslot+0x12>
 80015b2:	6983      	ldr	r3, [r0, #24]
 80015b4:	b90b      	cbnz	r3, 80015ba <findslot+0x12>
 80015b6:	f7ff fda5 	bl	8001104 <__sinit>
 80015ba:	2c13      	cmp	r4, #19
 80015bc:	d807      	bhi.n	80015ce <findslot+0x26>
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <findslot+0x30>)
 80015c0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80015c4:	3301      	adds	r3, #1
 80015c6:	d002      	beq.n	80015ce <findslot+0x26>
 80015c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	2000      	movs	r0, #0
 80015d0:	e7fc      	b.n	80015cc <findslot+0x24>
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200000a4 	.word	0x200000a4

080015dc <checkerror>:
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	1c43      	adds	r3, r0, #1
 80015e0:	4605      	mov	r5, r0
 80015e2:	d109      	bne.n	80015f8 <checkerror+0x1c>
 80015e4:	f000 faaa 	bl	8001b3c <__errno>
 80015e8:	2413      	movs	r4, #19
 80015ea:	4606      	mov	r6, r0
 80015ec:	2700      	movs	r7, #0
 80015ee:	4620      	mov	r0, r4
 80015f0:	4639      	mov	r1, r7
 80015f2:	beab      	bkpt	0x00ab
 80015f4:	4604      	mov	r4, r0
 80015f6:	6034      	str	r4, [r6, #0]
 80015f8:	4628      	mov	r0, r5
 80015fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015fc <error>:
 80015fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fe:	4605      	mov	r5, r0
 8001600:	f000 fa9c 	bl	8001b3c <__errno>
 8001604:	2413      	movs	r4, #19
 8001606:	4606      	mov	r6, r0
 8001608:	2700      	movs	r7, #0
 800160a:	4620      	mov	r0, r4
 800160c:	4639      	mov	r1, r7
 800160e:	beab      	bkpt	0x00ab
 8001610:	4604      	mov	r4, r0
 8001612:	6034      	str	r4, [r6, #0]
 8001614:	4628      	mov	r0, r5
 8001616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001618 <_swiread>:
 8001618:	b530      	push	{r4, r5, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001620:	9203      	str	r2, [sp, #12]
 8001622:	2406      	movs	r4, #6
 8001624:	ad01      	add	r5, sp, #4
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	beab      	bkpt	0x00ab
 800162c:	4604      	mov	r4, r0
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff ffd4 	bl	80015dc <checkerror>
 8001634:	b005      	add	sp, #20
 8001636:	bd30      	pop	{r4, r5, pc}

08001638 <_read>:
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	460e      	mov	r6, r1
 800163c:	4615      	mov	r5, r2
 800163e:	f7ff ffb3 	bl	80015a8 <findslot>
 8001642:	4604      	mov	r4, r0
 8001644:	b930      	cbnz	r0, 8001654 <_read+0x1c>
 8001646:	f000 fa79 	bl	8001b3c <__errno>
 800164a:	2309      	movs	r3, #9
 800164c:	6003      	str	r3, [r0, #0]
 800164e:	f04f 30ff 	mov.w	r0, #4294967295
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	462a      	mov	r2, r5
 8001656:	4631      	mov	r1, r6
 8001658:	6800      	ldr	r0, [r0, #0]
 800165a:	f7ff ffdd 	bl	8001618 <_swiread>
 800165e:	1c43      	adds	r3, r0, #1
 8001660:	bf1f      	itttt	ne
 8001662:	6863      	ldrne	r3, [r4, #4]
 8001664:	1a28      	subne	r0, r5, r0
 8001666:	181b      	addne	r3, r3, r0
 8001668:	6063      	strne	r3, [r4, #4]
 800166a:	e7f2      	b.n	8001652 <_read+0x1a>

0800166c <_swilseek>:
 800166c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800166e:	460c      	mov	r4, r1
 8001670:	4616      	mov	r6, r2
 8001672:	f7ff ff99 	bl	80015a8 <findslot>
 8001676:	4605      	mov	r5, r0
 8001678:	b940      	cbnz	r0, 800168c <_swilseek+0x20>
 800167a:	f000 fa5f 	bl	8001b3c <__errno>
 800167e:	2309      	movs	r3, #9
 8001680:	6003      	str	r3, [r0, #0]
 8001682:	f04f 34ff 	mov.w	r4, #4294967295
 8001686:	4620      	mov	r0, r4
 8001688:	b003      	add	sp, #12
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	2e02      	cmp	r6, #2
 800168e:	d903      	bls.n	8001698 <_swilseek+0x2c>
 8001690:	f000 fa54 	bl	8001b3c <__errno>
 8001694:	2316      	movs	r3, #22
 8001696:	e7f3      	b.n	8001680 <_swilseek+0x14>
 8001698:	2e01      	cmp	r6, #1
 800169a:	d112      	bne.n	80016c2 <_swilseek+0x56>
 800169c:	6843      	ldr	r3, [r0, #4]
 800169e:	18e4      	adds	r4, r4, r3
 80016a0:	d4f6      	bmi.n	8001690 <_swilseek+0x24>
 80016a2:	682b      	ldr	r3, [r5, #0]
 80016a4:	260a      	movs	r6, #10
 80016a6:	e9cd 3400 	strd	r3, r4, [sp]
 80016aa:	466f      	mov	r7, sp
 80016ac:	4630      	mov	r0, r6
 80016ae:	4639      	mov	r1, r7
 80016b0:	beab      	bkpt	0x00ab
 80016b2:	4606      	mov	r6, r0
 80016b4:	4630      	mov	r0, r6
 80016b6:	f7ff ff91 	bl	80015dc <checkerror>
 80016ba:	2800      	cmp	r0, #0
 80016bc:	dbe1      	blt.n	8001682 <_swilseek+0x16>
 80016be:	606c      	str	r4, [r5, #4]
 80016c0:	e7e1      	b.n	8001686 <_swilseek+0x1a>
 80016c2:	2e02      	cmp	r6, #2
 80016c4:	d1ed      	bne.n	80016a2 <_swilseek+0x36>
 80016c6:	6803      	ldr	r3, [r0, #0]
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	f847 3d08 	str.w	r3, [r7, #-8]!
 80016ce:	260c      	movs	r6, #12
 80016d0:	4630      	mov	r0, r6
 80016d2:	4639      	mov	r1, r7
 80016d4:	beab      	bkpt	0x00ab
 80016d6:	4606      	mov	r6, r0
 80016d8:	4630      	mov	r0, r6
 80016da:	f7ff ff7f 	bl	80015dc <checkerror>
 80016de:	1c43      	adds	r3, r0, #1
 80016e0:	d0cf      	beq.n	8001682 <_swilseek+0x16>
 80016e2:	4404      	add	r4, r0
 80016e4:	e7dd      	b.n	80016a2 <_swilseek+0x36>

080016e6 <_lseek>:
 80016e6:	f7ff bfc1 	b.w	800166c <_swilseek>

080016ea <_swiwrite>:
 80016ea:	b530      	push	{r4, r5, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016f2:	9203      	str	r2, [sp, #12]
 80016f4:	2405      	movs	r4, #5
 80016f6:	ad01      	add	r5, sp, #4
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	beab      	bkpt	0x00ab
 80016fe:	4604      	mov	r4, r0
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ff6b 	bl	80015dc <checkerror>
 8001706:	b005      	add	sp, #20
 8001708:	bd30      	pop	{r4, r5, pc}

0800170a <_write>:
 800170a:	b570      	push	{r4, r5, r6, lr}
 800170c:	460e      	mov	r6, r1
 800170e:	4615      	mov	r5, r2
 8001710:	f7ff ff4a 	bl	80015a8 <findslot>
 8001714:	4604      	mov	r4, r0
 8001716:	b930      	cbnz	r0, 8001726 <_write+0x1c>
 8001718:	f000 fa10 	bl	8001b3c <__errno>
 800171c:	2309      	movs	r3, #9
 800171e:	6003      	str	r3, [r0, #0]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	bd70      	pop	{r4, r5, r6, pc}
 8001726:	462a      	mov	r2, r5
 8001728:	4631      	mov	r1, r6
 800172a:	6800      	ldr	r0, [r0, #0]
 800172c:	f7ff ffdd 	bl	80016ea <_swiwrite>
 8001730:	1e02      	subs	r2, r0, #0
 8001732:	dbf5      	blt.n	8001720 <_write+0x16>
 8001734:	6863      	ldr	r3, [r4, #4]
 8001736:	1aa8      	subs	r0, r5, r2
 8001738:	4403      	add	r3, r0
 800173a:	42aa      	cmp	r2, r5
 800173c:	6063      	str	r3, [r4, #4]
 800173e:	d1f1      	bne.n	8001724 <_write+0x1a>
 8001740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff bf59 	b.w	80015fc <error>

0800174a <_swiclose>:
 800174a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800174c:	ad02      	add	r5, sp, #8
 800174e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001752:	2402      	movs	r4, #2
 8001754:	4620      	mov	r0, r4
 8001756:	4629      	mov	r1, r5
 8001758:	beab      	bkpt	0x00ab
 800175a:	4604      	mov	r4, r0
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ff3d 	bl	80015dc <checkerror>
 8001762:	b003      	add	sp, #12
 8001764:	bd30      	pop	{r4, r5, pc}
	...

08001768 <_close>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	f7ff ff1c 	bl	80015a8 <findslot>
 8001770:	4604      	mov	r4, r0
 8001772:	b930      	cbnz	r0, 8001782 <_close+0x1a>
 8001774:	f000 f9e2 	bl	8001b3c <__errno>
 8001778:	2309      	movs	r3, #9
 800177a:	6003      	str	r3, [r0, #0]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	bd38      	pop	{r3, r4, r5, pc}
 8001782:	3d01      	subs	r5, #1
 8001784:	2d01      	cmp	r5, #1
 8001786:	d809      	bhi.n	800179c <_close+0x34>
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <_close+0x48>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	429a      	cmp	r2, r3
 8001790:	d104      	bne.n	800179c <_close+0x34>
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	6003      	str	r3, [r0, #0]
 8001798:	2000      	movs	r0, #0
 800179a:	e7f1      	b.n	8001780 <_close+0x18>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	f7ff ffd4 	bl	800174a <_swiclose>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1ec      	bne.n	8001780 <_close+0x18>
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	6023      	str	r3, [r4, #0]
 80017ac:	e7e8      	b.n	8001780 <_close+0x18>
 80017ae:	bf00      	nop
 80017b0:	200000a4 	.word	0x200000a4

080017b4 <_sbrk>:
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <_sbrk+0x38>)
 80017b6:	b510      	push	{r4, lr}
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	4602      	mov	r2, r0
 80017bc:	b909      	cbnz	r1, 80017c2 <_sbrk+0xe>
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <_sbrk+0x3c>)
 80017c0:	6019      	str	r1, [r3, #0]
 80017c2:	4669      	mov	r1, sp
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	4402      	add	r2, r0
 80017c8:	428a      	cmp	r2, r1
 80017ca:	d806      	bhi.n	80017da <_sbrk+0x26>
 80017cc:	4909      	ldr	r1, [pc, #36]	; (80017f4 <_sbrk+0x40>)
 80017ce:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <_sbrk+0x44>)
 80017d0:	6809      	ldr	r1, [r1, #0]
 80017d2:	42a1      	cmp	r1, r4
 80017d4:	d008      	beq.n	80017e8 <_sbrk+0x34>
 80017d6:	428a      	cmp	r2, r1
 80017d8:	d906      	bls.n	80017e8 <_sbrk+0x34>
 80017da:	f000 f9af 	bl	8001b3c <__errno>
 80017de:	230c      	movs	r3, #12
 80017e0:	6003      	str	r3, [r0, #0]
 80017e2:	f04f 30ff 	mov.w	r0, #4294967295
 80017e6:	bd10      	pop	{r4, pc}
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e7fc      	b.n	80017e6 <_sbrk+0x32>
 80017ec:	20000094 	.word	0x20000094
 80017f0:	20000148 	.word	0x20000148
 80017f4:	20000064 	.word	0x20000064
 80017f8:	cafedead 	.word	0xcafedead

080017fc <_swistat>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	460c      	mov	r4, r1
 8001800:	f7ff fed2 	bl	80015a8 <findslot>
 8001804:	4606      	mov	r6, r0
 8001806:	b930      	cbnz	r0, 8001816 <_swistat+0x1a>
 8001808:	f000 f998 	bl	8001b3c <__errno>
 800180c:	2309      	movs	r3, #9
 800180e:	6003      	str	r3, [r0, #0]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	bd70      	pop	{r4, r5, r6, pc}
 8001816:	6863      	ldr	r3, [r4, #4]
 8001818:	250c      	movs	r5, #12
 800181a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181e:	6063      	str	r3, [r4, #4]
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	6463      	str	r3, [r4, #68]	; 0x44
 8001826:	4628      	mov	r0, r5
 8001828:	4631      	mov	r1, r6
 800182a:	beab      	bkpt	0x00ab
 800182c:	4605      	mov	r5, r0
 800182e:	4628      	mov	r0, r5
 8001830:	f7ff fed4 	bl	80015dc <checkerror>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	bf1c      	itt	ne
 8001838:	6120      	strne	r0, [r4, #16]
 800183a:	2000      	movne	r0, #0
 800183c:	e7ea      	b.n	8001814 <_swistat+0x18>

0800183e <_fstat>:
 800183e:	460b      	mov	r3, r1
 8001840:	b510      	push	{r4, lr}
 8001842:	2100      	movs	r1, #0
 8001844:	4604      	mov	r4, r0
 8001846:	2258      	movs	r2, #88	; 0x58
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fa3f 	bl	8000ccc <memset>
 800184e:	4601      	mov	r1, r0
 8001850:	4620      	mov	r0, r4
 8001852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001856:	f7ff bfd1 	b.w	80017fc <_swistat>

0800185a <_stat>:
 800185a:	b538      	push	{r3, r4, r5, lr}
 800185c:	460d      	mov	r5, r1
 800185e:	4604      	mov	r4, r0
 8001860:	2258      	movs	r2, #88	; 0x58
 8001862:	2100      	movs	r1, #0
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff fa31 	bl	8000ccc <memset>
 800186a:	4620      	mov	r0, r4
 800186c:	2100      	movs	r1, #0
 800186e:	f000 f811 	bl	8001894 <_swiopen>
 8001872:	1c43      	adds	r3, r0, #1
 8001874:	4604      	mov	r4, r0
 8001876:	d00b      	beq.n	8001890 <_stat+0x36>
 8001878:	686b      	ldr	r3, [r5, #4]
 800187a:	4629      	mov	r1, r5
 800187c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001880:	606b      	str	r3, [r5, #4]
 8001882:	f7ff ffbb 	bl	80017fc <_swistat>
 8001886:	4605      	mov	r5, r0
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff ff6d 	bl	8001768 <_close>
 800188e:	462c      	mov	r4, r5
 8001890:	4620      	mov	r0, r4
 8001892:	bd38      	pop	{r3, r4, r5, pc}

08001894 <_swiopen>:
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <_swiopen+0xb0>)
 8001896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800189a:	4682      	mov	sl, r0
 800189c:	460e      	mov	r6, r1
 800189e:	2500      	movs	r5, #0
 80018a0:	4698      	mov	r8, r3
 80018a2:	b096      	sub	sp, #88	; 0x58
 80018a4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80018a8:	00ef      	lsls	r7, r5, #3
 80018aa:	1c61      	adds	r1, r4, #1
 80018ac:	d036      	beq.n	800191c <_swiopen+0x88>
 80018ae:	3501      	adds	r5, #1
 80018b0:	2d14      	cmp	r5, #20
 80018b2:	d1f7      	bne.n	80018a4 <_swiopen+0x10>
 80018b4:	f000 f942 	bl	8001b3c <__errno>
 80018b8:	2318      	movs	r3, #24
 80018ba:	f04f 34ff 	mov.w	r4, #4294967295
 80018be:	6003      	str	r3, [r0, #0]
 80018c0:	e03c      	b.n	800193c <_swiopen+0xa8>
 80018c2:	f240 6301 	movw	r3, #1537	; 0x601
 80018c6:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80018ca:	07b2      	lsls	r2, r6, #30
 80018cc:	bf48      	it	mi
 80018ce:	f044 0402 	orrmi.w	r4, r4, #2
 80018d2:	421e      	tst	r6, r3
 80018d4:	bf18      	it	ne
 80018d6:	f044 0404 	orrne.w	r4, r4, #4
 80018da:	0733      	lsls	r3, r6, #28
 80018dc:	bf48      	it	mi
 80018de:	f024 0404 	bicmi.w	r4, r4, #4
 80018e2:	4650      	mov	r0, sl
 80018e4:	bf48      	it	mi
 80018e6:	f044 0408 	orrmi.w	r4, r4, #8
 80018ea:	f8cd a000 	str.w	sl, [sp]
 80018ee:	f7fe fc3f 	bl	8000170 <strlen>
 80018f2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80018f6:	2401      	movs	r4, #1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4649      	mov	r1, r9
 80018fc:	beab      	bkpt	0x00ab
 80018fe:	4604      	mov	r4, r0
 8001900:	2c00      	cmp	r4, #0
 8001902:	db06      	blt.n	8001912 <_swiopen+0x7e>
 8001904:	2300      	movs	r3, #0
 8001906:	4447      	add	r7, r8
 8001908:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	462c      	mov	r4, r5
 8001910:	e014      	b.n	800193c <_swiopen+0xa8>
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff fe72 	bl	80015fc <error>
 8001918:	4604      	mov	r4, r0
 800191a:	e00f      	b.n	800193c <_swiopen+0xa8>
 800191c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001920:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001924:	46e9      	mov	r9, sp
 8001926:	d1cc      	bne.n	80018c2 <_swiopen+0x2e>
 8001928:	4649      	mov	r1, r9
 800192a:	4650      	mov	r0, sl
 800192c:	f7ff ff95 	bl	800185a <_stat>
 8001930:	3001      	adds	r0, #1
 8001932:	d0c6      	beq.n	80018c2 <_swiopen+0x2e>
 8001934:	f000 f902 	bl	8001b3c <__errno>
 8001938:	2311      	movs	r3, #17
 800193a:	6003      	str	r3, [r0, #0]
 800193c:	4620      	mov	r0, r4
 800193e:	b016      	add	sp, #88	; 0x58
 8001940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001944:	200000a4 	.word	0x200000a4

08001948 <_get_semihosting_exts>:
 8001948:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800194c:	4607      	mov	r7, r0
 800194e:	4688      	mov	r8, r1
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <_get_semihosting_exts+0xb0>)
 8001952:	2100      	movs	r1, #0
 8001954:	4615      	mov	r5, r2
 8001956:	f7ff ff9d 	bl	8001894 <_swiopen>
 800195a:	4604      	mov	r4, r0
 800195c:	462a      	mov	r2, r5
 800195e:	2100      	movs	r1, #0
 8001960:	4638      	mov	r0, r7
 8001962:	f7ff f9b3 	bl	8000ccc <memset>
 8001966:	1c63      	adds	r3, r4, #1
 8001968:	d015      	beq.n	8001996 <_get_semihosting_exts+0x4e>
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fe1c 	bl	80015a8 <findslot>
 8001970:	260c      	movs	r6, #12
 8001972:	4681      	mov	r9, r0
 8001974:	4630      	mov	r0, r6
 8001976:	4649      	mov	r1, r9
 8001978:	beab      	bkpt	0x00ab
 800197a:	4606      	mov	r6, r0
 800197c:	4630      	mov	r0, r6
 800197e:	f7ff fe2d 	bl	80015dc <checkerror>
 8001982:	2803      	cmp	r0, #3
 8001984:	dd02      	ble.n	800198c <_get_semihosting_exts+0x44>
 8001986:	3803      	subs	r0, #3
 8001988:	42a8      	cmp	r0, r5
 800198a:	dc08      	bgt.n	800199e <_get_semihosting_exts+0x56>
 800198c:	4620      	mov	r0, r4
 800198e:	f7ff feeb 	bl	8001768 <_close>
 8001992:	f04f 34ff 	mov.w	r4, #4294967295
 8001996:	4620      	mov	r0, r4
 8001998:	b003      	add	sp, #12
 800199a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800199e:	2204      	movs	r2, #4
 80019a0:	4620      	mov	r0, r4
 80019a2:	eb0d 0102 	add.w	r1, sp, r2
 80019a6:	f7ff fe47 	bl	8001638 <_read>
 80019aa:	2803      	cmp	r0, #3
 80019ac:	ddee      	ble.n	800198c <_get_semihosting_exts+0x44>
 80019ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019b2:	2b53      	cmp	r3, #83	; 0x53
 80019b4:	d1ea      	bne.n	800198c <_get_semihosting_exts+0x44>
 80019b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80019ba:	2b48      	cmp	r3, #72	; 0x48
 80019bc:	d1e6      	bne.n	800198c <_get_semihosting_exts+0x44>
 80019be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80019c2:	2b46      	cmp	r3, #70	; 0x46
 80019c4:	d1e2      	bne.n	800198c <_get_semihosting_exts+0x44>
 80019c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019ca:	2b42      	cmp	r3, #66	; 0x42
 80019cc:	d1de      	bne.n	800198c <_get_semihosting_exts+0x44>
 80019ce:	2201      	movs	r2, #1
 80019d0:	4641      	mov	r1, r8
 80019d2:	4620      	mov	r0, r4
 80019d4:	f7ff fe4a 	bl	800166c <_swilseek>
 80019d8:	2800      	cmp	r0, #0
 80019da:	dbd7      	blt.n	800198c <_get_semihosting_exts+0x44>
 80019dc:	462a      	mov	r2, r5
 80019de:	4639      	mov	r1, r7
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fe29 	bl	8001638 <_read>
 80019e6:	4605      	mov	r5, r0
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff febd 	bl	8001768 <_close>
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff fdf4 	bl	80015dc <checkerror>
 80019f4:	4604      	mov	r4, r0
 80019f6:	e7ce      	b.n	8001996 <_get_semihosting_exts+0x4e>
 80019f8:	08001bdc 	.word	0x08001bdc

080019fc <initialise_semihosting_exts>:
 80019fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019fe:	2100      	movs	r1, #0
 8001a00:	2201      	movs	r2, #1
 8001a02:	4d09      	ldr	r5, [pc, #36]	; (8001a28 <initialise_semihosting_exts+0x2c>)
 8001a04:	4c09      	ldr	r4, [pc, #36]	; (8001a2c <initialise_semihosting_exts+0x30>)
 8001a06:	a801      	add	r0, sp, #4
 8001a08:	6029      	str	r1, [r5, #0]
 8001a0a:	6022      	str	r2, [r4, #0]
 8001a0c:	f7ff ff9c 	bl	8001948 <_get_semihosting_exts>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	dd07      	ble.n	8001a24 <initialise_semihosting_exts+0x28>
 8001a14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001a18:	f003 0201 	and.w	r2, r3, #1
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	602a      	str	r2, [r5, #0]
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	b003      	add	sp, #12
 8001a26:	bd30      	pop	{r4, r5, pc}
 8001a28:	20000068 	.word	0x20000068
 8001a2c:	2000006c 	.word	0x2000006c

08001a30 <_has_ext_stdout_stderr>:
 8001a30:	b510      	push	{r4, lr}
 8001a32:	4c04      	ldr	r4, [pc, #16]	; (8001a44 <_has_ext_stdout_stderr+0x14>)
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	da01      	bge.n	8001a3e <_has_ext_stdout_stderr+0xe>
 8001a3a:	f7ff ffdf 	bl	80019fc <initialise_semihosting_exts>
 8001a3e:	6820      	ldr	r0, [r4, #0]
 8001a40:	bd10      	pop	{r4, pc}
 8001a42:	bf00      	nop
 8001a44:	2000006c 	.word	0x2000006c

08001a48 <initialise_monitor_handles>:
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	2400      	movs	r4, #0
 8001a50:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001b00 <initialise_monitor_handles+0xb8>
 8001a54:	b085      	sub	sp, #20
 8001a56:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a5a:	f10d 0804 	add.w	r8, sp, #4
 8001a5e:	9303      	str	r3, [sp, #12]
 8001a60:	2501      	movs	r5, #1
 8001a62:	9402      	str	r4, [sp, #8]
 8001a64:	4628      	mov	r0, r5
 8001a66:	4641      	mov	r1, r8
 8001a68:	beab      	bkpt	0x00ab
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <initialise_monitor_handles+0xa8>)
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	4614      	mov	r4, r2
 8001a76:	4e1f      	ldr	r6, [pc, #124]	; (8001af4 <initialise_monitor_handles+0xac>)
 8001a78:	6035      	str	r5, [r6, #0]
 8001a7a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2b14      	cmp	r3, #20
 8001a82:	d1fa      	bne.n	8001a7a <initialise_monitor_handles+0x32>
 8001a84:	f7ff ffd4 	bl	8001a30 <_has_ext_stdout_stderr>
 8001a88:	4d1b      	ldr	r5, [pc, #108]	; (8001af8 <initialise_monitor_handles+0xb0>)
 8001a8a:	b1d0      	cbz	r0, 8001ac2 <initialise_monitor_handles+0x7a>
 8001a8c:	f04f 0a03 	mov.w	sl, #3
 8001a90:	2304      	movs	r3, #4
 8001a92:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a96:	2701      	movs	r7, #1
 8001a98:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	4638      	mov	r0, r7
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	beab      	bkpt	0x00ab
 8001aa4:	4683      	mov	fp, r0
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <initialise_monitor_handles+0xb4>)
 8001aa8:	f8cd 9004 	str.w	r9, [sp, #4]
 8001aac:	f8c3 b000 	str.w	fp, [r3]
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	f8cd a00c 	str.w	sl, [sp, #12]
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	4638      	mov	r0, r7
 8001aba:	4641      	mov	r1, r8
 8001abc:	beab      	bkpt	0x00ab
 8001abe:	4607      	mov	r7, r0
 8001ac0:	602f      	str	r7, [r5, #0]
 8001ac2:	682b      	ldr	r3, [r5, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	bf02      	ittt	eq
 8001ac8:	4b0c      	ldreq	r3, [pc, #48]	; (8001afc <initialise_monitor_handles+0xb4>)
 8001aca:	681b      	ldreq	r3, [r3, #0]
 8001acc:	602b      	streq	r3, [r5, #0]
 8001ace:	6833      	ldr	r3, [r6, #0]
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	6023      	str	r3, [r4, #0]
 8001ad4:	6066      	str	r6, [r4, #4]
 8001ad6:	f7ff ffab 	bl	8001a30 <_has_ext_stdout_stderr>
 8001ada:	b130      	cbz	r0, 8001aea <initialise_monitor_handles+0xa2>
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <initialise_monitor_handles+0xb4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001aea:	b005      	add	sp, #20
 8001aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001af0:	200000a4 	.word	0x200000a4
 8001af4:	2000009c 	.word	0x2000009c
 8001af8:	20000098 	.word	0x20000098
 8001afc:	200000a0 	.word	0x200000a0
 8001b00:	08001bf2 	.word	0x08001bf2

08001b04 <_isatty>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	f7ff fd4f 	bl	80015a8 <findslot>
 8001b0a:	2509      	movs	r5, #9
 8001b0c:	4604      	mov	r4, r0
 8001b0e:	b920      	cbnz	r0, 8001b1a <_isatty+0x16>
 8001b10:	f000 f814 	bl	8001b3c <__errno>
 8001b14:	6005      	str	r5, [r0, #0]
 8001b16:	4620      	mov	r0, r4
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	beab      	bkpt	0x00ab
 8001b20:	4604      	mov	r4, r0
 8001b22:	2c01      	cmp	r4, #1
 8001b24:	d0f7      	beq.n	8001b16 <_isatty+0x12>
 8001b26:	f000 f809 	bl	8001b3c <__errno>
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	2513      	movs	r5, #19
 8001b30:	4628      	mov	r0, r5
 8001b32:	4621      	mov	r1, r4
 8001b34:	beab      	bkpt	0x00ab
 8001b36:	4605      	mov	r5, r0
 8001b38:	6035      	str	r5, [r6, #0]
 8001b3a:	e7ec      	b.n	8001b16 <_isatty+0x12>

08001b3c <__errno>:
 8001b3c:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <__errno+0x8>)
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <_init>:
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	bf00      	nop
 8001b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4e:	bc08      	pop	{r3}
 8001b50:	469e      	mov	lr, r3
 8001b52:	4770      	bx	lr

08001b54 <_fini>:
 8001b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b56:	bf00      	nop
 8001b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b5a:	bc08      	pop	{r3}
 8001b5c:	469e      	mov	lr, r3
 8001b5e:	4770      	bx	lr


stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000904  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a34  08000a34  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a34  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000024  08000a60  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000a60  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000180c  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000050c  00000000  00000000  00021859  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00021d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00021ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000028cc  00000000  00000000  00022000  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001360  00000000  00000000  000248cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a29e  00000000  00000000  00025c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002feca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000508  00000000  00000000  0002ff48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a1c 	.word	0x08000a1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08000a1c 	.word	0x08000a1c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <I2C_GPIOInits>:
void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

void I2C_GPIOInits(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 8000186:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <I2C_GPIOInits+0x3c>)
 8000188:	603b      	str	r3, [r7, #0]

	// SCL -> B6
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 800018a:	2301      	movs	r3, #1
 800018c:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 800018e:	2303      	movs	r3, #3
 8000190:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000192:	2306      	movs	r3, #6
 8000194:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 8000196:	463b      	mov	r3, r7
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f925 	bl	80003e8 <GPIO_Init>

	// SDA -> B7
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 800019e:	2301      	movs	r3, #1
 80001a0:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001a2:	2303      	movs	r3, #3
 80001a4:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001a6:	2307      	movs	r3, #7
 80001a8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001aa:	463b      	mov	r3, r7
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f91b 	bl	80003e8 <GPIO_Init>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00

080001c0 <I2C_Inits>:

void I2C_Inits(void){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx= I2C1;
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <I2C_Inits+0x2c>)
 80001c6:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <I2C_Inits+0x30>)
 80001c8:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <I2C_Inits+0x2c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61; // This doesn't matter in this application bc MCU is acting like master
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <I2C_Inits+0x2c>)
 80001d2:	2261      	movs	r2, #97	; 0x61
 80001d4:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTYCLYCLE_2; // Not used
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <I2C_Inits+0x2c>)
 80001d8:	2200      	movs	r2, #0
 80001da:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_CLK_SPEED_SM; // Standard mode
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <I2C_Inits+0x2c>)
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <I2C_Inits+0x34>)
 80001e0:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <I2C_Inits+0x2c>)
 80001e4:	f000 fa98 	bl	8000718 <I2C_Init>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000040 	.word	0x20000040
 80001f0:	40005400 	.word	0x40005400
 80001f4:	000186a0 	.word	0x000186a0

080001f8 <main>:
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;

	GPIO_Init(&gpioBtn);
}

int main (void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	// Initialize GPIOs a IC2 pins
	I2C_GPIOInits();
 80001fc:	f7ff ffc0 	bl	8000180 <I2C_GPIOInits>

	// Configure I2C
	I2C_Inits();
 8000200:	f7ff ffde 	bl	80001c0 <I2C_Inits>

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000204:	2101      	movs	r1, #1
 8000206:	4809      	ldr	r0, [pc, #36]	; (800022c <main+0x34>)
 8000208:	f000 fbad 	bl	8000966 <I2C_PeripheralControl>

	//Configure ACK
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <main+0x34>)
 8000210:	f000 fbc4 	bl	800099c <I2C_ManageAcking>

	I2C_MasterSendData(&I2C1Handle,some_data,strlen((char*)some_data),SLAVE_ADDR);
 8000214:	4806      	ldr	r0, [pc, #24]	; (8000230 <main+0x38>)
 8000216:	f7ff ffab 	bl	8000170 <strlen>
 800021a:	4603      	mov	r3, r0
 800021c:	b2da      	uxtb	r2, r3
 800021e:	2368      	movs	r3, #104	; 0x68
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <main+0x38>)
 8000222:	4804      	ldr	r0, [pc, #16]	; (8000234 <main+0x3c>)
 8000224:	f000 fb39 	bl	800089a <I2C_MasterSendData>

	while (1);
 8000228:	e7fe      	b.n	8000228 <main+0x30>
 800022a:	bf00      	nop
 800022c:	40005400 	.word	0x40005400
 8000230:	20000000 	.word	0x20000000
 8000234:	20000040 	.word	0x20000040

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0e      	ldr	r2, [pc, #56]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0b      	ldr	r4, [pc, #44]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000262:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 fbb5 	bl	80009d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffc5 	bl	80001f8 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800027c:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 8000280:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000284:	2000004c 	.word	0x2000004c

08000288 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC1_2_IRQHandler>
	...

0800028c <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d148      	bne.n	8000330 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <GPIO_PeriClkCtrl+0x140>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 80002a6:	4b4a      	ldr	r3, [pc, #296]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a49      	ldr	r2, [pc, #292]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 80002b2:	e085      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a47      	ldr	r2, [pc, #284]	; (80003d4 <GPIO_PeriClkCtrl+0x148>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d106      	bne.n	80002ca <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80002bc:	4b44      	ldr	r3, [pc, #272]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a43      	ldr	r2, [pc, #268]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
}
 80002c8:	e07a      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a42      	ldr	r2, [pc, #264]	; (80003d8 <GPIO_PeriClkCtrl+0x14c>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80002d2:	4b3f      	ldr	r3, [pc, #252]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a3e      	ldr	r2, [pc, #248]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002d8:	f043 0310 	orr.w	r3, r3, #16
 80002dc:	6193      	str	r3, [r2, #24]
}
 80002de:	e06f      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <GPIO_PeriClkCtrl+0x150>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80002e8:	4b39      	ldr	r3, [pc, #228]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a38      	ldr	r2, [pc, #224]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6193      	str	r3, [r2, #24]
}
 80002f4:	e064      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a39      	ldr	r2, [pc, #228]	; (80003e0 <GPIO_PeriClkCtrl+0x154>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	4a33      	ldr	r2, [pc, #204]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000308:	6193      	str	r3, [r2, #24]
}
 800030a:	e059      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a35      	ldr	r2, [pc, #212]	; (80003e4 <GPIO_PeriClkCtrl+0x158>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000314:	4b2e      	ldr	r3, [pc, #184]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 800031a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800031e:	6193      	str	r3, [r2, #24]
}
 8000320:	e04e      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a2a      	ldr	r2, [pc, #168]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032c:	6193      	str	r3, [r2, #24]
}
 800032e:	e047      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a26      	ldr	r2, [pc, #152]	; (80003cc <GPIO_PeriClkCtrl+0x140>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 800033e:	f023 0304 	bic.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
}
 8000344:	e03c      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a22      	ldr	r2, [pc, #136]	; (80003d4 <GPIO_PeriClkCtrl+0x148>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 800034e:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a1f      	ldr	r2, [pc, #124]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000354:	f023 0308 	bic.w	r3, r3, #8
 8000358:	6193      	str	r3, [r2, #24]
}
 800035a:	e031      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a1e      	ldr	r2, [pc, #120]	; (80003d8 <GPIO_PeriClkCtrl+0x14c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000364:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a19      	ldr	r2, [pc, #100]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 800036a:	f023 0310 	bic.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
}
 8000370:	e026      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a19      	ldr	r2, [pc, #100]	; (80003dc <GPIO_PeriClkCtrl+0x150>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 800037a:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000380:	f023 0320 	bic.w	r3, r3, #32
 8000384:	6193      	str	r3, [r2, #24]
}
 8000386:	e01b      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <GPIO_PeriClkCtrl+0x154>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 8000396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800039a:	6193      	str	r3, [r2, #24]
}
 800039c:	e010      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <GPIO_PeriClkCtrl+0x158>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80003ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003b0:	6193      	str	r3, [r2, #24]
}
 80003b2:	e005      	b.n	80003c0 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <GPIO_PeriClkCtrl+0x144>)
 80003ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003be:	6193      	str	r3, [r2, #24]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40010800 	.word	0x40010800
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010c00 	.word	0x40010c00
 80003d8:	40011000 	.word	0x40011000
 80003dc:	40011400 	.word	0x40011400
 80003e0:	40011800 	.word	0x40011800
 80003e4:	40011c00 	.word	0x40011c00

080003e8 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08c      	sub	sp, #48	; 0x30
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2101      	movs	r1, #1
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff48 	bl	800028c <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	2b07      	cmp	r3, #7
 800040a:	d84b      	bhi.n	80004a4 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	795b      	ldrb	r3, [r3, #5]
 8000416:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	799b      	ldrb	r3, [r3, #6]
 800041c:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 800041e:	7dfb      	ldrb	r3, [r7, #23]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 8000424:	7dfb      	ldrb	r3, [r7, #23]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	b2db      	uxtb	r3, r3
 800042a:	3302      	adds	r3, #2
 800042c:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 800042e:	7d3b      	ldrb	r3, [r7, #20]
 8000430:	2203      	movs	r2, #3
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 8000438:	7cfb      	ldrb	r3, [r7, #19]
 800043a:	2203      	movs	r2, #3
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 8000442:	7dba      	ldrb	r2, [r7, #22]
 8000444:	7d3b      	ldrb	r3, [r7, #20]
 8000446:	fa02 f303 	lsl.w	r3, r2, r3
 800044a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6819      	ldr	r1, [r3, #0]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	43da      	mvns	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800046a:	430a      	orrs	r2, r1
 800046c:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000472:	7d7a      	ldrb	r2, [r7, #21]
 8000474:	7cfb      	ldrb	r3, [r7, #19]
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6819      	ldr	r1, [r3, #0]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	43da      	mvns	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	400a      	ands	r2, r1
 800048c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800049a:	430a      	orrs	r2, r1
 800049c:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80004a2:	e058      	b.n	8000556 <GPIO_Init+0x16e>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	3b08      	subs	r3, #8
 80004aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	799b      	ldrb	r3, [r3, #6]
 80004ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 80004be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 80004c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	3302      	adds	r3, #2
 80004d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 80004d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004da:	2203      	movs	r2, #3
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 80004e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004e8:	2203      	movs	r2, #3
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	43db      	mvns	r3, r3
 80004f0:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 80004f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80004f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6859      	ldr	r1, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	69fa      	ldr	r2, [r7, #28]
 800050c:	400a      	ands	r2, r1
 800050e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6859      	ldr	r1, [r3, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051c:	430a      	orrs	r2, r1
 800051e:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000524:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000528:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800052c:	fa02 f303 	lsl.w	r3, r2, r3
 8000530:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6859      	ldr	r1, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	400a      	ands	r2, r1
 8000540:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6859      	ldr	r1, [r3, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800054e:	430a      	orrs	r2, r1
 8000550:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2202      	movs	r2, #2
 800055a:	715a      	strb	r2, [r3, #5]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2203      	movs	r2, #3
 8000560:	715a      	strb	r2, [r3, #5]

	}
}
 8000562:	bf00      	nop
 8000564:	3730      	adds	r7, #48	; 0x30
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <I2C_GenerateStartCondition>:
 * @brief			This functions generates the start condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]

}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <I2C_ExecuteAddressPhase>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // Set 0 to write
 800059a:	78fb      	ldrb	r3, [r7, #3]
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80005a2:	78fa      	ldrb	r2, [r7, #3]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	611a      	str	r2, [r3, #16]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <I2C_ClearAddrFlag>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ClearAddrFlag(I2C_RegDef_t *pI2Cx){
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]

	uint32_t dummyRead = pI2Cx->SR1;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	60fb      	str	r3, [r7, #12]
	(void) dummyRead;

}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <I2C_GenerateStopCondition>:
 * @brief			This functions generates the stop condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]

}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <I2C_PeriClkCtrl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeriClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d115      	bne.n	800062e <I2C_PeriClkCtrl+0x3e>
		if (pI2Cx == I2C1) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <I2C_PeriClkCtrl+0x74>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <I2C_PeriClkCtrl+0x28>
			I2C1_PCLK_EN();
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 8000610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000614:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		}
	}
}
 8000616:	e01f      	b.n	8000658 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <I2C_PeriClkCtrl+0x7c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d11b      	bne.n	8000658 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_EN();
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	4a10      	ldr	r2, [pc, #64]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 8000626:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800062a:	61d3      	str	r3, [r2, #28]
}
 800062c:	e014      	b.n	8000658 <I2C_PeriClkCtrl+0x68>
		if (pI2Cx == I2C1) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <I2C_PeriClkCtrl+0x74>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <I2C_PeriClkCtrl+0x54>
			I2C1_PCLK_DI();
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 800063c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000640:	61d3      	str	r3, [r2, #28]
}
 8000642:	e009      	b.n	8000658 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <I2C_PeriClkCtrl+0x7c>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d105      	bne.n	8000658 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_DI();
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a05      	ldr	r2, [pc, #20]	; (8000668 <I2C_PeriClkCtrl+0x78>)
 8000652:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000656:	61d3      	str	r3, [r2, #28]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	40005800 	.word	0x40005800

08000670 <RCC_GetPCLK1Value>:
 * @brief			This functions calculates the frequency of the APB1 clock
 * @param [in]		None
 * @return			Frequency of the clock
 * @note 			None
 */
uint32_t RCC_GetPCLK1Value (void){
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
	uint8_t clksrc, temp, ahb1_prescaler, apb1_prescaler;

	/* System clock: Defined on the register CFGR of RCC
	 * Move the bits two positions to the right so they a in the position 0 and 1.
	 * Then mask and get the value */
	clksrc = (RCC ->CFGR >> 2) & 0x3;
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <RCC_GetPCLK1Value+0x94>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	089b      	lsrs	r3, r3, #2
 800067c:	b2db      	uxtb	r3, r3
 800067e:	f003 0303 	and.w	r3, r3, #3
 8000682:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0){
 8000684:	7a7b      	ldrb	r3, [r7, #9]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <RCC_GetPCLK1Value+0x98>)
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e004      	b.n	800069a <RCC_GetPCLK1Value+0x2a>
	} else if (clksrc == 1){
 8000690:	7a7b      	ldrb	r3, [r7, #9]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d101      	bne.n	800069a <RCC_GetPCLK1Value+0x2a>
		sysclk = 8000000;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <RCC_GetPCLK1Value+0x9c>)
 8000698:	60fb      	str	r3, [r7, #12]
	}

	// AHB Prescaler: Defined on register CFGR
	temp = (RCC ->CFGR >> 4) & 0xF;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <RCC_GetPCLK1Value+0x94>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f003 030f 	and.w	r3, r3, #15
 80006a6:	723b      	strb	r3, [r7, #8]

	if (temp < 8){
 80006a8:	7a3b      	ldrb	r3, [r7, #8]
 80006aa:	2b07      	cmp	r3, #7
 80006ac:	d802      	bhi.n	80006b4 <RCC_GetPCLK1Value+0x44>
		ahb1_prescaler = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	72fb      	strb	r3, [r7, #11]
 80006b2:	e005      	b.n	80006c0 <RCC_GetPCLK1Value+0x50>
	} else {
		ahb1_prescaler = AHB1_Prescaler[temp-8];
 80006b4:	7a3b      	ldrb	r3, [r7, #8]
 80006b6:	3b08      	subs	r3, #8
 80006b8:	4a15      	ldr	r2, [pc, #84]	; (8000710 <RCC_GetPCLK1Value+0xa0>)
 80006ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006be:	72fb      	strb	r3, [r7, #11]
		/* Example: temp = 9 -> 1001 -> [1] -> 9-8 */
	}

	// APB1 Prescaler
	temp = (RCC ->CFGR >> 8) & 0x7;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <RCC_GetPCLK1Value+0x94>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	723b      	strb	r3, [r7, #8]

	if (temp < 4){
 80006ce:	7a3b      	ldrb	r3, [r7, #8]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d802      	bhi.n	80006da <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	72bb      	strb	r3, [r7, #10]
 80006d8:	e005      	b.n	80006e6 <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = APB1_Prescaler[temp-4];
 80006da:	7a3b      	ldrb	r3, [r7, #8]
 80006dc:	3b04      	subs	r3, #4
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <RCC_GetPCLK1Value+0xa4>)
 80006e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (sysclk/ahb1_prescaler)/apb1_prescaler;
 80006e6:	7afb      	ldrb	r3, [r7, #11]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80006ee:	7abb      	ldrb	r3, [r7, #10]
 80006f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f4:	607b      	str	r3, [r7, #4]

	return pclk1;
 80006f6:	687b      	ldr	r3, [r7, #4]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	00f42400 	.word	0x00f42400
 800070c:	007a1200 	.word	0x007a1200
 8000710:	2000000c 	.word	0x2000000c
 8000714:	2000001c 	.word	0x2000001c

08000718 <I2C_Init>:
 * @brief			This functions initializes a given I2C
 * @param [in]		Base Address of the I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_Init(I2C_Handle_t *pI2CxHandle){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2C peripheral
	I2C_PeriClkCtrl(pI2CxHandle->pI2Cx, ENABLE);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff60 	bl	80005f0 <I2C_PeriClkCtrl>

	// Configuration of ACK bit
	temp |= (pI2CxHandle->I2C_Config.I2C_ACKControl << 10);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7a5b      	ldrb	r3, [r3, #9]
 8000734:	029b      	lsls	r3, r3, #10
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4313      	orrs	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->CR1 = temp;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	601a      	str	r2, [r3, #0]

	// Configuration of the FREQ
	temp = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
	temp |= RCC_GetPCLK1Value()/ 1000000U;
 800074a:	f7ff ff91 	bl	8000670 <RCC_GetPCLK1Value>
 800074e:	4602      	mov	r2, r0
 8000750:	4b46      	ldr	r3, [pc, #280]	; (800086c <I2C_Init+0x154>)
 8000752:	fba3 2302 	umull	r2, r3, r3, r2
 8000756:	0c9b      	lsrs	r3, r3, #18
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->CR2 = (temp & 0x3F); // To mask the rest of the bits
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000768:	605a      	str	r2, [r3, #4]

	// Configuration of the slave address
	temp |= (pI2CxHandle->I2C_Config.I2C_DeviceAddress << 1);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	7a1b      	ldrb	r3, [r3, #8]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	461a      	mov	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4313      	orrs	r3, r2
 8000776:	60fb      	str	r3, [r7, #12]
	temp |= (1 << 14); // Bit 14 must be 1 according to the manual
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->OAR1 = temp;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	817b      	strh	r3, [r7, #10]
	temp = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4a36      	ldr	r2, [pc, #216]	; (8000870 <I2C_Init+0x158>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d80f      	bhi.n	80007ba <I2C_Init+0xa2>
		// Standard mode
		ccr_value = RCC_GetPCLK1Value()/(2*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 800079a:	f7ff ff69 	bl	8000670 <RCC_GetPCLK1Value>
 800079e:	4602      	mov	r2, r0
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007aa:	817b      	strh	r3, [r7, #10]
		temp |= (ccr_value & 0xFFF);
 80007ac:	897b      	ldrh	r3, [r7, #10]
 80007ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	e02d      	b.n	8000816 <I2C_Init+0xfe>
	} else{
		// Fast mode
		temp |= (1 << 15);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c0:	60fb      	str	r3, [r7, #12]
		temp |= (pI2CxHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	895b      	ldrh	r3, [r3, #10]
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	461a      	mov	r2, r3
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

		if (pI2CxHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTYCLYCLE_2){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	895b      	ldrh	r3, [r3, #10]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10b      	bne.n	80007f0 <I2C_Init+0xd8>
			ccr_value = RCC_GetPCLK1Value()/(3*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80007d8:	f7ff ff4a 	bl	8000670 <RCC_GetPCLK1Value>
 80007dc:	4601      	mov	r1, r0
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	4413      	add	r3, r2
 80007e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80007ec:	817b      	strh	r3, [r7, #10]
 80007ee:	e00c      	b.n	800080a <I2C_Init+0xf2>
		} else {
			ccr_value = RCC_GetPCLK1Value()/(25*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80007f0:	f7ff ff3e 	bl	8000670 <RCC_GetPCLK1Value>
 80007f4:	4601      	mov	r1, r0
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	4413      	add	r3, r2
 8000800:	009a      	lsls	r2, r3, #2
 8000802:	4413      	add	r3, r2
 8000804:	fbb1 f3f3 	udiv	r3, r1, r3
 8000808:	817b      	strh	r3, [r7, #10]
		}
		temp |= (ccr_value & 0xFFF);
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4313      	orrs	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->CCR = temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	61da      	str	r2, [r3, #28]

	// TRISE configuration

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <I2C_Init+0x158>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d809      	bhi.n	800083c <I2C_Init+0x124>
		// Standard mode

		temp = (RCC_GetPCLK1Value()/ 1000000U) + 1; // This formula comes from the reference manual
 8000828:	f7ff ff22 	bl	8000670 <RCC_GetPCLK1Value>
 800082c:	4602      	mov	r2, r0
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <I2C_Init+0x154>)
 8000830:	fba3 2302 	umull	r2, r3, r3, r2
 8000834:	0c9b      	lsrs	r3, r3, #18
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	e00c      	b.n	8000856 <I2C_Init+0x13e>

	} else {
		// Fast mode
		temp = (RCC_GetPCLK1Value()*300/ 1000000U) + 1;
 800083c:	f7ff ff18 	bl	8000670 <RCC_GetPCLK1Value>
 8000840:	4602      	mov	r2, r0
 8000842:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000846:	fb03 f302 	mul.w	r3, r3, r2
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <I2C_Init+0x154>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	0c9b      	lsrs	r3, r3, #18
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->TRISE = (temp & 0x3F);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000860:	621a      	str	r2, [r3, #32]
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	431bde83 	.word	0x431bde83
 8000870:	000186a0 	.word	0x000186a0

08000874 <I2C_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	695a      	ldr	r2, [r3, #20]
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	4013      	ands	r3, r2
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <I2C_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit is one in that register
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET; // The programs loops in this state until it changes and the flag is set
 800088e:	2300      	movs	r3, #0
 }
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <I2C_MasterSendData>:
 * @param [in]		Length
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CxHandle, uint8_t *pTxBuffer, uint8_t length, uint8_t SlaveAddr){
 800089a:	b580      	push	{r7, lr}
 800089c:	b084      	sub	sp, #16
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	4611      	mov	r1, r2
 80008a6:	461a      	mov	r2, r3
 80008a8:	460b      	mov	r3, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]

	// Generate start condition
	I2C_GenerateStartCondition(pI2CxHandle->pI2Cx);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe58 	bl	800056a <I2C_GenerateStartCondition>

	// Confirm that the START generation is completed by checking the SB flag in the in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_SB_FLAG)));
 80008ba:	bf00      	nop
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ffd6 	bl	8000874 <I2C_GetFlagStatus>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f6      	beq.n	80008bc <I2C_MasterSendData+0x22>

	// Send the address of the slave with the R/NW bit
	I2C_ExecuteAddressPhase(pI2CxHandle->pI2Cx, SlaveAddr);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	4611      	mov	r1, r2
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe56 	bl	8000588 <I2C_ExecuteAddressPhase>

	// Confirm that address phase is completed by checking the ADDR flag in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_ADDR_FLAG)));
 80008dc:	bf00      	nop
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2102      	movs	r1, #2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffc5 	bl	8000874 <I2C_GetFlagStatus>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f6      	beq.n	80008de <I2C_MasterSendData+0x44>

	// Clear ADDR flag
	I2C_ClearAddrFlag(pI2CxHandle->pI2Cx);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe5c 	bl	80005b2 <I2C_ClearAddrFlag>

	// Send data until length = 0
	while (length > 0){
 80008fa:	e014      	b.n	8000926 <I2C_MasterSendData+0x8c>
		while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_TXE_FLAG)));
 80008fc:	bf00      	nop
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ffb5 	bl	8000874 <I2C_GetFlagStatus>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f6      	beq.n	80008fe <I2C_MasterSendData+0x64>
		pI2CxHandle->pI2Cx->DR = *pTxBuffer;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	611a      	str	r2, [r3, #16]
		pTxBuffer ++;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
		length--;
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	3b01      	subs	r3, #1
 8000924:	71fb      	strb	r3, [r7, #7]
	while (length > 0){
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1e7      	bne.n	80008fc <I2C_MasterSendData+0x62>
	}

	// When length = 0, Wait for TXE = 1 and BFT = 1 before generating the STOP condition
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_TXE_FLAG)));
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff9d 	bl	8000874 <I2C_GetFlagStatus>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f6      	beq.n	800092e <I2C_MasterSendData+0x94>
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_BTF_FLAG)));
 8000940:	bf00      	nop
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff93 	bl	8000874 <I2C_GetFlagStatus>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f6      	beq.n	8000942 <I2C_MasterSendData+0xa8>

	// Generate STOP condition
	I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe39 	bl	80005d0 <I2C_GenerateStopCondition>

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <I2C_PeripheralControl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d106      	bne.n	8000986 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f043 0201 	orr.w	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000984:	e005      	b.n	8000992 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 0201 	bic.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <I2C_ManageAcking>:


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d106      	bne.n	80009bc <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80009ba:	e005      	b.n	80009c8 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	601a      	str	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <__libc_init_array>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	2500      	movs	r5, #0
 80009d8:	4e0c      	ldr	r6, [pc, #48]	; (8000a0c <__libc_init_array+0x38>)
 80009da:	4c0d      	ldr	r4, [pc, #52]	; (8000a10 <__libc_init_array+0x3c>)
 80009dc:	1ba4      	subs	r4, r4, r6
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	42a5      	cmp	r5, r4
 80009e2:	d109      	bne.n	80009f8 <__libc_init_array+0x24>
 80009e4:	f000 f81a 	bl	8000a1c <_init>
 80009e8:	2500      	movs	r5, #0
 80009ea:	4e0a      	ldr	r6, [pc, #40]	; (8000a14 <__libc_init_array+0x40>)
 80009ec:	4c0a      	ldr	r4, [pc, #40]	; (8000a18 <__libc_init_array+0x44>)
 80009ee:	1ba4      	subs	r4, r4, r6
 80009f0:	10a4      	asrs	r4, r4, #2
 80009f2:	42a5      	cmp	r5, r4
 80009f4:	d105      	bne.n	8000a02 <__libc_init_array+0x2e>
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009fc:	4798      	blx	r3
 80009fe:	3501      	adds	r5, #1
 8000a00:	e7ee      	b.n	80009e0 <__libc_init_array+0xc>
 8000a02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a06:	4798      	blx	r3
 8000a08:	3501      	adds	r5, #1
 8000a0a:	e7f2      	b.n	80009f2 <__libc_init_array+0x1e>
 8000a0c:	08000a34 	.word	0x08000a34
 8000a10:	08000a34 	.word	0x08000a34
 8000a14:	08000a34 	.word	0x08000a34
 8000a18:	08000a38 	.word	0x08000a38

08000a1c <_init>:
 8000a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1e:	bf00      	nop
 8000a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a22:	bc08      	pop	{r3}
 8000a24:	469e      	mov	lr, r3
 8000a26:	4770      	bx	lr

08000a28 <_fini>:
 8000a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2a:	bf00      	nop
 8000a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2e:	bc08      	pop	{r3}
 8000a30:	469e      	mov	lr, r3
 8000a32:	4770      	bx	lr

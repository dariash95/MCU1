
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002460  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ec  080026ec  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080026ec  080026ec  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ec  080026ec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000088  0800277c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800277c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c92  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005b5  00000000  00000000  00021d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  000222f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a0  00000000  00000000  000224d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002984  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015f5  00000000  00000000  00024ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a56e  00000000  00000000  000265e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030b57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001218  00000000  00000000  00030bd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	08002578 	.word	0x08002578

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	08002578 	.word	0x08002578

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
uint8_t rxComp = RESET;

I2C_Handle_t I2C1Handle;

void delay(void)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <delay+0x24>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	0003d08f 	.word	0x0003d08f

080001a8 <I2C_GPIOInits>:

void I2C_GPIOInits(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <I2C_GPIOInits+0x3c>)
 80001b0:	603b      	str	r3, [r7, #0]

	// SCL -> B6
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 80001b2:	2301      	movs	r3, #1
 80001b4:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001b6:	2303      	movs	r3, #3
 80001b8:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001ba:	2306      	movs	r3, #6
 80001bc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001be:	463b      	mov	r3, r7
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fa03 	bl	80005cc <GPIO_Init>

	// SDA -> B7
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 80001c6:	2301      	movs	r3, #1
 80001c8:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001ca:	2303      	movs	r3, #3
 80001cc:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001ce:	2307      	movs	r3, #7
 80001d0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001d2:	463b      	mov	r3, r7
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 f9f9 	bl	80005cc <GPIO_Init>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010c00 	.word	0x40010c00

080001e8 <I2C_Inits>:

void I2C_Inits(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx= I2C1;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <I2C_Inits+0x2c>)
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <I2C_Inits+0x30>)
 80001f0:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <I2C_Inits+0x2c>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61; // This doesn't matter in this application bc MCU is acting like master
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <I2C_Inits+0x2c>)
 80001fa:	2261      	movs	r2, #97	; 0x61
 80001fc:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTYCLYCLE_2; // Not used
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <I2C_Inits+0x2c>)
 8000200:	2200      	movs	r2, #0
 8000202:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_CLK_SPEED_SM; // Standard mode
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <I2C_Inits+0x2c>)
 8000206:	4a05      	ldr	r2, [pc, #20]	; (800021c <I2C_Inits+0x34>)
 8000208:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800020a:	4802      	ldr	r0, [pc, #8]	; (8000214 <I2C_Inits+0x2c>)
 800020c:	f000 fbc2 	bl	8000994 <I2C_Init>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000160 	.word	0x20000160
 8000218:	40005400 	.word	0x40005400
 800021c:	000186a0 	.word	0x000186a0

08000220 <main>:
	GPIO_Init(&gpioBtn);
}

extern void initialise_monitor_handles(void);

int main (void){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
 8000226:	f002 f927 	bl	8002478 <initialise_monitor_handles>
	printf("It works!\n");
 800022a:	4834      	ldr	r0, [pc, #208]	; (80002fc <main+0xdc>)
 800022c:	f000 fff6 	bl	800121c <puts>

	uint8_t command_code;
	uint8_t length;

	// Initialize GPIOs a IC2 pins
	I2C_GPIOInits();
 8000230:	f7ff ffba 	bl	80001a8 <I2C_GPIOInits>

	// Configure I2C
	I2C_Inits();
 8000234:	f7ff ffd8 	bl	80001e8 <I2C_Inits>

	// IRQ Config for events and errors
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	201f      	movs	r0, #31
 800023c:	f000 fc96 	bl	8000b6c <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	2020      	movs	r0, #32
 8000244:	f000 fc92 	bl	8000b6c <I2C_IRQConfig>

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000248:	2101      	movs	r1, #1
 800024a:	482d      	ldr	r0, [pc, #180]	; (8000300 <main+0xe0>)
 800024c:	f000 fd12 	bl	8000c74 <I2C_PeripheralControl>

	// Enable acking after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	482b      	ldr	r0, [pc, #172]	; (8000300 <main+0xe0>)
 8000254:	f000 fd29 	bl	8000caa <I2C_ManageAcking>

	while (1){
		uint8_t button_value = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 8000258:	2100      	movs	r1, #0
 800025a:	482a      	ldr	r0, [pc, #168]	; (8000304 <main+0xe4>)
 800025c:	f000 fa71 	bl	8000742 <GPIO_ReadFromInputPin>
 8000260:	4603      	mov	r3, r0
 8000262:	71fb      	strb	r3, [r7, #7]

		// Button pressed for the 1st time
		while((button_value));
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1fc      	bne.n	8000264 <main+0x44>
		delay();
 800026a:	f7ff ff89 	bl	8000180 <delay>

		//Master sends 0x51 to the slave so it knows it has to send length
		command_code = 0x51;
 800026e:	2351      	movs	r3, #81	; 0x51
 8000270:	71bb      	strb	r3, [r7, #6]
		// Wait until the app sends
		while (I2C_MasterReceiveDataIT(&I2C1Handle, &command_code, 1, SLAVE_ADDR, I2C_SR) != I2C_READY);
 8000272:	bf00      	nop
 8000274:	1db9      	adds	r1, r7, #6
 8000276:	2301      	movs	r3, #1
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2368      	movs	r3, #104	; 0x68
 800027c:	2201      	movs	r2, #1
 800027e:	4822      	ldr	r0, [pc, #136]	; (8000308 <main+0xe8>)
 8000280:	f000 fc2a 	bl	8000ad8 <I2C_MasterReceiveDataIT>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d1f4      	bne.n	8000274 <main+0x54>

		// Slave returns length of the data and master reads it
		while (I2C_MasterReceiveDataIT(&I2C1Handle, &length, 1, SLAVE_ADDR, I2C_SR) != I2C_READY);
 800028a:	bf00      	nop
 800028c:	1d79      	adds	r1, r7, #5
 800028e:	2301      	movs	r3, #1
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2368      	movs	r3, #104	; 0x68
 8000294:	2201      	movs	r2, #1
 8000296:	481c      	ldr	r0, [pc, #112]	; (8000308 <main+0xe8>)
 8000298:	f000 fc1e 	bl	8000ad8 <I2C_MasterReceiveDataIT>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d1f4      	bne.n	800028c <main+0x6c>

		//Master sends 0x52 to the slave so it knows it has to send data
		command_code = 0x52;
 80002a2:	2352      	movs	r3, #82	; 0x52
 80002a4:	71bb      	strb	r3, [r7, #6]
		while (I2C_MasterReceiveDataIT(&I2C1Handle, &command_code, 1, SLAVE_ADDR, I2C_SR) != I2C_READY);
 80002a6:	bf00      	nop
 80002a8:	1db9      	adds	r1, r7, #6
 80002aa:	2301      	movs	r3, #1
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2368      	movs	r3, #104	; 0x68
 80002b0:	2201      	movs	r2, #1
 80002b2:	4815      	ldr	r0, [pc, #84]	; (8000308 <main+0xe8>)
 80002b4:	f000 fc10 	bl	8000ad8 <I2C_MasterReceiveDataIT>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1f4      	bne.n	80002a8 <main+0x88>

		// Slave sends data and masters receives it
		while (I2C_MasterReceiveDataIT(&I2C1Handle, received_buff, length, SLAVE_ADDR, I2C_NO_SR) != I2C_READY);
 80002be:	bf00      	nop
 80002c0:	797a      	ldrb	r2, [r7, #5]
 80002c2:	2300      	movs	r3, #0
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2368      	movs	r3, #104	; 0x68
 80002c8:	4910      	ldr	r1, [pc, #64]	; (800030c <main+0xec>)
 80002ca:	480f      	ldr	r0, [pc, #60]	; (8000308 <main+0xe8>)
 80002cc:	f000 fc04 	bl	8000ad8 <I2C_MasterReceiveDataIT>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1f4      	bne.n	80002c0 <main+0xa0>

		while (rxComp != SET);
 80002d6:	bf00      	nop
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0xf0>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d1fb      	bne.n	80002d8 <main+0xb8>

		received_buff[length+1] = '\0'; //Buffer needs to be terminated with the null character so we are adding it
 80002e0:	797b      	ldrb	r3, [r7, #5]
 80002e2:	3301      	adds	r3, #1
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <main+0xec>)
 80002e6:	2100      	movs	r1, #0
 80002e8:	54d1      	strb	r1, [r2, r3]

		// Print data
		printf("Data received: %s", received_buff);
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <main+0xec>)
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <main+0xf4>)
 80002ee:	f000 ff21 	bl	8001134 <iprintf>

		rxComp = RESET;
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <main+0xf0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
	while (1){
 80002f8:	e7ae      	b.n	8000258 <main+0x38>
 80002fa:	bf00      	nop
 80002fc:	08002590 	.word	0x08002590
 8000300:	40005400 	.word	0x40005400
 8000304:	40010800 	.word	0x40010800
 8000308:	20000160 	.word	0x20000160
 800030c:	20000188 	.word	0x20000188
 8000310:	200000a4 	.word	0x200000a4
 8000314:	0800259c 	.word	0x0800259c

08000318 <I2C1_EV_IRQHandler>:
	}
}

// Whenever an event happens, this function will be called
void I2C1_EV_IRQHandler (void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <I2C1_EV_IRQHandler+0x10>)
 800031e:	f000 fd43 	bl	8000da8 <I2C_EV_IRQHandling>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000160 	.word	0x20000160

0800032c <I2C1_ER_IRQHandler>:

// Whenever an error happens, this function will be called
void I2C1_ER_IRQHandler (void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 8000330:	4802      	ldr	r0, [pc, #8]	; (800033c <I2C1_ER_IRQHandler+0x10>)
 8000332:	f000 fe4d 	bl	8000fd0 <I2C_ER_IRQHandling>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000160 	.word	0x20000160

08000340 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback (I2C_Handle_t *pI2CxHandle, uint8_t AppEv){
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]

	if (AppEv == I2C_EV_TX_COMPLETE){
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d103      	bne.n	800035a <I2C_ApplicationEventCallback+0x1a>
		printf("Tx is complete\n");
 8000352:	4829      	ldr	r0, [pc, #164]	; (80003f8 <I2C_ApplicationEventCallback+0xb8>)
 8000354:	f000 ff62 	bl	800121c <puts>
		//Generate stop condition
		I2C_GenerateStopCondition(I2C1);
		// Hang in infinite loop
		while (1);
	}
}
 8000358:	e04a      	b.n	80003f0 <I2C_ApplicationEventCallback+0xb0>
	} else if (AppEv == I2C_EV_RX_COMPLETE){
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d106      	bne.n	800036e <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is complete\n");
 8000360:	4826      	ldr	r0, [pc, #152]	; (80003fc <I2C_ApplicationEventCallback+0xbc>)
 8000362:	f000 ff5b 	bl	800121c <puts>
		rxComp = SET;
 8000366:	4b26      	ldr	r3, [pc, #152]	; (8000400 <I2C_ApplicationEventCallback+0xc0>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
}
 800036c:	e040      	b.n	80003f0 <I2C_ApplicationEventCallback+0xb0>
	} else if (AppEv == I2C_ERROR_AF){
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b02      	cmp	r3, #2
 8000372:	d109      	bne.n	8000388 <I2C_ApplicationEventCallback+0x48>
		printf("Acknowledgment failure\n");
 8000374:	4823      	ldr	r0, [pc, #140]	; (8000404 <I2C_ApplicationEventCallback+0xc4>)
 8000376:	f000 ff51 	bl	800121c <puts>
		I2C_CloseSendData(pI2CxHandle);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 fe06 	bl	8000f8c <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 8000380:	4821      	ldr	r0, [pc, #132]	; (8000408 <I2C_ApplicationEventCallback+0xc8>)
 8000382:	f000 fa63 	bl	800084c <I2C_GenerateStopCondition>
		while (1);
 8000386:	e7fe      	b.n	8000386 <I2C_ApplicationEventCallback+0x46>
	}else if (AppEv == I2C_ERROR_ARLO){
 8000388:	78fb      	ldrb	r3, [r7, #3]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d109      	bne.n	80003a2 <I2C_ApplicationEventCallback+0x62>
		printf("Acknowledgment error 2\n");
 800038e:	481f      	ldr	r0, [pc, #124]	; (800040c <I2C_ApplicationEventCallback+0xcc>)
 8000390:	f000 ff44 	bl	800121c <puts>
		I2C_CloseSendData(pI2CxHandle);
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f000 fdf9 	bl	8000f8c <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 800039a:	481b      	ldr	r0, [pc, #108]	; (8000408 <I2C_ApplicationEventCallback+0xc8>)
 800039c:	f000 fa56 	bl	800084c <I2C_GenerateStopCondition>
		while (1);
 80003a0:	e7fe      	b.n	80003a0 <I2C_ApplicationEventCallback+0x60>
	} else if (AppEv == I2C_ERROR_BERR){
 80003a2:	78fb      	ldrb	r3, [r7, #3]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d109      	bne.n	80003bc <I2C_ApplicationEventCallback+0x7c>
		printf("Bus error\n");
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <I2C_ApplicationEventCallback+0xd0>)
 80003aa:	f000 ff37 	bl	800121c <puts>
		I2C_CloseSendData(pI2CxHandle);
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 fdec 	bl	8000f8c <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 80003b4:	4814      	ldr	r0, [pc, #80]	; (8000408 <I2C_ApplicationEventCallback+0xc8>)
 80003b6:	f000 fa49 	bl	800084c <I2C_GenerateStopCondition>
		while (1);
 80003ba:	e7fe      	b.n	80003ba <I2C_ApplicationEventCallback+0x7a>
	}else if (AppEv == I2C_ERROR_OVR){
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b03      	cmp	r3, #3
 80003c0:	d109      	bne.n	80003d6 <I2C_ApplicationEventCallback+0x96>
		printf("Overrun or underrun error\n");
 80003c2:	4814      	ldr	r0, [pc, #80]	; (8000414 <I2C_ApplicationEventCallback+0xd4>)
 80003c4:	f000 ff2a 	bl	800121c <puts>
		I2C_CloseSendData(pI2CxHandle);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 fddf 	bl	8000f8c <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <I2C_ApplicationEventCallback+0xc8>)
 80003d0:	f000 fa3c 	bl	800084c <I2C_GenerateStopCondition>
		while (1);
 80003d4:	e7fe      	b.n	80003d4 <I2C_ApplicationEventCallback+0x94>
	} else if (AppEv == I2C_ERROR_TIMEOUT){
 80003d6:	78fb      	ldrb	r3, [r7, #3]
 80003d8:	2b04      	cmp	r3, #4
 80003da:	d109      	bne.n	80003f0 <I2C_ApplicationEventCallback+0xb0>
		printf("Timeout error\n");
 80003dc:	480e      	ldr	r0, [pc, #56]	; (8000418 <I2C_ApplicationEventCallback+0xd8>)
 80003de:	f000 ff1d 	bl	800121c <puts>
		I2C_CloseSendData(pI2CxHandle);
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 fdd2 	bl	8000f8c <I2C_CloseSendData>
		I2C_GenerateStopCondition(I2C1);
 80003e8:	4807      	ldr	r0, [pc, #28]	; (8000408 <I2C_ApplicationEventCallback+0xc8>)
 80003ea:	f000 fa2f 	bl	800084c <I2C_GenerateStopCondition>
		while (1);
 80003ee:	e7fe      	b.n	80003ee <I2C_ApplicationEventCallback+0xae>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	080025b0 	.word	0x080025b0
 80003fc:	080025c0 	.word	0x080025c0
 8000400:	200000a4 	.word	0x200000a4
 8000404:	080025d0 	.word	0x080025d0
 8000408:	40005400 	.word	0x40005400
 800040c:	080025e8 	.word	0x080025e8
 8000410:	08002600 	.word	0x08002600
 8000414:	0800260c 	.word	0x0800260c
 8000418:	08002628 	.word	0x08002628

0800041c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800041e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x6>)
  ldr r1, =_edata
 8000422:	490e      	ldr	r1, [pc, #56]	; (800045c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <LoopForever+0xe>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000438:	4c0b      	ldr	r4, [pc, #44]	; (8000468 <LoopForever+0x16>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000446:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800044a:	f000 fe47 	bl	80010dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800044e:	f7ff fee7 	bl	8000220 <main>

08000452 <LoopForever>:

LoopForever:
    b LoopForever
 8000452:	e7fe      	b.n	8000452 <LoopForever>
  ldr   r0, =_estack
 8000454:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000460:	080026f4 	.word	0x080026f4
  ldr r2, =_sbss
 8000464:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000468:	200001ac 	.word	0x200001ac

0800046c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC1_2_IRQHandler>
	...

08000470 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 800047c:	78fb      	ldrb	r3, [r7, #3]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d148      	bne.n	8000514 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a4a      	ldr	r2, [pc, #296]	; (80005b0 <GPIO_PeriClkCtrl+0x140>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 800048a:	4b4a      	ldr	r3, [pc, #296]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a49      	ldr	r2, [pc, #292]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 8000496:	e085      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a47      	ldr	r2, [pc, #284]	; (80005b8 <GPIO_PeriClkCtrl+0x148>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 80004a0:	4b44      	ldr	r3, [pc, #272]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a43      	ldr	r2, [pc, #268]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
}
 80004ac:	e07a      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a42      	ldr	r2, [pc, #264]	; (80005bc <GPIO_PeriClkCtrl+0x14c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a3e      	ldr	r2, [pc, #248]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004bc:	f043 0310 	orr.w	r3, r3, #16
 80004c0:	6193      	str	r3, [r2, #24]
}
 80004c2:	e06f      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <GPIO_PeriClkCtrl+0x150>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
}
 80004d8:	e064      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a39      	ldr	r2, [pc, #228]	; (80005c4 <GPIO_PeriClkCtrl+0x154>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a33      	ldr	r2, [pc, #204]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ec:	6193      	str	r3, [r2, #24]
}
 80004ee:	e059      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a35      	ldr	r2, [pc, #212]	; (80005c8 <GPIO_PeriClkCtrl+0x158>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 80004fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000502:	6193      	str	r3, [r2, #24]
}
 8000504:	e04e      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a2a      	ldr	r2, [pc, #168]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800050c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000510:	6193      	str	r3, [r2, #24]
}
 8000512:	e047      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <GPIO_PeriClkCtrl+0x140>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d106      	bne.n	800052a <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000522:	f023 0304 	bic.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
}
 8000528:	e03c      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <GPIO_PeriClkCtrl+0x148>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d106      	bne.n	8000540 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000538:	f023 0308 	bic.w	r3, r3, #8
 800053c:	6193      	str	r3, [r2, #24]
}
 800053e:	e031      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a1e      	ldr	r2, [pc, #120]	; (80005bc <GPIO_PeriClkCtrl+0x14c>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d106      	bne.n	8000556 <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000548:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800054e:	f023 0310 	bic.w	r3, r3, #16
 8000552:	6193      	str	r3, [r2, #24]
}
 8000554:	e026      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <GPIO_PeriClkCtrl+0x150>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d106      	bne.n	800056c <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000564:	f023 0320 	bic.w	r3, r3, #32
 8000568:	6193      	str	r3, [r2, #24]
}
 800056a:	e01b      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <GPIO_PeriClkCtrl+0x154>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d106      	bne.n	8000582 <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800057a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800057e:	6193      	str	r3, [r2, #24]
}
 8000580:	e010      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <GPIO_PeriClkCtrl+0x158>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d106      	bne.n	8000598 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 8000590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000594:	6193      	str	r3, [r2, #24]
}
 8000596:	e005      	b.n	80005a4 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <GPIO_PeriClkCtrl+0x144>)
 800059e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005a2:	6193      	str	r3, [r2, #24]
}
 80005a4:	bf00      	nop
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	40011000 	.word	0x40011000
 80005c0:	40011400 	.word	0x40011400
 80005c4:	40011800 	.word	0x40011800
 80005c8:	40011c00 	.word	0x40011c00

080005cc <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff48 	bl	8000470 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	2b07      	cmp	r3, #7
 80005ee:	d84b      	bhi.n	8000688 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	b2db      	uxtb	r3, r3
 800060e:	3302      	adds	r3, #2
 8000610:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 8000612:	7d3b      	ldrb	r3, [r7, #20]
 8000614:	2203      	movs	r2, #3
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 800061c:	7cfb      	ldrb	r3, [r7, #19]
 800061e:	2203      	movs	r2, #3
 8000620:	fa02 f303 	lsl.w	r3, r2, r3
 8000624:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 8000626:	7dba      	ldrb	r2, [r7, #22]
 8000628:	7d3b      	ldrb	r3, [r7, #20]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	43da      	mvns	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800064e:	430a      	orrs	r2, r1
 8000650:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 8000656:	7d7a      	ldrb	r2, [r7, #21]
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6819      	ldr	r1, [r3, #0]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	43da      	mvns	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	400a      	ands	r2, r1
 8000670:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	6819      	ldr	r1, [r3, #0]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800067e:	430a      	orrs	r2, r1
 8000680:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting

		temp_config = 0;
	}

}
 8000686:	e058      	b.n	800073a <GPIO_Init+0x16e>
		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	3b08      	subs	r3, #8
 800068e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	795b      	ldrb	r3, [r3, #5]
 8000696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	799b      	ldrb	r3, [r3, #6]
 800069e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 80006a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 80006ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	3302      	adds	r3, #2
 80006b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 80006ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006be:	2203      	movs	r2, #3
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 80006c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006cc:	2203      	movs	r2, #3
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43db      	mvns	r3, r3
 80006d4:	61bb      	str	r3, [r7, #24]
		temp_mode = value_mode << positions_mode;
 80006d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80006da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6859      	ldr	r1, [r3, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	400a      	ands	r2, r1
 80006f2:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6859      	ldr	r1, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000700:	430a      	orrs	r2, r1
 8000702:	605a      	str	r2, [r3, #4]
		temp_mode = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
		temp_config = value_config << positions_config;
 8000708:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800070c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6859      	ldr	r1, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	69ba      	ldr	r2, [r7, #24]
 8000722:	400a      	ands	r2, r1
 8000724:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6859      	ldr	r1, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000732:	430a      	orrs	r2, r1
 8000734:	605a      	str	r2, [r3, #4]
		temp_config = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800073a:	bf00      	nop
 800073c:	3730      	adds	r7, #48	; 0x30
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <GPIO_ReadFromInputPin>:
 * @param [in]		Pin number
 * @return			Read value 0 or 1
 * @note 			None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000742:	b480      	push	{r7}
 8000744:	b085      	sub	sp, #20
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	689a      	ldr	r2, [r3, #8]
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	fa22 f303 	lsr.w	r3, r2, r3
 8000758:	b2db      	uxtb	r3, r3
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
	return value;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <I2C_GenerateStartCondition>:
 * @brief			This functions generates the start condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]

}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <I2C_ExecuteAddressPhaseWrite>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // Set 0 to write
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	f023 0301 	bic.w	r3, r3, #1
 80007a2:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	611a      	str	r2, [r3, #16]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <I2C_ExecuteAddressPhaseRead>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; // Set 1 to write
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80007ce:	78fa      	ldrb	r2, [r7, #3]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	611a      	str	r2, [r3, #16]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <I2C_ClearAddrFlag>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CxHandle){
 80007de:	b580      	push	{r7, lr}
 80007e0:	b084      	sub	sp, #16
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]

	uint8_t dummy_read;

	// Check mode
	if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01f      	beq.n	8000834 <I2C_ClearAddrFlag+0x56>
		//Device in master mode
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7f1b      	ldrb	r3, [r3, #28]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d112      	bne.n	8000822 <I2C_ClearAddrFlag+0x44>
			if (pI2CxHandle->RxSize == 1){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d11f      	bne.n	8000844 <I2C_ClearAddrFlag+0x66>
				// Disable ACKING
				I2C_ManageAcking(pI2CxHandle->pI2Cx, DISABLE);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa4d 	bl	8000caa <I2C_ManageAcking>

				// Clear ADDR flag
				dummy_read = pI2CxHandle->pI2Cx->SR1;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CxHandle->pI2Cx->SR2;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	73fb      	strb	r3, [r7, #15]
		// Clear ADDR flag
		dummy_read = pI2CxHandle->pI2Cx->SR1;
		dummy_read = pI2CxHandle->pI2Cx->SR2;
		(void) dummy_read;
	}
}
 8000820:	e010      	b.n	8000844 <I2C_ClearAddrFlag+0x66>
			dummy_read = pI2CxHandle->pI2Cx->SR1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CxHandle->pI2Cx->SR2;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	73fb      	strb	r3, [r7, #15]
}
 8000832:	e007      	b.n	8000844 <I2C_ClearAddrFlag+0x66>
		dummy_read = pI2CxHandle->pI2Cx->SR1;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CxHandle->pI2Cx->SR2;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	73fb      	strb	r3, [r7, #15]
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <I2C_GenerateStopCondition>:
 * @brief			This functions generates the stop condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]

}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <I2C_PeriClkCtrl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeriClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d115      	bne.n	80008aa <I2C_PeriClkCtrl+0x3e>
		if (pI2Cx == I2C1) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <I2C_PeriClkCtrl+0x74>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d106      	bne.n	8000894 <I2C_PeriClkCtrl+0x28>
			I2C1_PCLK_EN();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000890:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		}
	}
}
 8000892:	e01f      	b.n	80008d4 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <I2C_PeriClkCtrl+0x7c>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d11b      	bne.n	80008d4 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_EN();
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 80008a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a6:	61d3      	str	r3, [r2, #28]
}
 80008a8:	e014      	b.n	80008d4 <I2C_PeriClkCtrl+0x68>
		if (pI2Cx == I2C1) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <I2C_PeriClkCtrl+0x74>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d106      	bne.n	80008c0 <I2C_PeriClkCtrl+0x54>
			I2C1_PCLK_DI();
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 80008b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008bc:	61d3      	str	r3, [r2, #28]
}
 80008be:	e009      	b.n	80008d4 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <I2C_PeriClkCtrl+0x7c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d105      	bne.n	80008d4 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_DI();
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <I2C_PeriClkCtrl+0x78>)
 80008ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80008d2:	61d3      	str	r3, [r2, #28]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40005800 	.word	0x40005800

080008ec <RCC_GetPCLK1Value>:
 * @brief			This functions calculates the frequency of the APB1 clock
 * @param [in]		None
 * @return			Frequency of the clock
 * @note 			None
 */
uint32_t RCC_GetPCLK1Value (void){
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
	uint8_t clksrc, temp, ahb1_prescaler, apb1_prescaler;

	/* System clock: Defined on the register CFGR of RCC
	 * Move the bits two positions to the right so they a in the position 0 and 1.
	 * Then mask and get the value */
	clksrc = (RCC ->CFGR >> 2) & 0x3;
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <RCC_GetPCLK1Value+0x94>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0){
 8000900:	7a7b      	ldrb	r3, [r7, #9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <RCC_GetPCLK1Value+0x98>)
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e004      	b.n	8000916 <RCC_GetPCLK1Value+0x2a>
	} else if (clksrc == 1){
 800090c:	7a7b      	ldrb	r3, [r7, #9]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d101      	bne.n	8000916 <RCC_GetPCLK1Value+0x2a>
		sysclk = 8000000;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <RCC_GetPCLK1Value+0x9c>)
 8000914:	60fb      	str	r3, [r7, #12]
	}

	// AHB Prescaler: Defined on register CFGR
	temp = (RCC ->CFGR >> 4) & 0xF;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <RCC_GetPCLK1Value+0x94>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	723b      	strb	r3, [r7, #8]

	if (temp < 8){
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	2b07      	cmp	r3, #7
 8000928:	d802      	bhi.n	8000930 <RCC_GetPCLK1Value+0x44>
		ahb1_prescaler = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	72fb      	strb	r3, [r7, #11]
 800092e:	e005      	b.n	800093c <RCC_GetPCLK1Value+0x50>
	} else {
		ahb1_prescaler = AHB1_Prescaler[temp-8];
 8000930:	7a3b      	ldrb	r3, [r7, #8]
 8000932:	3b08      	subs	r3, #8
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <RCC_GetPCLK1Value+0xa0>)
 8000936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093a:	72fb      	strb	r3, [r7, #11]
		/* Example: temp = 9 -> 1001 -> [1] -> 9-8 */
	}

	// APB1 Prescaler
	temp = (RCC ->CFGR >> 8) & 0x7;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <RCC_GetPCLK1Value+0x94>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b2db      	uxtb	r3, r3
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	723b      	strb	r3, [r7, #8]

	if (temp < 4){
 800094a:	7a3b      	ldrb	r3, [r7, #8]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d802      	bhi.n	8000956 <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1;
 8000950:	2301      	movs	r3, #1
 8000952:	72bb      	strb	r3, [r7, #10]
 8000954:	e005      	b.n	8000962 <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = APB1_Prescaler[temp-4];
 8000956:	7a3b      	ldrb	r3, [r7, #8]
 8000958:	3b04      	subs	r3, #4
 800095a:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <RCC_GetPCLK1Value+0xa4>)
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (sysclk/ahb1_prescaler)/apb1_prescaler;
 8000962:	7afb      	ldrb	r3, [r7, #11]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	fbb2 f2f3 	udiv	r2, r2, r3
 800096a:	7abb      	ldrb	r3, [r7, #10]
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000
 8000984:	00f42400 	.word	0x00f42400
 8000988:	007a1200 	.word	0x007a1200
 800098c:	20000000 	.word	0x20000000
 8000990:	20000010 	.word	0x20000010

08000994 <I2C_Init>:
 * @brief			This functions initializes a given I2C
 * @param [in]		Base Address of the I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_Init(I2C_Handle_t *pI2CxHandle){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2C peripheral
	I2C_PeriClkCtrl(pI2CxHandle->pI2Cx, ENABLE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff60 	bl	800086c <I2C_PeriClkCtrl>
	 * Configuration of ACK bit
	temp |= (pI2CxHandle->I2C_Config.I2C_ACKControl << 10);
	pI2CxHandle->pI2Cx->CR1 = temp; */

	// Configuration of the FREQ
	temp = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
	temp |= RCC_GetPCLK1Value()/ 1000000U;
 80009b0:	f7ff ff9c 	bl	80008ec <RCC_GetPCLK1Value>
 80009b4:	4602      	mov	r2, r0
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <I2C_Init+0x13c>)
 80009b8:	fba3 2302 	umull	r2, r3, r3, r2
 80009bc:	0c9b      	lsrs	r3, r3, #18
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->CR2 = (temp & 0x3F); // To mask the rest of the bits
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ce:	605a      	str	r2, [r3, #4]

	// Configuration of the slave address
	temp |= (pI2CxHandle->I2C_Config.I2C_DeviceAddress << 1);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7a1b      	ldrb	r3, [r3, #8]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
	temp |= (1 << 14); // Bit 14 must be 1 according to the manual
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->OAR1 = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	817b      	strh	r3, [r7, #10]
	temp = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a36      	ldr	r2, [pc, #216]	; (8000ad4 <I2C_Init+0x140>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d80f      	bhi.n	8000a20 <I2C_Init+0x8c>
		// Standard mode
		ccr_value = RCC_GetPCLK1Value()/(2*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 8000a00:	f7ff ff74 	bl	80008ec <RCC_GetPCLK1Value>
 8000a04:	4602      	mov	r2, r0
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a10:	817b      	strh	r3, [r7, #10]
		temp |= (ccr_value & 0xFFF);
 8000a12:	897b      	ldrh	r3, [r7, #10]
 8000a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e02d      	b.n	8000a7c <I2C_Init+0xe8>
	} else{
		// Fast mode
		temp |= (1 << 15);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a26:	60fb      	str	r3, [r7, #12]
		temp |= (pI2CxHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	895b      	ldrh	r3, [r3, #10]
 8000a2c:	039b      	lsls	r3, r3, #14
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]

		if (pI2CxHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTYCLYCLE_2){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	895b      	ldrh	r3, [r3, #10]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10b      	bne.n	8000a56 <I2C_Init+0xc2>
			ccr_value = RCC_GetPCLK1Value()/(3*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 8000a3e:	f7ff ff55 	bl	80008ec <RCC_GetPCLK1Value>
 8000a42:	4601      	mov	r1, r0
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a52:	817b      	strh	r3, [r7, #10]
 8000a54:	e00c      	b.n	8000a70 <I2C_Init+0xdc>
		} else {
			ccr_value = RCC_GetPCLK1Value()/(25*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 8000a56:	f7ff ff49 	bl	80008ec <RCC_GetPCLK1Value>
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009a      	lsls	r2, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a6e:	817b      	strh	r3, [r7, #10]
		}
		temp |= (ccr_value & 0xFFF);
 8000a70:	897b      	ldrh	r3, [r7, #10]
 8000a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->CCR = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	61da      	str	r2, [r3, #28]

	// TRISE configuration

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <I2C_Init+0x140>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d809      	bhi.n	8000aa2 <I2C_Init+0x10e>
		// Standard mode

		temp = (RCC_GetPCLK1Value()/ 1000000U) + 1; // This formula comes from the reference manual
 8000a8e:	f7ff ff2d 	bl	80008ec <RCC_GetPCLK1Value>
 8000a92:	4602      	mov	r2, r0
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <I2C_Init+0x13c>)
 8000a96:	fba3 2302 	umull	r2, r3, r3, r2
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e00c      	b.n	8000abc <I2C_Init+0x128>

	} else {
		// Fast mode
		temp = (RCC_GetPCLK1Value()*300/ 1000000U) + 1;
 8000aa2:	f7ff ff23 	bl	80008ec <RCC_GetPCLK1Value>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000aac:	fb03 f302 	mul.w	r3, r3, r2
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <I2C_Init+0x13c>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	0c9b      	lsrs	r3, r3, #18
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->TRISE = (temp & 0x3F);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ac6:	621a      	str	r2, [r3, #32]
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	431bde83 	.word	0x431bde83
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <I2C_MasterReceiveDataIT>:
 * @param [in]		Slave address
 * @param [in]		Repeated start condition
 * @return			None
 * @note 			None
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CxHandle, uint8_t *pRxBuffer, uint8_t length, uint8_t SlaveAddr, uint8_t Sr){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	4613      	mov	r3, r2
 8000aec:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CxHandle->TxRxState;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	7f1b      	ldrb	r3, [r3, #28]
 8000af2:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX)){
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d033      	beq.n	8000b62 <I2C_MasterReceiveDataIT+0x8a>
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d030      	beq.n	8000b62 <I2C_MasterReceiveDataIT+0x8a>
		pI2CxHandle->pRxBuffer = pRxBuffer;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	611a      	str	r2, [r3, #16]
		pI2CxHandle->RxLen = length;
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	619a      	str	r2, [r3, #24]
		pI2CxHandle->TxRxState = I2C_BUSY_IN_RX;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	771a      	strb	r2, [r3, #28]
		pI2CxHandle->RxSize = length; //Rxsize is used in the ISR code to manage the data reception
 8000b12:	79fa      	ldrb	r2, [r7, #7]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	621a      	str	r2, [r3, #32]
		pI2CxHandle->devAddr = SlaveAddr;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	79ba      	ldrb	r2, [r7, #6]
 8000b1c:	775a      	strb	r2, [r3, #29]
		pI2CxHandle->Sr = Sr;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CxHandle->pI2Cx);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe1d 	bl	800076c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CxHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b40:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CxHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b50:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CxHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b60:	605a      	str	r2, [r3, #4]

	}
	return busystate;
 8000b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <I2C_IRQConfig>:
 * @param [in]		IRQ Priority
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]

	if (EnOrDi == ENABLE){
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d133      	bne.n	8000bea <I2C_IRQConfig+0x7e>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d80a      	bhi.n	8000b9e <I2C_IRQConfig+0x32>
				*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <I2C_IRQConfig+0xf0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <I2C_IRQConfig+0xf0>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
			}
		}
}
 8000b9c:	e059      	b.n	8000c52 <I2C_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b1f      	cmp	r3, #31
 8000ba2:	d90f      	bls.n	8000bc4 <I2C_IRQConfig+0x58>
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba8:	d80c      	bhi.n	8000bc4 <I2C_IRQConfig+0x58>
				*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 8000baa:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <I2C_IRQConfig+0xf4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	79fa      	ldrb	r2, [r7, #7]
 8000bb0:	f002 021f 	and.w	r2, r2, #31
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <I2C_IRQConfig+0xf4>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e046      	b.n	8000c52 <I2C_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000bc8:	d943      	bls.n	8000c52 <I2C_IRQConfig+0xe6>
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bce:	d840      	bhi.n	8000c52 <I2C_IRQConfig+0xe6>
				*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <I2C_IRQConfig+0xf8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <I2C_IRQConfig+0xf8>)
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	e033      	b.n	8000c52 <I2C_IRQConfig+0xe6>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d80a      	bhi.n	8000c06 <I2C_IRQConfig+0x9a>
				*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <I2C_IRQConfig+0xfc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <I2C_IRQConfig+0xfc>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	e025      	b.n	8000c52 <I2C_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b1f      	cmp	r3, #31
 8000c0a:	d90f      	bls.n	8000c2c <I2C_IRQConfig+0xc0>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c10:	d80c      	bhi.n	8000c2c <I2C_IRQConfig+0xc0>
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <I2C_IRQConfig+0x100>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	f002 021f 	and.w	r2, r2, #31
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <I2C_IRQConfig+0x100>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e012      	b.n	8000c52 <I2C_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c30:	d90f      	bls.n	8000c52 <I2C_IRQConfig+0xe6>
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b5f      	cmp	r3, #95	; 0x5f
 8000c36:	d80c      	bhi.n	8000c52 <I2C_IRQConfig+0xe6>
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <I2C_IRQConfig+0x104>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <I2C_IRQConfig+0x104>)
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	e7ff      	b.n	8000c52 <I2C_IRQConfig+0xe6>
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000e104 	.word	0xe000e104
 8000c64:	e000e108 	.word	0xe000e108
 8000c68:	e000e180 	.word	0xe000e180
 8000c6c:	e000e184 	.word	0xe000e184
 8000c70:	e000e188 	.word	0xe000e188

08000c74 <I2C_PeripheralControl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d106      	bne.n	8000c94 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f043 0201 	orr.w	r2, r3, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000c92:	e005      	b.n	8000ca0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 0201 	bic.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	601a      	str	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr

08000caa <I2C_ManageAcking>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000cc8:	e005      	b.n	8000cd6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <I2C_MasterHandleTXEIT>:
 * @brief			This functions sends data implementing interrupts. It handles the interrupt
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
static void I2C_MasterHandleTXEIT(I2C_Handle_t *pI2CxHandle){
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

	if (pI2CxHandle->TxLen > 0){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00f      	beq.n	8000d10 <I2C_MasterHandleTXEIT+0x30>
		// Load data into DR
		pI2CxHandle->pI2Cx->DR = *(pI2CxHandle->pRxBuffer);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	611a      	str	r2, [r3, #16]

		// Decrement Tx length
		pI2CxHandle->TxLen--;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	615a      	str	r2, [r3, #20]

		// Increment buffer address
		pI2CxHandle->pTxBuffer++;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60da      	str	r2, [r3, #12]
	}
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <I2C_MasterHandleRXNEIT>:
 * @brief			This functions receives data implementing interrupts. It handles the interrupt
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
static void I2C_MasterHandleRXNEIT(I2C_Handle_t *pI2CxHandle){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	// Data reception for length = 1
	if (pI2CxHandle->RxSize == 1){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d10b      	bne.n	8000d42 <I2C_MasterHandleRXNEIT+0x28>
		*pI2CxHandle->pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	701a      	strb	r2, [r3, #0]
		pI2CxHandle->RxLen--;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	1e5a      	subs	r2, r3, #1
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	619a      	str	r2, [r3, #24]
	}

	// Data reception for length > 1
	if (pI2CxHandle->RxSize > 1){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d91a      	bls.n	8000d80 <I2C_MasterHandleRXNEIT+0x66>
		if (pI2CxHandle->RxLen == 2){
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d105      	bne.n	8000d5e <I2C_MasterHandleRXNEIT+0x44>
			// Clear ACK bit
			I2C_ManageAcking(pI2CxHandle->pI2Cx, DISABLE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ffa6 	bl	8000caa <I2C_ManageAcking>
		}

		*pI2CxHandle->pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	701a      	strb	r2, [r3, #0]
		pI2CxHandle->pRxBuffer++;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
		pI2CxHandle->RxLen--;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	619a      	str	r2, [r3, #24]
	}

	if (pI2CxHandle->RxLen == 0){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10b      	bne.n	8000da0 <I2C_MasterHandleRXNEIT+0x86>
		// Generate STOP condition
		I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fd5d 	bl	800084c <I2C_GenerateStopCondition>

		// Close I2C reception
		I2C_CloseReceiveData(pI2CxHandle);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f8cc 	bl	8000f30 <I2C_CloseReceiveData>

		// Notify app
		I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_RX_COMPLETE);
 8000d98:	2101      	movs	r1, #1
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fad0 	bl	8000340 <I2C_ApplicationEventCallback>
	}
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <I2C_EV_IRQHandling>:
 * @brief			This functions handles each case an interrupt can be triggered for
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CxHandle){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

	uint32_t  temp1, temp2, temp3;

	// Make sure the interrupts are enabled by checking the ITEVTEN bit
	temp1 = pI2CxHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	617b      	str	r3, [r7, #20]

	// Make sure the interrupts are enabled by also checking the ITBUFFEN bit
	temp2 = pI2CxHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc6:	613b      	str	r3, [r7, #16]

	/****************************** Handling interrupt generated by SB event.  **************************************/
	// Note: This is only applicable to master mode

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d01b      	beq.n	8000e12 <I2C_EV_IRQHandling+0x6a>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d018      	beq.n	8000e12 <I2C_EV_IRQHandling+0x6a>
		//Interrupt happened because of SB event
		//Execute address phase
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7f1b      	ldrb	r3, [r3, #28]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <I2C_EV_IRQHandling+0x52>
			I2C_ExecuteAddressPhaseWrite(pI2CxHandle->pI2Cx, pI2CxHandle->devAddr);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7f5b      	ldrb	r3, [r3, #29]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f7ff fcc9 	bl	800078a <I2C_ExecuteAddressPhaseWrite>
 8000df8:	e00b      	b.n	8000e12 <I2C_EV_IRQHandling+0x6a>
		} else if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f1b      	ldrb	r3, [r3, #28]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d107      	bne.n	8000e12 <I2C_EV_IRQHandling+0x6a>
			I2C_ExecuteAddressPhaseRead(pI2CxHandle->pI2Cx, pI2CxHandle->devAddr);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7f5b      	ldrb	r3, [r3, #29]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	f7ff fcd1 	bl	80007b4 <I2C_ExecuteAddressPhaseRead>

	//********************************** Handling interrupt generated by ADDR event ********************************/
	// Master mode: Master received the address
	// Slave mode: The address matched with its own.

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d005      	beq.n	8000e30 <I2C_EV_IRQHandling+0x88>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d002      	beq.n	8000e30 <I2C_EV_IRQHandling+0x88>
		// Interrupt happened because of ADDR event
		// Clear ADDR flag
		I2C_ClearAddrFlag(pI2CxHandle);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fcd7 	bl	80007de <I2C_ClearAddrFlag>
	}

	/********************************** Handling interrupt generated by BTF event **********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d022      	beq.n	8000e88 <I2C_EV_IRQHandling+0xe0>
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01f      	beq.n	8000e88 <I2C_EV_IRQHandling+0xe0>
		// Interrupt happened because of BTF (Byte Transfer Finished) event

		// Check the application state
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7f1b      	ldrb	r3, [r3, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d11b      	bne.n	8000e88 <I2C_EV_IRQHandling+0xe0>

			//Confirm TXE is also set
			if (pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d014      	beq.n	8000e88 <I2C_EV_IRQHandling+0xe0>
				if (pI2CxHandle->TxLen == 0){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d110      	bne.n	8000e88 <I2C_EV_IRQHandling+0xe0>
					// Check if repeated start is enabled
					if (pI2CxHandle->Sr == I2C_NO_SR){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d104      	bne.n	8000e7a <I2C_EV_IRQHandling+0xd2>
						// Generate STOP condition
						I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fce9 	bl	800084c <I2C_GenerateStopCondition>
					}

					// Reset all member elements of the handle structure
					I2C_CloseSendData(pI2CxHandle);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f886 	bl	8000f8c <I2C_CloseSendData>

					// Notify the app about transmission completion
					I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_TX_COMPLETE);
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fa5c 	bl	8000340 <I2C_ApplicationEventCallback>
	}

	/********************************* Handling interrupt generated by STOPF event *******************************/
	// This code will be only executed when in slave mode

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00c      	beq.n	8000eb4 <I2C_EV_IRQHandling+0x10c>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d009      	beq.n	8000eb4 <I2C_EV_IRQHandling+0x10c>
		// Interrupt happened because of STOPF event

		// Clear STOPF flag -> Read SR1 (done). Write something to CR1
		pI2CxHandle->pI2Cx->CR1 |= 0x0000; // This value will not affect the other values of the register
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	601a      	str	r2, [r3, #0]

		// Notify the app about transmission completion
		I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_STOP);
 8000eac:	2102      	movs	r1, #2
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fa46 	bl	8000340 <I2C_ApplicationEventCallback>
	}

	/*********************************** Handling interrupt generated by TXE event *********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp2 && temp3){
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d013      	beq.n	8000eee <I2C_EV_IRQHandling+0x146>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d010      	beq.n	8000eee <I2C_EV_IRQHandling+0x146>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00d      	beq.n	8000eee <I2C_EV_IRQHandling+0x146>
		//Interrupt happened because of TXE event

		// Check if device is master
		if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d006      	beq.n	8000eee <I2C_EV_IRQHandling+0x146>
			// Data transmission
			if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7f1b      	ldrb	r3, [r3, #28]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <I2C_EV_IRQHandling+0x146>
				I2C_MasterHandleTXEIT(pI2CxHandle);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff fef9 	bl	8000ce0 <I2C_MasterHandleTXEIT>
		}
	}

	/******************************** Handling interrupt generated by RXNE event **********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef8:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp2 && temp3){
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <I2C_EV_IRQHandling+0x180>
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d010      	beq.n	8000f28 <I2C_EV_IRQHandling+0x180>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00d      	beq.n	8000f28 <I2C_EV_IRQHandling+0x180>
		//Interrupt happened because of RXNE event

		// Check device mode
		if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <I2C_EV_IRQHandling+0x180>
			if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7f1b      	ldrb	r3, [r3, #28]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d102      	bne.n	8000f28 <I2C_EV_IRQHandling+0x180>
				I2C_MasterHandleRXNEIT(pI2CxHandle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fef9 	bl	8000d1a <I2C_MasterHandleRXNEIT>
			}
		}
	}
}
 8000f28:	bf00      	nop
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <I2C_CloseReceiveData>:
 * @brief			This functions closes communication after the MCU is done receiving data
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_CloseReceiveData (I2C_Handle_t *pI2CxHandle){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

	// Disable ITBUFFEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f46:	605a      	str	r2, [r3, #4]

	// Disable ITEVEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f56:	605a      	str	r2, [r3, #4]

	pI2CxHandle->TxRxState = I2C_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	771a      	strb	r2, [r3, #28]
	pI2CxHandle->pRxBuffer = NULL;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
	pI2CxHandle->RxLen = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
	pI2CxHandle->RxSize = 0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]

	if (pI2CxHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7a5b      	ldrb	r3, [r3, #9]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CxHandle->pI2Cx, ENABLE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe93 	bl	8000caa <I2C_ManageAcking>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <I2C_CloseSendData>:
 * @brief			This functions closes communication after the MCU is done transmiting data
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_CloseSendData (I2C_Handle_t *pI2CxHandle){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	// Disable ITBUFFEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa2:	605a      	str	r2, [r3, #4]

	// Disable ITEVEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fb2:	605a      	str	r2, [r3, #4]

	pI2CxHandle->TxRxState = I2C_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	771a      	strb	r2, [r3, #28]
	pI2CxHandle->pTxBuffer = NULL;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
	pI2CxHandle->TxLen = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <I2C_ER_IRQHandling>:
 * @brief			This functions handles each case an error can be triggered for
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CxHandle){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CxHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fee:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 ){
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00e      	beq.n	8001014 <I2C_ER_IRQHandling+0x44>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00b      	beq.n	8001014 <I2C_ER_IRQHandling+0x44>
		//This is Bus error

		// Clear the bus error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800100a:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_BERR);
 800100c:	2100      	movs	r1, #0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f996 	bl	8000340 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2) {
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00e      	beq.n	8001044 <I2C_ER_IRQHandling+0x74>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <I2C_ER_IRQHandling+0x74>
		//This is arbitration lost error

		// Clear the arbitration lost error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800103a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_ARLO);
 800103c:	2101      	movs	r1, #1
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff f97e 	bl	8000340 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00e      	beq.n	8001074 <I2C_ER_IRQHandling+0xa4>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <I2C_ER_IRQHandling+0xa4>
		//This is ACK failure error

		//Implement the code to clear the ACK failure error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800106a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_AF);
 800106c:	2102      	movs	r1, #2
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff f966 	bl	8000340 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00e      	beq.n	80010a4 <I2C_ER_IRQHandling+0xd4>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <I2C_ER_IRQHandling+0xd4>
		//This is Overrun/underrun

		//Implement the code to clear the Overrun/underrun error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800109a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_OVR);
 800109c:	2103      	movs	r1, #3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff f94e 	bl	8000340 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00e      	beq.n	80010d4 <I2C_ER_IRQHandling+0x104>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <I2C_ER_IRQHandling+0x104>
		//This is Time out error

		//Implement the code to clear the Time out error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695a      	ldr	r2, [r3, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010ca:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_TIMEOUT);
 80010cc:	2104      	movs	r1, #4
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f936 	bl	8000340 <I2C_ApplicationEventCallback>
	}
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <__libc_init_array>:
 80010dc:	b570      	push	{r4, r5, r6, lr}
 80010de:	2500      	movs	r5, #0
 80010e0:	4e0c      	ldr	r6, [pc, #48]	; (8001114 <__libc_init_array+0x38>)
 80010e2:	4c0d      	ldr	r4, [pc, #52]	; (8001118 <__libc_init_array+0x3c>)
 80010e4:	1ba4      	subs	r4, r4, r6
 80010e6:	10a4      	asrs	r4, r4, #2
 80010e8:	42a5      	cmp	r5, r4
 80010ea:	d109      	bne.n	8001100 <__libc_init_array+0x24>
 80010ec:	f001 fa44 	bl	8002578 <_init>
 80010f0:	2500      	movs	r5, #0
 80010f2:	4e0a      	ldr	r6, [pc, #40]	; (800111c <__libc_init_array+0x40>)
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <__libc_init_array+0x44>)
 80010f6:	1ba4      	subs	r4, r4, r6
 80010f8:	10a4      	asrs	r4, r4, #2
 80010fa:	42a5      	cmp	r5, r4
 80010fc:	d105      	bne.n	800110a <__libc_init_array+0x2e>
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
 8001100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001104:	4798      	blx	r3
 8001106:	3501      	adds	r5, #1
 8001108:	e7ee      	b.n	80010e8 <__libc_init_array+0xc>
 800110a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800110e:	4798      	blx	r3
 8001110:	3501      	adds	r5, #1
 8001112:	e7f2      	b.n	80010fa <__libc_init_array+0x1e>
 8001114:	080026ec 	.word	0x080026ec
 8001118:	080026ec 	.word	0x080026ec
 800111c:	080026ec 	.word	0x080026ec
 8001120:	080026f0 	.word	0x080026f0

08001124 <memset>:
 8001124:	4603      	mov	r3, r0
 8001126:	4402      	add	r2, r0
 8001128:	4293      	cmp	r3, r2
 800112a:	d100      	bne.n	800112e <memset+0xa>
 800112c:	4770      	bx	lr
 800112e:	f803 1b01 	strb.w	r1, [r3], #1
 8001132:	e7f9      	b.n	8001128 <memset+0x4>

08001134 <iprintf>:
 8001134:	b40f      	push	{r0, r1, r2, r3}
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <iprintf+0x2c>)
 8001138:	b513      	push	{r0, r1, r4, lr}
 800113a:	681c      	ldr	r4, [r3, #0]
 800113c:	b124      	cbz	r4, 8001148 <iprintf+0x14>
 800113e:	69a3      	ldr	r3, [r4, #24]
 8001140:	b913      	cbnz	r3, 8001148 <iprintf+0x14>
 8001142:	4620      	mov	r0, r4
 8001144:	f000 fa22 	bl	800158c <__sinit>
 8001148:	ab05      	add	r3, sp, #20
 800114a:	9a04      	ldr	r2, [sp, #16]
 800114c:	68a1      	ldr	r1, [r4, #8]
 800114e:	4620      	mov	r0, r4
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f000 fbd7 	bl	8001904 <_vfiprintf_r>
 8001156:	b002      	add	sp, #8
 8001158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800115c:	b004      	add	sp, #16
 800115e:	4770      	bx	lr
 8001160:	20000018 	.word	0x20000018

08001164 <_puts_r>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	460e      	mov	r6, r1
 8001168:	4605      	mov	r5, r0
 800116a:	b118      	cbz	r0, 8001174 <_puts_r+0x10>
 800116c:	6983      	ldr	r3, [r0, #24]
 800116e:	b90b      	cbnz	r3, 8001174 <_puts_r+0x10>
 8001170:	f000 fa0c 	bl	800158c <__sinit>
 8001174:	69ab      	ldr	r3, [r5, #24]
 8001176:	68ac      	ldr	r4, [r5, #8]
 8001178:	b913      	cbnz	r3, 8001180 <_puts_r+0x1c>
 800117a:	4628      	mov	r0, r5
 800117c:	f000 fa06 	bl	800158c <__sinit>
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <_puts_r+0xac>)
 8001182:	429c      	cmp	r4, r3
 8001184:	d117      	bne.n	80011b6 <_puts_r+0x52>
 8001186:	686c      	ldr	r4, [r5, #4]
 8001188:	89a3      	ldrh	r3, [r4, #12]
 800118a:	071b      	lsls	r3, r3, #28
 800118c:	d51d      	bpl.n	80011ca <_puts_r+0x66>
 800118e:	6923      	ldr	r3, [r4, #16]
 8001190:	b1db      	cbz	r3, 80011ca <_puts_r+0x66>
 8001192:	3e01      	subs	r6, #1
 8001194:	68a3      	ldr	r3, [r4, #8]
 8001196:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800119a:	3b01      	subs	r3, #1
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	b9e9      	cbnz	r1, 80011dc <_puts_r+0x78>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da2e      	bge.n	8001202 <_puts_r+0x9e>
 80011a4:	4622      	mov	r2, r4
 80011a6:	210a      	movs	r1, #10
 80011a8:	4628      	mov	r0, r5
 80011aa:	f000 f83f 	bl	800122c <__swbuf_r>
 80011ae:	3001      	adds	r0, #1
 80011b0:	d011      	beq.n	80011d6 <_puts_r+0x72>
 80011b2:	200a      	movs	r0, #10
 80011b4:	e011      	b.n	80011da <_puts_r+0x76>
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <_puts_r+0xb0>)
 80011b8:	429c      	cmp	r4, r3
 80011ba:	d101      	bne.n	80011c0 <_puts_r+0x5c>
 80011bc:	68ac      	ldr	r4, [r5, #8]
 80011be:	e7e3      	b.n	8001188 <_puts_r+0x24>
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_puts_r+0xb4>)
 80011c2:	429c      	cmp	r4, r3
 80011c4:	bf08      	it	eq
 80011c6:	68ec      	ldreq	r4, [r5, #12]
 80011c8:	e7de      	b.n	8001188 <_puts_r+0x24>
 80011ca:	4621      	mov	r1, r4
 80011cc:	4628      	mov	r0, r5
 80011ce:	f000 f87f 	bl	80012d0 <__swsetup_r>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d0dd      	beq.n	8001192 <_puts_r+0x2e>
 80011d6:	f04f 30ff 	mov.w	r0, #4294967295
 80011da:	bd70      	pop	{r4, r5, r6, pc}
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da04      	bge.n	80011ea <_puts_r+0x86>
 80011e0:	69a2      	ldr	r2, [r4, #24]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dc06      	bgt.n	80011f4 <_puts_r+0x90>
 80011e6:	290a      	cmp	r1, #10
 80011e8:	d004      	beq.n	80011f4 <_puts_r+0x90>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	6022      	str	r2, [r4, #0]
 80011f0:	7019      	strb	r1, [r3, #0]
 80011f2:	e7cf      	b.n	8001194 <_puts_r+0x30>
 80011f4:	4622      	mov	r2, r4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f818 	bl	800122c <__swbuf_r>
 80011fc:	3001      	adds	r0, #1
 80011fe:	d1c9      	bne.n	8001194 <_puts_r+0x30>
 8001200:	e7e9      	b.n	80011d6 <_puts_r+0x72>
 8001202:	200a      	movs	r0, #10
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	6022      	str	r2, [r4, #0]
 800120a:	7018      	strb	r0, [r3, #0]
 800120c:	e7e5      	b.n	80011da <_puts_r+0x76>
 800120e:	bf00      	nop
 8001210:	0800265c 	.word	0x0800265c
 8001214:	0800267c 	.word	0x0800267c
 8001218:	0800263c 	.word	0x0800263c

0800121c <puts>:
 800121c:	4b02      	ldr	r3, [pc, #8]	; (8001228 <puts+0xc>)
 800121e:	4601      	mov	r1, r0
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	f7ff bf9f 	b.w	8001164 <_puts_r>
 8001226:	bf00      	nop
 8001228:	20000018 	.word	0x20000018

0800122c <__swbuf_r>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	460e      	mov	r6, r1
 8001230:	4614      	mov	r4, r2
 8001232:	4605      	mov	r5, r0
 8001234:	b118      	cbz	r0, 800123e <__swbuf_r+0x12>
 8001236:	6983      	ldr	r3, [r0, #24]
 8001238:	b90b      	cbnz	r3, 800123e <__swbuf_r+0x12>
 800123a:	f000 f9a7 	bl	800158c <__sinit>
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <__swbuf_r+0x98>)
 8001240:	429c      	cmp	r4, r3
 8001242:	d12a      	bne.n	800129a <__swbuf_r+0x6e>
 8001244:	686c      	ldr	r4, [r5, #4]
 8001246:	69a3      	ldr	r3, [r4, #24]
 8001248:	60a3      	str	r3, [r4, #8]
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	071a      	lsls	r2, r3, #28
 800124e:	d52e      	bpl.n	80012ae <__swbuf_r+0x82>
 8001250:	6923      	ldr	r3, [r4, #16]
 8001252:	b363      	cbz	r3, 80012ae <__swbuf_r+0x82>
 8001254:	6923      	ldr	r3, [r4, #16]
 8001256:	6820      	ldr	r0, [r4, #0]
 8001258:	b2f6      	uxtb	r6, r6
 800125a:	1ac0      	subs	r0, r0, r3
 800125c:	6963      	ldr	r3, [r4, #20]
 800125e:	4637      	mov	r7, r6
 8001260:	4283      	cmp	r3, r0
 8001262:	dc04      	bgt.n	800126e <__swbuf_r+0x42>
 8001264:	4621      	mov	r1, r4
 8001266:	4628      	mov	r0, r5
 8001268:	f000 f926 	bl	80014b8 <_fflush_r>
 800126c:	bb28      	cbnz	r0, 80012ba <__swbuf_r+0x8e>
 800126e:	68a3      	ldr	r3, [r4, #8]
 8001270:	3001      	adds	r0, #1
 8001272:	3b01      	subs	r3, #1
 8001274:	60a3      	str	r3, [r4, #8]
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	6022      	str	r2, [r4, #0]
 800127c:	701e      	strb	r6, [r3, #0]
 800127e:	6963      	ldr	r3, [r4, #20]
 8001280:	4283      	cmp	r3, r0
 8001282:	d004      	beq.n	800128e <__swbuf_r+0x62>
 8001284:	89a3      	ldrh	r3, [r4, #12]
 8001286:	07db      	lsls	r3, r3, #31
 8001288:	d519      	bpl.n	80012be <__swbuf_r+0x92>
 800128a:	2e0a      	cmp	r6, #10
 800128c:	d117      	bne.n	80012be <__swbuf_r+0x92>
 800128e:	4621      	mov	r1, r4
 8001290:	4628      	mov	r0, r5
 8001292:	f000 f911 	bl	80014b8 <_fflush_r>
 8001296:	b190      	cbz	r0, 80012be <__swbuf_r+0x92>
 8001298:	e00f      	b.n	80012ba <__swbuf_r+0x8e>
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <__swbuf_r+0x9c>)
 800129c:	429c      	cmp	r4, r3
 800129e:	d101      	bne.n	80012a4 <__swbuf_r+0x78>
 80012a0:	68ac      	ldr	r4, [r5, #8]
 80012a2:	e7d0      	b.n	8001246 <__swbuf_r+0x1a>
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <__swbuf_r+0xa0>)
 80012a6:	429c      	cmp	r4, r3
 80012a8:	bf08      	it	eq
 80012aa:	68ec      	ldreq	r4, [r5, #12]
 80012ac:	e7cb      	b.n	8001246 <__swbuf_r+0x1a>
 80012ae:	4621      	mov	r1, r4
 80012b0:	4628      	mov	r0, r5
 80012b2:	f000 f80d 	bl	80012d0 <__swsetup_r>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d0cc      	beq.n	8001254 <__swbuf_r+0x28>
 80012ba:	f04f 37ff 	mov.w	r7, #4294967295
 80012be:	4638      	mov	r0, r7
 80012c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800265c 	.word	0x0800265c
 80012c8:	0800267c 	.word	0x0800267c
 80012cc:	0800263c 	.word	0x0800263c

080012d0 <__swsetup_r>:
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <__swsetup_r+0xcc>)
 80012d2:	b570      	push	{r4, r5, r6, lr}
 80012d4:	681d      	ldr	r5, [r3, #0]
 80012d6:	4606      	mov	r6, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	b125      	cbz	r5, 80012e6 <__swsetup_r+0x16>
 80012dc:	69ab      	ldr	r3, [r5, #24]
 80012de:	b913      	cbnz	r3, 80012e6 <__swsetup_r+0x16>
 80012e0:	4628      	mov	r0, r5
 80012e2:	f000 f953 	bl	800158c <__sinit>
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <__swsetup_r+0xd0>)
 80012e8:	429c      	cmp	r4, r3
 80012ea:	d10f      	bne.n	800130c <__swsetup_r+0x3c>
 80012ec:	686c      	ldr	r4, [r5, #4]
 80012ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	0715      	lsls	r5, r2, #28
 80012f6:	d42c      	bmi.n	8001352 <__swsetup_r+0x82>
 80012f8:	06d0      	lsls	r0, r2, #27
 80012fa:	d411      	bmi.n	8001320 <__swsetup_r+0x50>
 80012fc:	2209      	movs	r2, #9
 80012fe:	6032      	str	r2, [r6, #0]
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	f04f 30ff 	mov.w	r0, #4294967295
 800130a:	e03e      	b.n	800138a <__swsetup_r+0xba>
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <__swsetup_r+0xd4>)
 800130e:	429c      	cmp	r4, r3
 8001310:	d101      	bne.n	8001316 <__swsetup_r+0x46>
 8001312:	68ac      	ldr	r4, [r5, #8]
 8001314:	e7eb      	b.n	80012ee <__swsetup_r+0x1e>
 8001316:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <__swsetup_r+0xd8>)
 8001318:	429c      	cmp	r4, r3
 800131a:	bf08      	it	eq
 800131c:	68ec      	ldreq	r4, [r5, #12]
 800131e:	e7e6      	b.n	80012ee <__swsetup_r+0x1e>
 8001320:	0751      	lsls	r1, r2, #29
 8001322:	d512      	bpl.n	800134a <__swsetup_r+0x7a>
 8001324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001326:	b141      	cbz	r1, 800133a <__swsetup_r+0x6a>
 8001328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800132c:	4299      	cmp	r1, r3
 800132e:	d002      	beq.n	8001336 <__swsetup_r+0x66>
 8001330:	4630      	mov	r0, r6
 8001332:	f000 fa19 	bl	8001768 <_free_r>
 8001336:	2300      	movs	r3, #0
 8001338:	6363      	str	r3, [r4, #52]	; 0x34
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	2300      	movs	r3, #0
 8001344:	6063      	str	r3, [r4, #4]
 8001346:	6923      	ldr	r3, [r4, #16]
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	6923      	ldr	r3, [r4, #16]
 8001354:	b94b      	cbnz	r3, 800136a <__swsetup_r+0x9a>
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800135c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001360:	d003      	beq.n	800136a <__swsetup_r+0x9a>
 8001362:	4621      	mov	r1, r4
 8001364:	4630      	mov	r0, r6
 8001366:	f000 f9bf 	bl	80016e8 <__smakebuf_r>
 800136a:	89a2      	ldrh	r2, [r4, #12]
 800136c:	f012 0301 	ands.w	r3, r2, #1
 8001370:	d00c      	beq.n	800138c <__swsetup_r+0xbc>
 8001372:	2300      	movs	r3, #0
 8001374:	60a3      	str	r3, [r4, #8]
 8001376:	6963      	ldr	r3, [r4, #20]
 8001378:	425b      	negs	r3, r3
 800137a:	61a3      	str	r3, [r4, #24]
 800137c:	6923      	ldr	r3, [r4, #16]
 800137e:	b953      	cbnz	r3, 8001396 <__swsetup_r+0xc6>
 8001380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001384:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001388:	d1ba      	bne.n	8001300 <__swsetup_r+0x30>
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	0792      	lsls	r2, r2, #30
 800138e:	bf58      	it	pl
 8001390:	6963      	ldrpl	r3, [r4, #20]
 8001392:	60a3      	str	r3, [r4, #8]
 8001394:	e7f2      	b.n	800137c <__swsetup_r+0xac>
 8001396:	2000      	movs	r0, #0
 8001398:	e7f7      	b.n	800138a <__swsetup_r+0xba>
 800139a:	bf00      	nop
 800139c:	20000018 	.word	0x20000018
 80013a0:	0800265c 	.word	0x0800265c
 80013a4:	0800267c 	.word	0x0800267c
 80013a8:	0800263c 	.word	0x0800263c

080013ac <__sflush_r>:
 80013ac:	898a      	ldrh	r2, [r1, #12]
 80013ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b2:	4605      	mov	r5, r0
 80013b4:	0710      	lsls	r0, r2, #28
 80013b6:	460c      	mov	r4, r1
 80013b8:	d458      	bmi.n	800146c <__sflush_r+0xc0>
 80013ba:	684b      	ldr	r3, [r1, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc05      	bgt.n	80013cc <__sflush_r+0x20>
 80013c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dc02      	bgt.n	80013cc <__sflush_r+0x20>
 80013c6:	2000      	movs	r0, #0
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ce:	2e00      	cmp	r6, #0
 80013d0:	d0f9      	beq.n	80013c6 <__sflush_r+0x1a>
 80013d2:	2300      	movs	r3, #0
 80013d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013d8:	682f      	ldr	r7, [r5, #0]
 80013da:	6a21      	ldr	r1, [r4, #32]
 80013dc:	602b      	str	r3, [r5, #0]
 80013de:	d032      	beq.n	8001446 <__sflush_r+0x9a>
 80013e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	075a      	lsls	r2, r3, #29
 80013e6:	d505      	bpl.n	80013f4 <__sflush_r+0x48>
 80013e8:	6863      	ldr	r3, [r4, #4]
 80013ea:	1ac0      	subs	r0, r0, r3
 80013ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013ee:	b10b      	cbz	r3, 80013f4 <__sflush_r+0x48>
 80013f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013f2:	1ac0      	subs	r0, r0, r3
 80013f4:	2300      	movs	r3, #0
 80013f6:	4602      	mov	r2, r0
 80013f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013fa:	6a21      	ldr	r1, [r4, #32]
 80013fc:	4628      	mov	r0, r5
 80013fe:	47b0      	blx	r6
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	d106      	bne.n	8001414 <__sflush_r+0x68>
 8001406:	6829      	ldr	r1, [r5, #0]
 8001408:	291d      	cmp	r1, #29
 800140a:	d848      	bhi.n	800149e <__sflush_r+0xf2>
 800140c:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <__sflush_r+0x108>)
 800140e:	40ca      	lsrs	r2, r1
 8001410:	07d6      	lsls	r6, r2, #31
 8001412:	d544      	bpl.n	800149e <__sflush_r+0xf2>
 8001414:	2200      	movs	r2, #0
 8001416:	6062      	str	r2, [r4, #4]
 8001418:	6922      	ldr	r2, [r4, #16]
 800141a:	04d9      	lsls	r1, r3, #19
 800141c:	6022      	str	r2, [r4, #0]
 800141e:	d504      	bpl.n	800142a <__sflush_r+0x7e>
 8001420:	1c42      	adds	r2, r0, #1
 8001422:	d101      	bne.n	8001428 <__sflush_r+0x7c>
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	b903      	cbnz	r3, 800142a <__sflush_r+0x7e>
 8001428:	6560      	str	r0, [r4, #84]	; 0x54
 800142a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800142c:	602f      	str	r7, [r5, #0]
 800142e:	2900      	cmp	r1, #0
 8001430:	d0c9      	beq.n	80013c6 <__sflush_r+0x1a>
 8001432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001436:	4299      	cmp	r1, r3
 8001438:	d002      	beq.n	8001440 <__sflush_r+0x94>
 800143a:	4628      	mov	r0, r5
 800143c:	f000 f994 	bl	8001768 <_free_r>
 8001440:	2000      	movs	r0, #0
 8001442:	6360      	str	r0, [r4, #52]	; 0x34
 8001444:	e7c0      	b.n	80013c8 <__sflush_r+0x1c>
 8001446:	2301      	movs	r3, #1
 8001448:	4628      	mov	r0, r5
 800144a:	47b0      	blx	r6
 800144c:	1c41      	adds	r1, r0, #1
 800144e:	d1c8      	bne.n	80013e2 <__sflush_r+0x36>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0c5      	beq.n	80013e2 <__sflush_r+0x36>
 8001456:	2b1d      	cmp	r3, #29
 8001458:	d001      	beq.n	800145e <__sflush_r+0xb2>
 800145a:	2b16      	cmp	r3, #22
 800145c:	d101      	bne.n	8001462 <__sflush_r+0xb6>
 800145e:	602f      	str	r7, [r5, #0]
 8001460:	e7b1      	b.n	80013c6 <__sflush_r+0x1a>
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001468:	81a3      	strh	r3, [r4, #12]
 800146a:	e7ad      	b.n	80013c8 <__sflush_r+0x1c>
 800146c:	690f      	ldr	r7, [r1, #16]
 800146e:	2f00      	cmp	r7, #0
 8001470:	d0a9      	beq.n	80013c6 <__sflush_r+0x1a>
 8001472:	0793      	lsls	r3, r2, #30
 8001474:	bf18      	it	ne
 8001476:	2300      	movne	r3, #0
 8001478:	680e      	ldr	r6, [r1, #0]
 800147a:	bf08      	it	eq
 800147c:	694b      	ldreq	r3, [r1, #20]
 800147e:	eba6 0807 	sub.w	r8, r6, r7
 8001482:	600f      	str	r7, [r1, #0]
 8001484:	608b      	str	r3, [r1, #8]
 8001486:	f1b8 0f00 	cmp.w	r8, #0
 800148a:	dd9c      	ble.n	80013c6 <__sflush_r+0x1a>
 800148c:	4643      	mov	r3, r8
 800148e:	463a      	mov	r2, r7
 8001490:	6a21      	ldr	r1, [r4, #32]
 8001492:	4628      	mov	r0, r5
 8001494:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001496:	47b0      	blx	r6
 8001498:	2800      	cmp	r0, #0
 800149a:	dc06      	bgt.n	80014aa <__sflush_r+0xfe>
 800149c:	89a3      	ldrh	r3, [r4, #12]
 800149e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a2:	81a3      	strh	r3, [r4, #12]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	e78e      	b.n	80013c8 <__sflush_r+0x1c>
 80014aa:	4407      	add	r7, r0
 80014ac:	eba8 0800 	sub.w	r8, r8, r0
 80014b0:	e7e9      	b.n	8001486 <__sflush_r+0xda>
 80014b2:	bf00      	nop
 80014b4:	20400001 	.word	0x20400001

080014b8 <_fflush_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	690b      	ldr	r3, [r1, #16]
 80014bc:	4605      	mov	r5, r0
 80014be:	460c      	mov	r4, r1
 80014c0:	b1db      	cbz	r3, 80014fa <_fflush_r+0x42>
 80014c2:	b118      	cbz	r0, 80014cc <_fflush_r+0x14>
 80014c4:	6983      	ldr	r3, [r0, #24]
 80014c6:	b90b      	cbnz	r3, 80014cc <_fflush_r+0x14>
 80014c8:	f000 f860 	bl	800158c <__sinit>
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <_fflush_r+0x48>)
 80014ce:	429c      	cmp	r4, r3
 80014d0:	d109      	bne.n	80014e6 <_fflush_r+0x2e>
 80014d2:	686c      	ldr	r4, [r5, #4]
 80014d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d8:	b17b      	cbz	r3, 80014fa <_fflush_r+0x42>
 80014da:	4621      	mov	r1, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e2:	f7ff bf63 	b.w	80013ac <__sflush_r>
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_fflush_r+0x4c>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d101      	bne.n	80014f0 <_fflush_r+0x38>
 80014ec:	68ac      	ldr	r4, [r5, #8]
 80014ee:	e7f1      	b.n	80014d4 <_fflush_r+0x1c>
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <_fflush_r+0x50>)
 80014f2:	429c      	cmp	r4, r3
 80014f4:	bf08      	it	eq
 80014f6:	68ec      	ldreq	r4, [r5, #12]
 80014f8:	e7ec      	b.n	80014d4 <_fflush_r+0x1c>
 80014fa:	2000      	movs	r0, #0
 80014fc:	bd38      	pop	{r3, r4, r5, pc}
 80014fe:	bf00      	nop
 8001500:	0800265c 	.word	0x0800265c
 8001504:	0800267c 	.word	0x0800267c
 8001508:	0800263c 	.word	0x0800263c

0800150c <std>:
 800150c:	2300      	movs	r3, #0
 800150e:	b510      	push	{r4, lr}
 8001510:	4604      	mov	r4, r0
 8001512:	e9c0 3300 	strd	r3, r3, [r0]
 8001516:	6083      	str	r3, [r0, #8]
 8001518:	8181      	strh	r1, [r0, #12]
 800151a:	6643      	str	r3, [r0, #100]	; 0x64
 800151c:	81c2      	strh	r2, [r0, #14]
 800151e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001522:	6183      	str	r3, [r0, #24]
 8001524:	4619      	mov	r1, r3
 8001526:	2208      	movs	r2, #8
 8001528:	305c      	adds	r0, #92	; 0x5c
 800152a:	f7ff fdfb 	bl	8001124 <memset>
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <std+0x38>)
 8001530:	6224      	str	r4, [r4, #32]
 8001532:	6263      	str	r3, [r4, #36]	; 0x24
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <std+0x3c>)
 8001536:	62a3      	str	r3, [r4, #40]	; 0x28
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <std+0x40>)
 800153a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <std+0x44>)
 800153e:	6323      	str	r3, [r4, #48]	; 0x30
 8001540:	bd10      	pop	{r4, pc}
 8001542:	bf00      	nop
 8001544:	08001e61 	.word	0x08001e61
 8001548:	08001e83 	.word	0x08001e83
 800154c:	08001ebb 	.word	0x08001ebb
 8001550:	08001edf 	.word	0x08001edf

08001554 <_cleanup_r>:
 8001554:	4901      	ldr	r1, [pc, #4]	; (800155c <_cleanup_r+0x8>)
 8001556:	f000 b885 	b.w	8001664 <_fwalk_reent>
 800155a:	bf00      	nop
 800155c:	080014b9 	.word	0x080014b9

08001560 <__sfmoreglue>:
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	2568      	movs	r5, #104	; 0x68
 8001564:	1e4a      	subs	r2, r1, #1
 8001566:	4355      	muls	r5, r2
 8001568:	460e      	mov	r6, r1
 800156a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800156e:	f000 f947 	bl	8001800 <_malloc_r>
 8001572:	4604      	mov	r4, r0
 8001574:	b140      	cbz	r0, 8001588 <__sfmoreglue+0x28>
 8001576:	2100      	movs	r1, #0
 8001578:	e9c0 1600 	strd	r1, r6, [r0]
 800157c:	300c      	adds	r0, #12
 800157e:	60a0      	str	r0, [r4, #8]
 8001580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001584:	f7ff fdce 	bl	8001124 <memset>
 8001588:	4620      	mov	r0, r4
 800158a:	bd70      	pop	{r4, r5, r6, pc}

0800158c <__sinit>:
 800158c:	6983      	ldr	r3, [r0, #24]
 800158e:	b510      	push	{r4, lr}
 8001590:	4604      	mov	r4, r0
 8001592:	bb33      	cbnz	r3, 80015e2 <__sinit+0x56>
 8001594:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001598:	6503      	str	r3, [r0, #80]	; 0x50
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <__sinit+0x58>)
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <__sinit+0x5c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6282      	str	r2, [r0, #40]	; 0x28
 80015a2:	4298      	cmp	r0, r3
 80015a4:	bf04      	itt	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	6183      	streq	r3, [r0, #24]
 80015aa:	f000 f81f 	bl	80015ec <__sfp>
 80015ae:	6060      	str	r0, [r4, #4]
 80015b0:	4620      	mov	r0, r4
 80015b2:	f000 f81b 	bl	80015ec <__sfp>
 80015b6:	60a0      	str	r0, [r4, #8]
 80015b8:	4620      	mov	r0, r4
 80015ba:	f000 f817 	bl	80015ec <__sfp>
 80015be:	2200      	movs	r2, #0
 80015c0:	60e0      	str	r0, [r4, #12]
 80015c2:	2104      	movs	r1, #4
 80015c4:	6860      	ldr	r0, [r4, #4]
 80015c6:	f7ff ffa1 	bl	800150c <std>
 80015ca:	2201      	movs	r2, #1
 80015cc:	2109      	movs	r1, #9
 80015ce:	68a0      	ldr	r0, [r4, #8]
 80015d0:	f7ff ff9c 	bl	800150c <std>
 80015d4:	2202      	movs	r2, #2
 80015d6:	2112      	movs	r1, #18
 80015d8:	68e0      	ldr	r0, [r4, #12]
 80015da:	f7ff ff97 	bl	800150c <std>
 80015de:	2301      	movs	r3, #1
 80015e0:	61a3      	str	r3, [r4, #24]
 80015e2:	bd10      	pop	{r4, pc}
 80015e4:	08002638 	.word	0x08002638
 80015e8:	08001555 	.word	0x08001555

080015ec <__sfp>:
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <__sfp+0x70>)
 80015f0:	4607      	mov	r7, r0
 80015f2:	681e      	ldr	r6, [r3, #0]
 80015f4:	69b3      	ldr	r3, [r6, #24]
 80015f6:	b913      	cbnz	r3, 80015fe <__sfp+0x12>
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff ffc7 	bl	800158c <__sinit>
 80015fe:	3648      	adds	r6, #72	; 0x48
 8001600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001604:	3b01      	subs	r3, #1
 8001606:	d503      	bpl.n	8001610 <__sfp+0x24>
 8001608:	6833      	ldr	r3, [r6, #0]
 800160a:	b133      	cbz	r3, 800161a <__sfp+0x2e>
 800160c:	6836      	ldr	r6, [r6, #0]
 800160e:	e7f7      	b.n	8001600 <__sfp+0x14>
 8001610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001614:	b16d      	cbz	r5, 8001632 <__sfp+0x46>
 8001616:	3468      	adds	r4, #104	; 0x68
 8001618:	e7f4      	b.n	8001604 <__sfp+0x18>
 800161a:	2104      	movs	r1, #4
 800161c:	4638      	mov	r0, r7
 800161e:	f7ff ff9f 	bl	8001560 <__sfmoreglue>
 8001622:	6030      	str	r0, [r6, #0]
 8001624:	2800      	cmp	r0, #0
 8001626:	d1f1      	bne.n	800160c <__sfp+0x20>
 8001628:	230c      	movs	r3, #12
 800162a:	4604      	mov	r4, r0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4620      	mov	r0, r4
 8001630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <__sfp+0x74>)
 8001634:	6665      	str	r5, [r4, #100]	; 0x64
 8001636:	e9c4 5500 	strd	r5, r5, [r4]
 800163a:	60a5      	str	r5, [r4, #8]
 800163c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001640:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001644:	2208      	movs	r2, #8
 8001646:	4629      	mov	r1, r5
 8001648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800164c:	f7ff fd6a 	bl	8001124 <memset>
 8001650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001658:	e7e9      	b.n	800162e <__sfp+0x42>
 800165a:	bf00      	nop
 800165c:	08002638 	.word	0x08002638
 8001660:	ffff0001 	.word	0xffff0001

08001664 <_fwalk_reent>:
 8001664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001668:	4680      	mov	r8, r0
 800166a:	4689      	mov	r9, r1
 800166c:	2600      	movs	r6, #0
 800166e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001672:	b914      	cbnz	r4, 800167a <_fwalk_reent+0x16>
 8001674:	4630      	mov	r0, r6
 8001676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800167a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800167e:	3f01      	subs	r7, #1
 8001680:	d501      	bpl.n	8001686 <_fwalk_reent+0x22>
 8001682:	6824      	ldr	r4, [r4, #0]
 8001684:	e7f5      	b.n	8001672 <_fwalk_reent+0xe>
 8001686:	89ab      	ldrh	r3, [r5, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d907      	bls.n	800169c <_fwalk_reent+0x38>
 800168c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001690:	3301      	adds	r3, #1
 8001692:	d003      	beq.n	800169c <_fwalk_reent+0x38>
 8001694:	4629      	mov	r1, r5
 8001696:	4640      	mov	r0, r8
 8001698:	47c8      	blx	r9
 800169a:	4306      	orrs	r6, r0
 800169c:	3568      	adds	r5, #104	; 0x68
 800169e:	e7ee      	b.n	800167e <_fwalk_reent+0x1a>

080016a0 <__swhatbuf_r>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460e      	mov	r6, r1
 80016a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a8:	b096      	sub	sp, #88	; 0x58
 80016aa:	2900      	cmp	r1, #0
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	da07      	bge.n	80016c2 <__swhatbuf_r+0x22>
 80016b2:	2300      	movs	r3, #0
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	89b3      	ldrh	r3, [r6, #12]
 80016b8:	061a      	lsls	r2, r3, #24
 80016ba:	d410      	bmi.n	80016de <__swhatbuf_r+0x3e>
 80016bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c0:	e00e      	b.n	80016e0 <__swhatbuf_r+0x40>
 80016c2:	466a      	mov	r2, sp
 80016c4:	f000 fc32 	bl	8001f2c <_fstat_r>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	dbf2      	blt.n	80016b2 <__swhatbuf_r+0x12>
 80016cc:	9a01      	ldr	r2, [sp, #4]
 80016ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016d6:	425a      	negs	r2, r3
 80016d8:	415a      	adcs	r2, r3
 80016da:	602a      	str	r2, [r5, #0]
 80016dc:	e7ee      	b.n	80016bc <__swhatbuf_r+0x1c>
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	2000      	movs	r0, #0
 80016e2:	6023      	str	r3, [r4, #0]
 80016e4:	b016      	add	sp, #88	; 0x58
 80016e6:	bd70      	pop	{r4, r5, r6, pc}

080016e8 <__smakebuf_r>:
 80016e8:	898b      	ldrh	r3, [r1, #12]
 80016ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016ec:	079d      	lsls	r5, r3, #30
 80016ee:	4606      	mov	r6, r0
 80016f0:	460c      	mov	r4, r1
 80016f2:	d507      	bpl.n	8001704 <__smakebuf_r+0x1c>
 80016f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016f8:	6023      	str	r3, [r4, #0]
 80016fa:	6123      	str	r3, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	6163      	str	r3, [r4, #20]
 8001700:	b002      	add	sp, #8
 8001702:	bd70      	pop	{r4, r5, r6, pc}
 8001704:	ab01      	add	r3, sp, #4
 8001706:	466a      	mov	r2, sp
 8001708:	f7ff ffca 	bl	80016a0 <__swhatbuf_r>
 800170c:	9900      	ldr	r1, [sp, #0]
 800170e:	4605      	mov	r5, r0
 8001710:	4630      	mov	r0, r6
 8001712:	f000 f875 	bl	8001800 <_malloc_r>
 8001716:	b948      	cbnz	r0, 800172c <__smakebuf_r+0x44>
 8001718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800171c:	059a      	lsls	r2, r3, #22
 800171e:	d4ef      	bmi.n	8001700 <__smakebuf_r+0x18>
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	81a3      	strh	r3, [r4, #12]
 800172a:	e7e3      	b.n	80016f4 <__smakebuf_r+0xc>
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <__smakebuf_r+0x7c>)
 800172e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001730:	89a3      	ldrh	r3, [r4, #12]
 8001732:	6020      	str	r0, [r4, #0]
 8001734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	9b00      	ldr	r3, [sp, #0]
 800173c:	6120      	str	r0, [r4, #16]
 800173e:	6163      	str	r3, [r4, #20]
 8001740:	9b01      	ldr	r3, [sp, #4]
 8001742:	b15b      	cbz	r3, 800175c <__smakebuf_r+0x74>
 8001744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001748:	4630      	mov	r0, r6
 800174a:	f000 fc01 	bl	8001f50 <_isatty_r>
 800174e:	b128      	cbz	r0, 800175c <__smakebuf_r+0x74>
 8001750:	89a3      	ldrh	r3, [r4, #12]
 8001752:	f023 0303 	bic.w	r3, r3, #3
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	89a3      	ldrh	r3, [r4, #12]
 800175e:	431d      	orrs	r5, r3
 8001760:	81a5      	strh	r5, [r4, #12]
 8001762:	e7cd      	b.n	8001700 <__smakebuf_r+0x18>
 8001764:	08001555 	.word	0x08001555

08001768 <_free_r>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	2900      	cmp	r1, #0
 800176e:	d043      	beq.n	80017f8 <_free_r+0x90>
 8001770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001774:	1f0c      	subs	r4, r1, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	bfb8      	it	lt
 800177a:	18e4      	addlt	r4, r4, r3
 800177c:	f000 fc18 	bl	8001fb0 <__malloc_lock>
 8001780:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <_free_r+0x94>)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	4610      	mov	r0, r2
 8001786:	b933      	cbnz	r3, 8001796 <_free_r+0x2e>
 8001788:	6063      	str	r3, [r4, #4]
 800178a:	6014      	str	r4, [r2, #0]
 800178c:	4628      	mov	r0, r5
 800178e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001792:	f000 bc0e 	b.w	8001fb2 <__malloc_unlock>
 8001796:	42a3      	cmp	r3, r4
 8001798:	d90b      	bls.n	80017b2 <_free_r+0x4a>
 800179a:	6821      	ldr	r1, [r4, #0]
 800179c:	1862      	adds	r2, r4, r1
 800179e:	4293      	cmp	r3, r2
 80017a0:	bf01      	itttt	eq
 80017a2:	681a      	ldreq	r2, [r3, #0]
 80017a4:	685b      	ldreq	r3, [r3, #4]
 80017a6:	1852      	addeq	r2, r2, r1
 80017a8:	6022      	streq	r2, [r4, #0]
 80017aa:	6063      	str	r3, [r4, #4]
 80017ac:	6004      	str	r4, [r0, #0]
 80017ae:	e7ed      	b.n	800178c <_free_r+0x24>
 80017b0:	4613      	mov	r3, r2
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	b10a      	cbz	r2, 80017ba <_free_r+0x52>
 80017b6:	42a2      	cmp	r2, r4
 80017b8:	d9fa      	bls.n	80017b0 <_free_r+0x48>
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	1858      	adds	r0, r3, r1
 80017be:	42a0      	cmp	r0, r4
 80017c0:	d10b      	bne.n	80017da <_free_r+0x72>
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	4401      	add	r1, r0
 80017c6:	1858      	adds	r0, r3, r1
 80017c8:	4282      	cmp	r2, r0
 80017ca:	6019      	str	r1, [r3, #0]
 80017cc:	d1de      	bne.n	800178c <_free_r+0x24>
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	6852      	ldr	r2, [r2, #4]
 80017d2:	4401      	add	r1, r0
 80017d4:	6019      	str	r1, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	e7d8      	b.n	800178c <_free_r+0x24>
 80017da:	d902      	bls.n	80017e2 <_free_r+0x7a>
 80017dc:	230c      	movs	r3, #12
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	e7d4      	b.n	800178c <_free_r+0x24>
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	1821      	adds	r1, r4, r0
 80017e6:	428a      	cmp	r2, r1
 80017e8:	bf01      	itttt	eq
 80017ea:	6811      	ldreq	r1, [r2, #0]
 80017ec:	6852      	ldreq	r2, [r2, #4]
 80017ee:	1809      	addeq	r1, r1, r0
 80017f0:	6021      	streq	r1, [r4, #0]
 80017f2:	6062      	str	r2, [r4, #4]
 80017f4:	605c      	str	r4, [r3, #4]
 80017f6:	e7c9      	b.n	800178c <_free_r+0x24>
 80017f8:	bd38      	pop	{r3, r4, r5, pc}
 80017fa:	bf00      	nop
 80017fc:	200000a8 	.word	0x200000a8

08001800 <_malloc_r>:
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	1ccd      	adds	r5, r1, #3
 8001804:	f025 0503 	bic.w	r5, r5, #3
 8001808:	3508      	adds	r5, #8
 800180a:	2d0c      	cmp	r5, #12
 800180c:	bf38      	it	cc
 800180e:	250c      	movcc	r5, #12
 8001810:	2d00      	cmp	r5, #0
 8001812:	4606      	mov	r6, r0
 8001814:	db01      	blt.n	800181a <_malloc_r+0x1a>
 8001816:	42a9      	cmp	r1, r5
 8001818:	d903      	bls.n	8001822 <_malloc_r+0x22>
 800181a:	230c      	movs	r3, #12
 800181c:	6033      	str	r3, [r6, #0]
 800181e:	2000      	movs	r0, #0
 8001820:	bd70      	pop	{r4, r5, r6, pc}
 8001822:	f000 fbc5 	bl	8001fb0 <__malloc_lock>
 8001826:	4a21      	ldr	r2, [pc, #132]	; (80018ac <_malloc_r+0xac>)
 8001828:	6814      	ldr	r4, [r2, #0]
 800182a:	4621      	mov	r1, r4
 800182c:	b991      	cbnz	r1, 8001854 <_malloc_r+0x54>
 800182e:	4c20      	ldr	r4, [pc, #128]	; (80018b0 <_malloc_r+0xb0>)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	b91b      	cbnz	r3, 800183c <_malloc_r+0x3c>
 8001834:	4630      	mov	r0, r6
 8001836:	f000 fb03 	bl	8001e40 <_sbrk_r>
 800183a:	6020      	str	r0, [r4, #0]
 800183c:	4629      	mov	r1, r5
 800183e:	4630      	mov	r0, r6
 8001840:	f000 fafe 	bl	8001e40 <_sbrk_r>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d124      	bne.n	8001892 <_malloc_r+0x92>
 8001848:	230c      	movs	r3, #12
 800184a:	4630      	mov	r0, r6
 800184c:	6033      	str	r3, [r6, #0]
 800184e:	f000 fbb0 	bl	8001fb2 <__malloc_unlock>
 8001852:	e7e4      	b.n	800181e <_malloc_r+0x1e>
 8001854:	680b      	ldr	r3, [r1, #0]
 8001856:	1b5b      	subs	r3, r3, r5
 8001858:	d418      	bmi.n	800188c <_malloc_r+0x8c>
 800185a:	2b0b      	cmp	r3, #11
 800185c:	d90f      	bls.n	800187e <_malloc_r+0x7e>
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	18cc      	adds	r4, r1, r3
 8001862:	50cd      	str	r5, [r1, r3]
 8001864:	4630      	mov	r0, r6
 8001866:	f000 fba4 	bl	8001fb2 <__malloc_unlock>
 800186a:	f104 000b 	add.w	r0, r4, #11
 800186e:	1d23      	adds	r3, r4, #4
 8001870:	f020 0007 	bic.w	r0, r0, #7
 8001874:	1ac3      	subs	r3, r0, r3
 8001876:	d0d3      	beq.n	8001820 <_malloc_r+0x20>
 8001878:	425a      	negs	r2, r3
 800187a:	50e2      	str	r2, [r4, r3]
 800187c:	e7d0      	b.n	8001820 <_malloc_r+0x20>
 800187e:	684b      	ldr	r3, [r1, #4]
 8001880:	428c      	cmp	r4, r1
 8001882:	bf16      	itet	ne
 8001884:	6063      	strne	r3, [r4, #4]
 8001886:	6013      	streq	r3, [r2, #0]
 8001888:	460c      	movne	r4, r1
 800188a:	e7eb      	b.n	8001864 <_malloc_r+0x64>
 800188c:	460c      	mov	r4, r1
 800188e:	6849      	ldr	r1, [r1, #4]
 8001890:	e7cc      	b.n	800182c <_malloc_r+0x2c>
 8001892:	1cc4      	adds	r4, r0, #3
 8001894:	f024 0403 	bic.w	r4, r4, #3
 8001898:	42a0      	cmp	r0, r4
 800189a:	d005      	beq.n	80018a8 <_malloc_r+0xa8>
 800189c:	1a21      	subs	r1, r4, r0
 800189e:	4630      	mov	r0, r6
 80018a0:	f000 face 	bl	8001e40 <_sbrk_r>
 80018a4:	3001      	adds	r0, #1
 80018a6:	d0cf      	beq.n	8001848 <_malloc_r+0x48>
 80018a8:	6025      	str	r5, [r4, #0]
 80018aa:	e7db      	b.n	8001864 <_malloc_r+0x64>
 80018ac:	200000a8 	.word	0x200000a8
 80018b0:	200000ac 	.word	0x200000ac

080018b4 <__sfputc_r>:
 80018b4:	6893      	ldr	r3, [r2, #8]
 80018b6:	b410      	push	{r4}
 80018b8:	3b01      	subs	r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	6093      	str	r3, [r2, #8]
 80018be:	da07      	bge.n	80018d0 <__sfputc_r+0x1c>
 80018c0:	6994      	ldr	r4, [r2, #24]
 80018c2:	42a3      	cmp	r3, r4
 80018c4:	db01      	blt.n	80018ca <__sfputc_r+0x16>
 80018c6:	290a      	cmp	r1, #10
 80018c8:	d102      	bne.n	80018d0 <__sfputc_r+0x1c>
 80018ca:	bc10      	pop	{r4}
 80018cc:	f7ff bcae 	b.w	800122c <__swbuf_r>
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	1c58      	adds	r0, r3, #1
 80018d4:	6010      	str	r0, [r2, #0]
 80018d6:	7019      	strb	r1, [r3, #0]
 80018d8:	4608      	mov	r0, r1
 80018da:	bc10      	pop	{r4}
 80018dc:	4770      	bx	lr

080018de <__sfputs_r>:
 80018de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e0:	4606      	mov	r6, r0
 80018e2:	460f      	mov	r7, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	18d5      	adds	r5, r2, r3
 80018e8:	42ac      	cmp	r4, r5
 80018ea:	d101      	bne.n	80018f0 <__sfputs_r+0x12>
 80018ec:	2000      	movs	r0, #0
 80018ee:	e007      	b.n	8001900 <__sfputs_r+0x22>
 80018f0:	463a      	mov	r2, r7
 80018f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018f6:	4630      	mov	r0, r6
 80018f8:	f7ff ffdc 	bl	80018b4 <__sfputc_r>
 80018fc:	1c43      	adds	r3, r0, #1
 80018fe:	d1f3      	bne.n	80018e8 <__sfputs_r+0xa>
 8001900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001904 <_vfiprintf_r>:
 8001904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001908:	460c      	mov	r4, r1
 800190a:	b09d      	sub	sp, #116	; 0x74
 800190c:	4617      	mov	r7, r2
 800190e:	461d      	mov	r5, r3
 8001910:	4606      	mov	r6, r0
 8001912:	b118      	cbz	r0, 800191c <_vfiprintf_r+0x18>
 8001914:	6983      	ldr	r3, [r0, #24]
 8001916:	b90b      	cbnz	r3, 800191c <_vfiprintf_r+0x18>
 8001918:	f7ff fe38 	bl	800158c <__sinit>
 800191c:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <_vfiprintf_r+0x20c>)
 800191e:	429c      	cmp	r4, r3
 8001920:	d158      	bne.n	80019d4 <_vfiprintf_r+0xd0>
 8001922:	6874      	ldr	r4, [r6, #4]
 8001924:	89a3      	ldrh	r3, [r4, #12]
 8001926:	0718      	lsls	r0, r3, #28
 8001928:	d55e      	bpl.n	80019e8 <_vfiprintf_r+0xe4>
 800192a:	6923      	ldr	r3, [r4, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d05b      	beq.n	80019e8 <_vfiprintf_r+0xe4>
 8001930:	2300      	movs	r3, #0
 8001932:	9309      	str	r3, [sp, #36]	; 0x24
 8001934:	2320      	movs	r3, #32
 8001936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800193a:	2330      	movs	r3, #48	; 0x30
 800193c:	f04f 0b01 	mov.w	fp, #1
 8001940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001944:	9503      	str	r5, [sp, #12]
 8001946:	46b8      	mov	r8, r7
 8001948:	4645      	mov	r5, r8
 800194a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800194e:	b10b      	cbz	r3, 8001954 <_vfiprintf_r+0x50>
 8001950:	2b25      	cmp	r3, #37	; 0x25
 8001952:	d154      	bne.n	80019fe <_vfiprintf_r+0xfa>
 8001954:	ebb8 0a07 	subs.w	sl, r8, r7
 8001958:	d00b      	beq.n	8001972 <_vfiprintf_r+0x6e>
 800195a:	4653      	mov	r3, sl
 800195c:	463a      	mov	r2, r7
 800195e:	4621      	mov	r1, r4
 8001960:	4630      	mov	r0, r6
 8001962:	f7ff ffbc 	bl	80018de <__sfputs_r>
 8001966:	3001      	adds	r0, #1
 8001968:	f000 80c2 	beq.w	8001af0 <_vfiprintf_r+0x1ec>
 800196c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800196e:	4453      	add	r3, sl
 8001970:	9309      	str	r3, [sp, #36]	; 0x24
 8001972:	f898 3000 	ldrb.w	r3, [r8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80ba 	beq.w	8001af0 <_vfiprintf_r+0x1ec>
 800197c:	2300      	movs	r3, #0
 800197e:	f04f 32ff 	mov.w	r2, #4294967295
 8001982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001986:	9304      	str	r3, [sp, #16]
 8001988:	9307      	str	r3, [sp, #28]
 800198a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800198e:	931a      	str	r3, [sp, #104]	; 0x68
 8001990:	46a8      	mov	r8, r5
 8001992:	2205      	movs	r2, #5
 8001994:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001998:	485e      	ldr	r0, [pc, #376]	; (8001b14 <_vfiprintf_r+0x210>)
 800199a:	f000 fafb 	bl	8001f94 <memchr>
 800199e:	9b04      	ldr	r3, [sp, #16]
 80019a0:	bb78      	cbnz	r0, 8001a02 <_vfiprintf_r+0xfe>
 80019a2:	06d9      	lsls	r1, r3, #27
 80019a4:	bf44      	itt	mi
 80019a6:	2220      	movmi	r2, #32
 80019a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019ac:	071a      	lsls	r2, r3, #28
 80019ae:	bf44      	itt	mi
 80019b0:	222b      	movmi	r2, #43	; 0x2b
 80019b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80019b6:	782a      	ldrb	r2, [r5, #0]
 80019b8:	2a2a      	cmp	r2, #42	; 0x2a
 80019ba:	d02a      	beq.n	8001a12 <_vfiprintf_r+0x10e>
 80019bc:	46a8      	mov	r8, r5
 80019be:	2000      	movs	r0, #0
 80019c0:	250a      	movs	r5, #10
 80019c2:	9a07      	ldr	r2, [sp, #28]
 80019c4:	4641      	mov	r1, r8
 80019c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019ca:	3b30      	subs	r3, #48	; 0x30
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d969      	bls.n	8001aa4 <_vfiprintf_r+0x1a0>
 80019d0:	b360      	cbz	r0, 8001a2c <_vfiprintf_r+0x128>
 80019d2:	e024      	b.n	8001a1e <_vfiprintf_r+0x11a>
 80019d4:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <_vfiprintf_r+0x214>)
 80019d6:	429c      	cmp	r4, r3
 80019d8:	d101      	bne.n	80019de <_vfiprintf_r+0xda>
 80019da:	68b4      	ldr	r4, [r6, #8]
 80019dc:	e7a2      	b.n	8001924 <_vfiprintf_r+0x20>
 80019de:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <_vfiprintf_r+0x218>)
 80019e0:	429c      	cmp	r4, r3
 80019e2:	bf08      	it	eq
 80019e4:	68f4      	ldreq	r4, [r6, #12]
 80019e6:	e79d      	b.n	8001924 <_vfiprintf_r+0x20>
 80019e8:	4621      	mov	r1, r4
 80019ea:	4630      	mov	r0, r6
 80019ec:	f7ff fc70 	bl	80012d0 <__swsetup_r>
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d09d      	beq.n	8001930 <_vfiprintf_r+0x2c>
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	b01d      	add	sp, #116	; 0x74
 80019fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019fe:	46a8      	mov	r8, r5
 8001a00:	e7a2      	b.n	8001948 <_vfiprintf_r+0x44>
 8001a02:	4a44      	ldr	r2, [pc, #272]	; (8001b14 <_vfiprintf_r+0x210>)
 8001a04:	4645      	mov	r5, r8
 8001a06:	1a80      	subs	r0, r0, r2
 8001a08:	fa0b f000 	lsl.w	r0, fp, r0
 8001a0c:	4318      	orrs	r0, r3
 8001a0e:	9004      	str	r0, [sp, #16]
 8001a10:	e7be      	b.n	8001990 <_vfiprintf_r+0x8c>
 8001a12:	9a03      	ldr	r2, [sp, #12]
 8001a14:	1d11      	adds	r1, r2, #4
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	9103      	str	r1, [sp, #12]
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	db01      	blt.n	8001a22 <_vfiprintf_r+0x11e>
 8001a1e:	9207      	str	r2, [sp, #28]
 8001a20:	e004      	b.n	8001a2c <_vfiprintf_r+0x128>
 8001a22:	4252      	negs	r2, r2
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	9207      	str	r2, [sp, #28]
 8001a2a:	9304      	str	r3, [sp, #16]
 8001a2c:	f898 3000 	ldrb.w	r3, [r8]
 8001a30:	2b2e      	cmp	r3, #46	; 0x2e
 8001a32:	d10e      	bne.n	8001a52 <_vfiprintf_r+0x14e>
 8001a34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001a38:	2b2a      	cmp	r3, #42	; 0x2a
 8001a3a:	d138      	bne.n	8001aae <_vfiprintf_r+0x1aa>
 8001a3c:	9b03      	ldr	r3, [sp, #12]
 8001a3e:	f108 0802 	add.w	r8, r8, #2
 8001a42:	1d1a      	adds	r2, r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	9203      	str	r2, [sp, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bfb8      	it	lt
 8001a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a50:	9305      	str	r3, [sp, #20]
 8001a52:	4d33      	ldr	r5, [pc, #204]	; (8001b20 <_vfiprintf_r+0x21c>)
 8001a54:	2203      	movs	r2, #3
 8001a56:	f898 1000 	ldrb.w	r1, [r8]
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 fa9a 	bl	8001f94 <memchr>
 8001a60:	b140      	cbz	r0, 8001a74 <_vfiprintf_r+0x170>
 8001a62:	2340      	movs	r3, #64	; 0x40
 8001a64:	1b40      	subs	r0, r0, r5
 8001a66:	fa03 f000 	lsl.w	r0, r3, r0
 8001a6a:	9b04      	ldr	r3, [sp, #16]
 8001a6c:	f108 0801 	add.w	r8, r8, #1
 8001a70:	4303      	orrs	r3, r0
 8001a72:	9304      	str	r3, [sp, #16]
 8001a74:	f898 1000 	ldrb.w	r1, [r8]
 8001a78:	2206      	movs	r2, #6
 8001a7a:	482a      	ldr	r0, [pc, #168]	; (8001b24 <_vfiprintf_r+0x220>)
 8001a7c:	f108 0701 	add.w	r7, r8, #1
 8001a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a84:	f000 fa86 	bl	8001f94 <memchr>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d037      	beq.n	8001afc <_vfiprintf_r+0x1f8>
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <_vfiprintf_r+0x224>)
 8001a8e:	bb1b      	cbnz	r3, 8001ad8 <_vfiprintf_r+0x1d4>
 8001a90:	9b03      	ldr	r3, [sp, #12]
 8001a92:	3307      	adds	r3, #7
 8001a94:	f023 0307 	bic.w	r3, r3, #7
 8001a98:	3308      	adds	r3, #8
 8001a9a:	9303      	str	r3, [sp, #12]
 8001a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a9e:	444b      	add	r3, r9
 8001aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8001aa2:	e750      	b.n	8001946 <_vfiprintf_r+0x42>
 8001aa4:	fb05 3202 	mla	r2, r5, r2, r3
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	4688      	mov	r8, r1
 8001aac:	e78a      	b.n	80019c4 <_vfiprintf_r+0xc0>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	250a      	movs	r5, #10
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f108 0801 	add.w	r8, r8, #1
 8001ab8:	9305      	str	r3, [sp, #20]
 8001aba:	4640      	mov	r0, r8
 8001abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ac0:	3a30      	subs	r2, #48	; 0x30
 8001ac2:	2a09      	cmp	r2, #9
 8001ac4:	d903      	bls.n	8001ace <_vfiprintf_r+0x1ca>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0c3      	beq.n	8001a52 <_vfiprintf_r+0x14e>
 8001aca:	9105      	str	r1, [sp, #20]
 8001acc:	e7c1      	b.n	8001a52 <_vfiprintf_r+0x14e>
 8001ace:	fb05 2101 	mla	r1, r5, r1, r2
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	4680      	mov	r8, r0
 8001ad6:	e7f0      	b.n	8001aba <_vfiprintf_r+0x1b6>
 8001ad8:	ab03      	add	r3, sp, #12
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4622      	mov	r2, r4
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <_vfiprintf_r+0x228>)
 8001ae0:	a904      	add	r1, sp, #16
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001aec:	4681      	mov	r9, r0
 8001aee:	d1d5      	bne.n	8001a9c <_vfiprintf_r+0x198>
 8001af0:	89a3      	ldrh	r3, [r4, #12]
 8001af2:	065b      	lsls	r3, r3, #25
 8001af4:	f53f af7e 	bmi.w	80019f4 <_vfiprintf_r+0xf0>
 8001af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001afa:	e77d      	b.n	80019f8 <_vfiprintf_r+0xf4>
 8001afc:	ab03      	add	r3, sp, #12
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4622      	mov	r2, r4
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <_vfiprintf_r+0x228>)
 8001b04:	a904      	add	r1, sp, #16
 8001b06:	4630      	mov	r0, r6
 8001b08:	f000 f888 	bl	8001c1c <_printf_i>
 8001b0c:	e7ec      	b.n	8001ae8 <_vfiprintf_r+0x1e4>
 8001b0e:	bf00      	nop
 8001b10:	0800265c 	.word	0x0800265c
 8001b14:	0800269c 	.word	0x0800269c
 8001b18:	0800267c 	.word	0x0800267c
 8001b1c:	0800263c 	.word	0x0800263c
 8001b20:	080026a2 	.word	0x080026a2
 8001b24:	080026a6 	.word	0x080026a6
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	080018df 	.word	0x080018df

08001b30 <_printf_common>:
 8001b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b34:	4691      	mov	r9, r2
 8001b36:	461f      	mov	r7, r3
 8001b38:	688a      	ldr	r2, [r1, #8]
 8001b3a:	690b      	ldr	r3, [r1, #16]
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	bfb8      	it	lt
 8001b42:	4613      	movlt	r3, r2
 8001b44:	f8c9 3000 	str.w	r3, [r9]
 8001b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b52:	b112      	cbz	r2, 8001b5a <_printf_common+0x2a>
 8001b54:	3301      	adds	r3, #1
 8001b56:	f8c9 3000 	str.w	r3, [r9]
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	0699      	lsls	r1, r3, #26
 8001b5e:	bf42      	ittt	mi
 8001b60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b64:	3302      	addmi	r3, #2
 8001b66:	f8c9 3000 	strmi.w	r3, [r9]
 8001b6a:	6825      	ldr	r5, [r4, #0]
 8001b6c:	f015 0506 	ands.w	r5, r5, #6
 8001b70:	d107      	bne.n	8001b82 <_printf_common+0x52>
 8001b72:	f104 0a19 	add.w	sl, r4, #25
 8001b76:	68e3      	ldr	r3, [r4, #12]
 8001b78:	f8d9 2000 	ldr.w	r2, [r9]
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	42ab      	cmp	r3, r5
 8001b80:	dc29      	bgt.n	8001bd6 <_printf_common+0xa6>
 8001b82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	3300      	adds	r3, #0
 8001b8a:	bf18      	it	ne
 8001b8c:	2301      	movne	r3, #1
 8001b8e:	0692      	lsls	r2, r2, #26
 8001b90:	d42e      	bmi.n	8001bf0 <_printf_common+0xc0>
 8001b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b96:	4639      	mov	r1, r7
 8001b98:	4630      	mov	r0, r6
 8001b9a:	47c0      	blx	r8
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	d021      	beq.n	8001be4 <_printf_common+0xb4>
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	68e5      	ldr	r5, [r4, #12]
 8001ba4:	f003 0306 	and.w	r3, r3, #6
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	bf18      	it	ne
 8001bac:	2500      	movne	r5, #0
 8001bae:	f8d9 2000 	ldr.w	r2, [r9]
 8001bb2:	f04f 0900 	mov.w	r9, #0
 8001bb6:	bf08      	it	eq
 8001bb8:	1aad      	subeq	r5, r5, r2
 8001bba:	68a3      	ldr	r3, [r4, #8]
 8001bbc:	6922      	ldr	r2, [r4, #16]
 8001bbe:	bf08      	it	eq
 8001bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bfc4      	itt	gt
 8001bc8:	1a9b      	subgt	r3, r3, r2
 8001bca:	18ed      	addgt	r5, r5, r3
 8001bcc:	341a      	adds	r4, #26
 8001bce:	454d      	cmp	r5, r9
 8001bd0:	d11a      	bne.n	8001c08 <_printf_common+0xd8>
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e008      	b.n	8001be8 <_printf_common+0xb8>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	4652      	mov	r2, sl
 8001bda:	4639      	mov	r1, r7
 8001bdc:	4630      	mov	r0, r6
 8001bde:	47c0      	blx	r8
 8001be0:	3001      	adds	r0, #1
 8001be2:	d103      	bne.n	8001bec <_printf_common+0xbc>
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bec:	3501      	adds	r5, #1
 8001bee:	e7c2      	b.n	8001b76 <_printf_common+0x46>
 8001bf0:	2030      	movs	r0, #48	; 0x30
 8001bf2:	18e1      	adds	r1, r4, r3
 8001bf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bfe:	4422      	add	r2, r4
 8001c00:	3302      	adds	r3, #2
 8001c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c06:	e7c4      	b.n	8001b92 <_printf_common+0x62>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	4630      	mov	r0, r6
 8001c10:	47c0      	blx	r8
 8001c12:	3001      	adds	r0, #1
 8001c14:	d0e6      	beq.n	8001be4 <_printf_common+0xb4>
 8001c16:	f109 0901 	add.w	r9, r9, #1
 8001c1a:	e7d8      	b.n	8001bce <_printf_common+0x9e>

08001c1c <_printf_i>:
 8001c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001c24:	460c      	mov	r4, r1
 8001c26:	7e09      	ldrb	r1, [r1, #24]
 8001c28:	b085      	sub	sp, #20
 8001c2a:	296e      	cmp	r1, #110	; 0x6e
 8001c2c:	4617      	mov	r7, r2
 8001c2e:	4606      	mov	r6, r0
 8001c30:	4698      	mov	r8, r3
 8001c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001c34:	f000 80b3 	beq.w	8001d9e <_printf_i+0x182>
 8001c38:	d822      	bhi.n	8001c80 <_printf_i+0x64>
 8001c3a:	2963      	cmp	r1, #99	; 0x63
 8001c3c:	d036      	beq.n	8001cac <_printf_i+0x90>
 8001c3e:	d80a      	bhi.n	8001c56 <_printf_i+0x3a>
 8001c40:	2900      	cmp	r1, #0
 8001c42:	f000 80b9 	beq.w	8001db8 <_printf_i+0x19c>
 8001c46:	2958      	cmp	r1, #88	; 0x58
 8001c48:	f000 8083 	beq.w	8001d52 <_printf_i+0x136>
 8001c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c54:	e032      	b.n	8001cbc <_printf_i+0xa0>
 8001c56:	2964      	cmp	r1, #100	; 0x64
 8001c58:	d001      	beq.n	8001c5e <_printf_i+0x42>
 8001c5a:	2969      	cmp	r1, #105	; 0x69
 8001c5c:	d1f6      	bne.n	8001c4c <_printf_i+0x30>
 8001c5e:	6820      	ldr	r0, [r4, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	0605      	lsls	r5, r0, #24
 8001c64:	f103 0104 	add.w	r1, r3, #4
 8001c68:	d52a      	bpl.n	8001cc0 <_printf_i+0xa4>
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6011      	str	r1, [r2, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da03      	bge.n	8001c7a <_printf_i+0x5e>
 8001c72:	222d      	movs	r2, #45	; 0x2d
 8001c74:	425b      	negs	r3, r3
 8001c76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c7a:	486f      	ldr	r0, [pc, #444]	; (8001e38 <_printf_i+0x21c>)
 8001c7c:	220a      	movs	r2, #10
 8001c7e:	e039      	b.n	8001cf4 <_printf_i+0xd8>
 8001c80:	2973      	cmp	r1, #115	; 0x73
 8001c82:	f000 809d 	beq.w	8001dc0 <_printf_i+0x1a4>
 8001c86:	d808      	bhi.n	8001c9a <_printf_i+0x7e>
 8001c88:	296f      	cmp	r1, #111	; 0x6f
 8001c8a:	d020      	beq.n	8001cce <_printf_i+0xb2>
 8001c8c:	2970      	cmp	r1, #112	; 0x70
 8001c8e:	d1dd      	bne.n	8001c4c <_printf_i+0x30>
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f043 0320 	orr.w	r3, r3, #32
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	e003      	b.n	8001ca2 <_printf_i+0x86>
 8001c9a:	2975      	cmp	r1, #117	; 0x75
 8001c9c:	d017      	beq.n	8001cce <_printf_i+0xb2>
 8001c9e:	2978      	cmp	r1, #120	; 0x78
 8001ca0:	d1d4      	bne.n	8001c4c <_printf_i+0x30>
 8001ca2:	2378      	movs	r3, #120	; 0x78
 8001ca4:	4865      	ldr	r0, [pc, #404]	; (8001e3c <_printf_i+0x220>)
 8001ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001caa:	e055      	b.n	8001d58 <_printf_i+0x13c>
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cb2:	1d19      	adds	r1, r3, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6011      	str	r1, [r2, #0]
 8001cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e08c      	b.n	8001dda <_printf_i+0x1be>
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001cc6:	6011      	str	r1, [r2, #0]
 8001cc8:	bf18      	it	ne
 8001cca:	b21b      	sxthne	r3, r3
 8001ccc:	e7cf      	b.n	8001c6e <_printf_i+0x52>
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	6825      	ldr	r5, [r4, #0]
 8001cd2:	1d18      	adds	r0, r3, #4
 8001cd4:	6010      	str	r0, [r2, #0]
 8001cd6:	0628      	lsls	r0, r5, #24
 8001cd8:	d501      	bpl.n	8001cde <_printf_i+0xc2>
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	e002      	b.n	8001ce4 <_printf_i+0xc8>
 8001cde:	0668      	lsls	r0, r5, #25
 8001ce0:	d5fb      	bpl.n	8001cda <_printf_i+0xbe>
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	296f      	cmp	r1, #111	; 0x6f
 8001ce6:	bf14      	ite	ne
 8001ce8:	220a      	movne	r2, #10
 8001cea:	2208      	moveq	r2, #8
 8001cec:	4852      	ldr	r0, [pc, #328]	; (8001e38 <_printf_i+0x21c>)
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cf4:	6865      	ldr	r5, [r4, #4]
 8001cf6:	2d00      	cmp	r5, #0
 8001cf8:	60a5      	str	r5, [r4, #8]
 8001cfa:	f2c0 8095 	blt.w	8001e28 <_printf_i+0x20c>
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	f021 0104 	bic.w	r1, r1, #4
 8001d04:	6021      	str	r1, [r4, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d13d      	bne.n	8001d86 <_printf_i+0x16a>
 8001d0a:	2d00      	cmp	r5, #0
 8001d0c:	f040 808e 	bne.w	8001e2c <_printf_i+0x210>
 8001d10:	4665      	mov	r5, ip
 8001d12:	2a08      	cmp	r2, #8
 8001d14:	d10b      	bne.n	8001d2e <_printf_i+0x112>
 8001d16:	6823      	ldr	r3, [r4, #0]
 8001d18:	07db      	lsls	r3, r3, #31
 8001d1a:	d508      	bpl.n	8001d2e <_printf_i+0x112>
 8001d1c:	6923      	ldr	r3, [r4, #16]
 8001d1e:	6862      	ldr	r2, [r4, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	bfde      	ittt	le
 8001d24:	2330      	movle	r3, #48	; 0x30
 8001d26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001d2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001d2e:	ebac 0305 	sub.w	r3, ip, r5
 8001d32:	6123      	str	r3, [r4, #16]
 8001d34:	f8cd 8000 	str.w	r8, [sp]
 8001d38:	463b      	mov	r3, r7
 8001d3a:	aa03      	add	r2, sp, #12
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	4630      	mov	r0, r6
 8001d40:	f7ff fef6 	bl	8001b30 <_printf_common>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d14d      	bne.n	8001de4 <_printf_i+0x1c8>
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4c:	b005      	add	sp, #20
 8001d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d52:	4839      	ldr	r0, [pc, #228]	; (8001e38 <_printf_i+0x21c>)
 8001d54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	6821      	ldr	r1, [r4, #0]
 8001d5c:	1d1d      	adds	r5, r3, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6015      	str	r5, [r2, #0]
 8001d62:	060a      	lsls	r2, r1, #24
 8001d64:	d50b      	bpl.n	8001d7e <_printf_i+0x162>
 8001d66:	07ca      	lsls	r2, r1, #31
 8001d68:	bf44      	itt	mi
 8001d6a:	f041 0120 	orrmi.w	r1, r1, #32
 8001d6e:	6021      	strmi	r1, [r4, #0]
 8001d70:	b91b      	cbnz	r3, 8001d7a <_printf_i+0x15e>
 8001d72:	6822      	ldr	r2, [r4, #0]
 8001d74:	f022 0220 	bic.w	r2, r2, #32
 8001d78:	6022      	str	r2, [r4, #0]
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	e7b7      	b.n	8001cee <_printf_i+0xd2>
 8001d7e:	064d      	lsls	r5, r1, #25
 8001d80:	bf48      	it	mi
 8001d82:	b29b      	uxthmi	r3, r3
 8001d84:	e7ef      	b.n	8001d66 <_printf_i+0x14a>
 8001d86:	4665      	mov	r5, ip
 8001d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d8c:	fb02 3311 	mls	r3, r2, r1, r3
 8001d90:	5cc3      	ldrb	r3, [r0, r3]
 8001d92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d96:	460b      	mov	r3, r1
 8001d98:	2900      	cmp	r1, #0
 8001d9a:	d1f5      	bne.n	8001d88 <_printf_i+0x16c>
 8001d9c:	e7b9      	b.n	8001d12 <_printf_i+0xf6>
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	6825      	ldr	r5, [r4, #0]
 8001da2:	1d18      	adds	r0, r3, #4
 8001da4:	6961      	ldr	r1, [r4, #20]
 8001da6:	6010      	str	r0, [r2, #0]
 8001da8:	0628      	lsls	r0, r5, #24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	d501      	bpl.n	8001db2 <_printf_i+0x196>
 8001dae:	6019      	str	r1, [r3, #0]
 8001db0:	e002      	b.n	8001db8 <_printf_i+0x19c>
 8001db2:	066a      	lsls	r2, r5, #25
 8001db4:	d5fb      	bpl.n	8001dae <_printf_i+0x192>
 8001db6:	8019      	strh	r1, [r3, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	4665      	mov	r5, ip
 8001dbc:	6123      	str	r3, [r4, #16]
 8001dbe:	e7b9      	b.n	8001d34 <_printf_i+0x118>
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	1d19      	adds	r1, r3, #4
 8001dc4:	6011      	str	r1, [r2, #0]
 8001dc6:	681d      	ldr	r5, [r3, #0]
 8001dc8:	6862      	ldr	r2, [r4, #4]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f000 f8e1 	bl	8001f94 <memchr>
 8001dd2:	b108      	cbz	r0, 8001dd8 <_printf_i+0x1bc>
 8001dd4:	1b40      	subs	r0, r0, r5
 8001dd6:	6060      	str	r0, [r4, #4]
 8001dd8:	6863      	ldr	r3, [r4, #4]
 8001dda:	6123      	str	r3, [r4, #16]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001de2:	e7a7      	b.n	8001d34 <_printf_i+0x118>
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	462a      	mov	r2, r5
 8001de8:	4639      	mov	r1, r7
 8001dea:	4630      	mov	r0, r6
 8001dec:	47c0      	blx	r8
 8001dee:	3001      	adds	r0, #1
 8001df0:	d0aa      	beq.n	8001d48 <_printf_i+0x12c>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	079b      	lsls	r3, r3, #30
 8001df6:	d413      	bmi.n	8001e20 <_printf_i+0x204>
 8001df8:	68e0      	ldr	r0, [r4, #12]
 8001dfa:	9b03      	ldr	r3, [sp, #12]
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	bfb8      	it	lt
 8001e00:	4618      	movlt	r0, r3
 8001e02:	e7a3      	b.n	8001d4c <_printf_i+0x130>
 8001e04:	2301      	movs	r3, #1
 8001e06:	464a      	mov	r2, r9
 8001e08:	4639      	mov	r1, r7
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	47c0      	blx	r8
 8001e0e:	3001      	adds	r0, #1
 8001e10:	d09a      	beq.n	8001d48 <_printf_i+0x12c>
 8001e12:	3501      	adds	r5, #1
 8001e14:	68e3      	ldr	r3, [r4, #12]
 8001e16:	9a03      	ldr	r2, [sp, #12]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	42ab      	cmp	r3, r5
 8001e1c:	dcf2      	bgt.n	8001e04 <_printf_i+0x1e8>
 8001e1e:	e7eb      	b.n	8001df8 <_printf_i+0x1dc>
 8001e20:	2500      	movs	r5, #0
 8001e22:	f104 0919 	add.w	r9, r4, #25
 8001e26:	e7f5      	b.n	8001e14 <_printf_i+0x1f8>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ac      	bne.n	8001d86 <_printf_i+0x16a>
 8001e2c:	7803      	ldrb	r3, [r0, #0]
 8001e2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e36:	e76c      	b.n	8001d12 <_printf_i+0xf6>
 8001e38:	080026ad 	.word	0x080026ad
 8001e3c:	080026be 	.word	0x080026be

08001e40 <_sbrk_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	2300      	movs	r3, #0
 8001e44:	4c05      	ldr	r4, [pc, #20]	; (8001e5c <_sbrk_r+0x1c>)
 8001e46:	4605      	mov	r5, r0
 8001e48:	4608      	mov	r0, r1
 8001e4a:	6023      	str	r3, [r4, #0]
 8001e4c:	f000 f9ca 	bl	80021e4 <_sbrk>
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d102      	bne.n	8001e5a <_sbrk_r+0x1a>
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	b103      	cbz	r3, 8001e5a <_sbrk_r+0x1a>
 8001e58:	602b      	str	r3, [r5, #0]
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	200001a8 	.word	0x200001a8

08001e60 <__sread>:
 8001e60:	b510      	push	{r4, lr}
 8001e62:	460c      	mov	r4, r1
 8001e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e68:	f000 f8a4 	bl	8001fb4 <_read_r>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	bfab      	itete	ge
 8001e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e72:	89a3      	ldrhlt	r3, [r4, #12]
 8001e74:	181b      	addge	r3, r3, r0
 8001e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e7a:	bfac      	ite	ge
 8001e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e7e:	81a3      	strhlt	r3, [r4, #12]
 8001e80:	bd10      	pop	{r4, pc}

08001e82 <__swrite>:
 8001e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e86:	461f      	mov	r7, r3
 8001e88:	898b      	ldrh	r3, [r1, #12]
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	05db      	lsls	r3, r3, #23
 8001e8e:	460c      	mov	r4, r1
 8001e90:	4616      	mov	r6, r2
 8001e92:	d505      	bpl.n	8001ea0 <__swrite+0x1e>
 8001e94:	2302      	movs	r3, #2
 8001e96:	2200      	movs	r2, #0
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	f000 f868 	bl	8001f70 <_lseek_r>
 8001ea0:	89a3      	ldrh	r3, [r4, #12]
 8001ea2:	4632      	mov	r2, r6
 8001ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea8:	81a3      	strh	r3, [r4, #12]
 8001eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb6:	f000 b817 	b.w	8001ee8 <_write_r>

08001eba <__sseek>:
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec2:	f000 f855 	bl	8001f70 <_lseek_r>
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	89a3      	ldrh	r3, [r4, #12]
 8001eca:	bf15      	itete	ne
 8001ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ed6:	81a3      	strheq	r3, [r4, #12]
 8001ed8:	bf18      	it	ne
 8001eda:	81a3      	strhne	r3, [r4, #12]
 8001edc:	bd10      	pop	{r4, pc}

08001ede <__sclose>:
 8001ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ee2:	f000 b813 	b.w	8001f0c <_close_r>
	...

08001ee8 <_write_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4605      	mov	r5, r0
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	4c05      	ldr	r4, [pc, #20]	; (8001f08 <_write_r+0x20>)
 8001ef4:	6022      	str	r2, [r4, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f000 f91f 	bl	800213a <_write>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d102      	bne.n	8001f06 <_write_r+0x1e>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	b103      	cbz	r3, 8001f06 <_write_r+0x1e>
 8001f04:	602b      	str	r3, [r5, #0]
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	200001a8 	.word	0x200001a8

08001f0c <_close_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	2300      	movs	r3, #0
 8001f10:	4c05      	ldr	r4, [pc, #20]	; (8001f28 <_close_r+0x1c>)
 8001f12:	4605      	mov	r5, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	6023      	str	r3, [r4, #0]
 8001f18:	f000 f93e 	bl	8002198 <_close>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d102      	bne.n	8001f26 <_close_r+0x1a>
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	b103      	cbz	r3, 8001f26 <_close_r+0x1a>
 8001f24:	602b      	str	r3, [r5, #0]
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	200001a8 	.word	0x200001a8

08001f2c <_fstat_r>:
 8001f2c:	b538      	push	{r3, r4, r5, lr}
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4c06      	ldr	r4, [pc, #24]	; (8001f4c <_fstat_r+0x20>)
 8001f32:	4605      	mov	r5, r0
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	f000 f998 	bl	800226e <_fstat>
 8001f3e:	1c43      	adds	r3, r0, #1
 8001f40:	d102      	bne.n	8001f48 <_fstat_r+0x1c>
 8001f42:	6823      	ldr	r3, [r4, #0]
 8001f44:	b103      	cbz	r3, 8001f48 <_fstat_r+0x1c>
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	bd38      	pop	{r3, r4, r5, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200001a8 	.word	0x200001a8

08001f50 <_isatty_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	2300      	movs	r3, #0
 8001f54:	4c05      	ldr	r4, [pc, #20]	; (8001f6c <_isatty_r+0x1c>)
 8001f56:	4605      	mov	r5, r0
 8001f58:	4608      	mov	r0, r1
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	f000 faea 	bl	8002534 <_isatty>
 8001f60:	1c43      	adds	r3, r0, #1
 8001f62:	d102      	bne.n	8001f6a <_isatty_r+0x1a>
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	b103      	cbz	r3, 8001f6a <_isatty_r+0x1a>
 8001f68:	602b      	str	r3, [r5, #0]
 8001f6a:	bd38      	pop	{r3, r4, r5, pc}
 8001f6c:	200001a8 	.word	0x200001a8

08001f70 <_lseek_r>:
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4605      	mov	r5, r0
 8001f74:	4608      	mov	r0, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4c05      	ldr	r4, [pc, #20]	; (8001f90 <_lseek_r+0x20>)
 8001f7c:	6022      	str	r2, [r4, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f000 f8c9 	bl	8002116 <_lseek>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_lseek_r+0x1e>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_lseek_r+0x1e>
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	200001a8 	.word	0x200001a8

08001f94 <memchr>:
 8001f94:	b510      	push	{r4, lr}
 8001f96:	b2c9      	uxtb	r1, r1
 8001f98:	4402      	add	r2, r0
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	d101      	bne.n	8001fa4 <memchr+0x10>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e003      	b.n	8001fac <memchr+0x18>
 8001fa4:	781c      	ldrb	r4, [r3, #0]
 8001fa6:	3001      	adds	r0, #1
 8001fa8:	428c      	cmp	r4, r1
 8001faa:	d1f6      	bne.n	8001f9a <memchr+0x6>
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd10      	pop	{r4, pc}

08001fb0 <__malloc_lock>:
 8001fb0:	4770      	bx	lr

08001fb2 <__malloc_unlock>:
 8001fb2:	4770      	bx	lr

08001fb4 <_read_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	4c05      	ldr	r4, [pc, #20]	; (8001fd4 <_read_r+0x20>)
 8001fc0:	6022      	str	r2, [r4, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	f000 f850 	bl	8002068 <_read>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d102      	bne.n	8001fd2 <_read_r+0x1e>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	b103      	cbz	r3, 8001fd2 <_read_r+0x1e>
 8001fd0:	602b      	str	r3, [r5, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	200001a8 	.word	0x200001a8

08001fd8 <findslot>:
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <findslot+0x2c>)
 8001fda:	b510      	push	{r4, lr}
 8001fdc:	4604      	mov	r4, r0
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	b118      	cbz	r0, 8001fea <findslot+0x12>
 8001fe2:	6983      	ldr	r3, [r0, #24]
 8001fe4:	b90b      	cbnz	r3, 8001fea <findslot+0x12>
 8001fe6:	f7ff fad1 	bl	800158c <__sinit>
 8001fea:	2c13      	cmp	r4, #19
 8001fec:	d807      	bhi.n	8001ffe <findslot+0x26>
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <findslot+0x30>)
 8001ff0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	d002      	beq.n	8001ffe <findslot+0x26>
 8001ff8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7fc      	b.n	8001ffc <findslot+0x24>
 8002002:	bf00      	nop
 8002004:	20000018 	.word	0x20000018
 8002008:	200000c0 	.word	0x200000c0

0800200c <checkerror>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	4605      	mov	r5, r0
 8002012:	d109      	bne.n	8002028 <checkerror+0x1c>
 8002014:	f000 faaa 	bl	800256c <__errno>
 8002018:	2413      	movs	r4, #19
 800201a:	4606      	mov	r6, r0
 800201c:	2700      	movs	r7, #0
 800201e:	4620      	mov	r0, r4
 8002020:	4639      	mov	r1, r7
 8002022:	beab      	bkpt	0x00ab
 8002024:	4604      	mov	r4, r0
 8002026:	6034      	str	r4, [r6, #0]
 8002028:	4628      	mov	r0, r5
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800202c <error>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	f000 fa9c 	bl	800256c <__errno>
 8002034:	2413      	movs	r4, #19
 8002036:	4606      	mov	r6, r0
 8002038:	2700      	movs	r7, #0
 800203a:	4620      	mov	r0, r4
 800203c:	4639      	mov	r1, r7
 800203e:	beab      	bkpt	0x00ab
 8002040:	4604      	mov	r4, r0
 8002042:	6034      	str	r4, [r6, #0]
 8002044:	4628      	mov	r0, r5
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002048 <_swiread>:
 8002048:	b530      	push	{r4, r5, lr}
 800204a:	b085      	sub	sp, #20
 800204c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002050:	9203      	str	r2, [sp, #12]
 8002052:	2406      	movs	r4, #6
 8002054:	ad01      	add	r5, sp, #4
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	beab      	bkpt	0x00ab
 800205c:	4604      	mov	r4, r0
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff ffd4 	bl	800200c <checkerror>
 8002064:	b005      	add	sp, #20
 8002066:	bd30      	pop	{r4, r5, pc}

08002068 <_read>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	460e      	mov	r6, r1
 800206c:	4615      	mov	r5, r2
 800206e:	f7ff ffb3 	bl	8001fd8 <findslot>
 8002072:	4604      	mov	r4, r0
 8002074:	b930      	cbnz	r0, 8002084 <_read+0x1c>
 8002076:	f000 fa79 	bl	800256c <__errno>
 800207a:	2309      	movs	r3, #9
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	bd70      	pop	{r4, r5, r6, pc}
 8002084:	462a      	mov	r2, r5
 8002086:	4631      	mov	r1, r6
 8002088:	6800      	ldr	r0, [r0, #0]
 800208a:	f7ff ffdd 	bl	8002048 <_swiread>
 800208e:	1c43      	adds	r3, r0, #1
 8002090:	bf1f      	itttt	ne
 8002092:	6863      	ldrne	r3, [r4, #4]
 8002094:	1a28      	subne	r0, r5, r0
 8002096:	181b      	addne	r3, r3, r0
 8002098:	6063      	strne	r3, [r4, #4]
 800209a:	e7f2      	b.n	8002082 <_read+0x1a>

0800209c <_swilseek>:
 800209c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800209e:	460c      	mov	r4, r1
 80020a0:	4616      	mov	r6, r2
 80020a2:	f7ff ff99 	bl	8001fd8 <findslot>
 80020a6:	4605      	mov	r5, r0
 80020a8:	b940      	cbnz	r0, 80020bc <_swilseek+0x20>
 80020aa:	f000 fa5f 	bl	800256c <__errno>
 80020ae:	2309      	movs	r3, #9
 80020b0:	6003      	str	r3, [r0, #0]
 80020b2:	f04f 34ff 	mov.w	r4, #4294967295
 80020b6:	4620      	mov	r0, r4
 80020b8:	b003      	add	sp, #12
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020bc:	2e02      	cmp	r6, #2
 80020be:	d903      	bls.n	80020c8 <_swilseek+0x2c>
 80020c0:	f000 fa54 	bl	800256c <__errno>
 80020c4:	2316      	movs	r3, #22
 80020c6:	e7f3      	b.n	80020b0 <_swilseek+0x14>
 80020c8:	2e01      	cmp	r6, #1
 80020ca:	d112      	bne.n	80020f2 <_swilseek+0x56>
 80020cc:	6843      	ldr	r3, [r0, #4]
 80020ce:	18e4      	adds	r4, r4, r3
 80020d0:	d4f6      	bmi.n	80020c0 <_swilseek+0x24>
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	260a      	movs	r6, #10
 80020d6:	e9cd 3400 	strd	r3, r4, [sp]
 80020da:	466f      	mov	r7, sp
 80020dc:	4630      	mov	r0, r6
 80020de:	4639      	mov	r1, r7
 80020e0:	beab      	bkpt	0x00ab
 80020e2:	4606      	mov	r6, r0
 80020e4:	4630      	mov	r0, r6
 80020e6:	f7ff ff91 	bl	800200c <checkerror>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	dbe1      	blt.n	80020b2 <_swilseek+0x16>
 80020ee:	606c      	str	r4, [r5, #4]
 80020f0:	e7e1      	b.n	80020b6 <_swilseek+0x1a>
 80020f2:	2e02      	cmp	r6, #2
 80020f4:	d1ed      	bne.n	80020d2 <_swilseek+0x36>
 80020f6:	6803      	ldr	r3, [r0, #0]
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	f847 3d08 	str.w	r3, [r7, #-8]!
 80020fe:	260c      	movs	r6, #12
 8002100:	4630      	mov	r0, r6
 8002102:	4639      	mov	r1, r7
 8002104:	beab      	bkpt	0x00ab
 8002106:	4606      	mov	r6, r0
 8002108:	4630      	mov	r0, r6
 800210a:	f7ff ff7f 	bl	800200c <checkerror>
 800210e:	1c43      	adds	r3, r0, #1
 8002110:	d0cf      	beq.n	80020b2 <_swilseek+0x16>
 8002112:	4404      	add	r4, r0
 8002114:	e7dd      	b.n	80020d2 <_swilseek+0x36>

08002116 <_lseek>:
 8002116:	f7ff bfc1 	b.w	800209c <_swilseek>

0800211a <_swiwrite>:
 800211a:	b530      	push	{r4, r5, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002122:	9203      	str	r2, [sp, #12]
 8002124:	2405      	movs	r4, #5
 8002126:	ad01      	add	r5, sp, #4
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	beab      	bkpt	0x00ab
 800212e:	4604      	mov	r4, r0
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff ff6b 	bl	800200c <checkerror>
 8002136:	b005      	add	sp, #20
 8002138:	bd30      	pop	{r4, r5, pc}

0800213a <_write>:
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	460e      	mov	r6, r1
 800213e:	4615      	mov	r5, r2
 8002140:	f7ff ff4a 	bl	8001fd8 <findslot>
 8002144:	4604      	mov	r4, r0
 8002146:	b930      	cbnz	r0, 8002156 <_write+0x1c>
 8002148:	f000 fa10 	bl	800256c <__errno>
 800214c:	2309      	movs	r3, #9
 800214e:	6003      	str	r3, [r0, #0]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	462a      	mov	r2, r5
 8002158:	4631      	mov	r1, r6
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	f7ff ffdd 	bl	800211a <_swiwrite>
 8002160:	1e02      	subs	r2, r0, #0
 8002162:	dbf5      	blt.n	8002150 <_write+0x16>
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	1aa8      	subs	r0, r5, r2
 8002168:	4403      	add	r3, r0
 800216a:	42aa      	cmp	r2, r5
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	d1f1      	bne.n	8002154 <_write+0x1a>
 8002170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002174:	2000      	movs	r0, #0
 8002176:	f7ff bf59 	b.w	800202c <error>

0800217a <_swiclose>:
 800217a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800217c:	ad02      	add	r5, sp, #8
 800217e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002182:	2402      	movs	r4, #2
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	beab      	bkpt	0x00ab
 800218a:	4604      	mov	r4, r0
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff3d 	bl	800200c <checkerror>
 8002192:	b003      	add	sp, #12
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <_close>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4605      	mov	r5, r0
 800219c:	f7ff ff1c 	bl	8001fd8 <findslot>
 80021a0:	4604      	mov	r4, r0
 80021a2:	b930      	cbnz	r0, 80021b2 <_close+0x1a>
 80021a4:	f000 f9e2 	bl	800256c <__errno>
 80021a8:	2309      	movs	r3, #9
 80021aa:	6003      	str	r3, [r0, #0]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	bd38      	pop	{r3, r4, r5, pc}
 80021b2:	3d01      	subs	r5, #1
 80021b4:	2d01      	cmp	r5, #1
 80021b6:	d809      	bhi.n	80021cc <_close+0x34>
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <_close+0x48>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d104      	bne.n	80021cc <_close+0x34>
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	6003      	str	r3, [r0, #0]
 80021c8:	2000      	movs	r0, #0
 80021ca:	e7f1      	b.n	80021b0 <_close+0x18>
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	f7ff ffd4 	bl	800217a <_swiclose>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d1ec      	bne.n	80021b0 <_close+0x18>
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	e7e8      	b.n	80021b0 <_close+0x18>
 80021de:	bf00      	nop
 80021e0:	200000c0 	.word	0x200000c0

080021e4 <_sbrk>:
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <_sbrk+0x38>)
 80021e6:	b510      	push	{r4, lr}
 80021e8:	6819      	ldr	r1, [r3, #0]
 80021ea:	4602      	mov	r2, r0
 80021ec:	b909      	cbnz	r1, 80021f2 <_sbrk+0xe>
 80021ee:	490c      	ldr	r1, [pc, #48]	; (8002220 <_sbrk+0x3c>)
 80021f0:	6019      	str	r1, [r3, #0]
 80021f2:	4669      	mov	r1, sp
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	4402      	add	r2, r0
 80021f8:	428a      	cmp	r2, r1
 80021fa:	d806      	bhi.n	800220a <_sbrk+0x26>
 80021fc:	4909      	ldr	r1, [pc, #36]	; (8002224 <_sbrk+0x40>)
 80021fe:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <_sbrk+0x44>)
 8002200:	6809      	ldr	r1, [r1, #0]
 8002202:	42a1      	cmp	r1, r4
 8002204:	d008      	beq.n	8002218 <_sbrk+0x34>
 8002206:	428a      	cmp	r2, r1
 8002208:	d906      	bls.n	8002218 <_sbrk+0x34>
 800220a:	f000 f9af 	bl	800256c <__errno>
 800220e:	230c      	movs	r3, #12
 8002210:	6003      	str	r3, [r0, #0]
 8002212:	f04f 30ff 	mov.w	r0, #4294967295
 8002216:	bd10      	pop	{r4, pc}
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e7fc      	b.n	8002216 <_sbrk+0x32>
 800221c:	200000b0 	.word	0x200000b0
 8002220:	200001b0 	.word	0x200001b0
 8002224:	2000007c 	.word	0x2000007c
 8002228:	cafedead 	.word	0xcafedead

0800222c <_swistat>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	460c      	mov	r4, r1
 8002230:	f7ff fed2 	bl	8001fd8 <findslot>
 8002234:	4606      	mov	r6, r0
 8002236:	b930      	cbnz	r0, 8002246 <_swistat+0x1a>
 8002238:	f000 f998 	bl	800256c <__errno>
 800223c:	2309      	movs	r3, #9
 800223e:	6003      	str	r3, [r0, #0]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	250c      	movs	r5, #12
 800224a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800224e:	6063      	str	r3, [r4, #4]
 8002250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002254:	6463      	str	r3, [r4, #68]	; 0x44
 8002256:	4628      	mov	r0, r5
 8002258:	4631      	mov	r1, r6
 800225a:	beab      	bkpt	0x00ab
 800225c:	4605      	mov	r5, r0
 800225e:	4628      	mov	r0, r5
 8002260:	f7ff fed4 	bl	800200c <checkerror>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	bf1c      	itt	ne
 8002268:	6120      	strne	r0, [r4, #16]
 800226a:	2000      	movne	r0, #0
 800226c:	e7ea      	b.n	8002244 <_swistat+0x18>

0800226e <_fstat>:
 800226e:	460b      	mov	r3, r1
 8002270:	b510      	push	{r4, lr}
 8002272:	2100      	movs	r1, #0
 8002274:	4604      	mov	r4, r0
 8002276:	2258      	movs	r2, #88	; 0x58
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ff53 	bl	8001124 <memset>
 800227e:	4601      	mov	r1, r0
 8002280:	4620      	mov	r0, r4
 8002282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002286:	f7ff bfd1 	b.w	800222c <_swistat>

0800228a <_stat>:
 800228a:	b538      	push	{r3, r4, r5, lr}
 800228c:	460d      	mov	r5, r1
 800228e:	4604      	mov	r4, r0
 8002290:	2258      	movs	r2, #88	; 0x58
 8002292:	2100      	movs	r1, #0
 8002294:	4628      	mov	r0, r5
 8002296:	f7fe ff45 	bl	8001124 <memset>
 800229a:	4620      	mov	r0, r4
 800229c:	2100      	movs	r1, #0
 800229e:	f000 f811 	bl	80022c4 <_swiopen>
 80022a2:	1c43      	adds	r3, r0, #1
 80022a4:	4604      	mov	r4, r0
 80022a6:	d00b      	beq.n	80022c0 <_stat+0x36>
 80022a8:	686b      	ldr	r3, [r5, #4]
 80022aa:	4629      	mov	r1, r5
 80022ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80022b0:	606b      	str	r3, [r5, #4]
 80022b2:	f7ff ffbb 	bl	800222c <_swistat>
 80022b6:	4605      	mov	r5, r0
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff ff6d 	bl	8002198 <_close>
 80022be:	462c      	mov	r4, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	bd38      	pop	{r3, r4, r5, pc}

080022c4 <_swiopen>:
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <_swiopen+0xb0>)
 80022c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022ca:	4682      	mov	sl, r0
 80022cc:	460e      	mov	r6, r1
 80022ce:	2500      	movs	r5, #0
 80022d0:	4698      	mov	r8, r3
 80022d2:	b096      	sub	sp, #88	; 0x58
 80022d4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80022d8:	00ef      	lsls	r7, r5, #3
 80022da:	1c61      	adds	r1, r4, #1
 80022dc:	d036      	beq.n	800234c <_swiopen+0x88>
 80022de:	3501      	adds	r5, #1
 80022e0:	2d14      	cmp	r5, #20
 80022e2:	d1f7      	bne.n	80022d4 <_swiopen+0x10>
 80022e4:	f000 f942 	bl	800256c <__errno>
 80022e8:	2318      	movs	r3, #24
 80022ea:	f04f 34ff 	mov.w	r4, #4294967295
 80022ee:	6003      	str	r3, [r0, #0]
 80022f0:	e03c      	b.n	800236c <_swiopen+0xa8>
 80022f2:	f240 6301 	movw	r3, #1537	; 0x601
 80022f6:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80022fa:	07b2      	lsls	r2, r6, #30
 80022fc:	bf48      	it	mi
 80022fe:	f044 0402 	orrmi.w	r4, r4, #2
 8002302:	421e      	tst	r6, r3
 8002304:	bf18      	it	ne
 8002306:	f044 0404 	orrne.w	r4, r4, #4
 800230a:	0733      	lsls	r3, r6, #28
 800230c:	bf48      	it	mi
 800230e:	f024 0404 	bicmi.w	r4, r4, #4
 8002312:	4650      	mov	r0, sl
 8002314:	bf48      	it	mi
 8002316:	f044 0408 	orrmi.w	r4, r4, #8
 800231a:	f8cd a000 	str.w	sl, [sp]
 800231e:	f7fd ff27 	bl	8000170 <strlen>
 8002322:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002326:	2401      	movs	r4, #1
 8002328:	4620      	mov	r0, r4
 800232a:	4649      	mov	r1, r9
 800232c:	beab      	bkpt	0x00ab
 800232e:	4604      	mov	r4, r0
 8002330:	2c00      	cmp	r4, #0
 8002332:	db06      	blt.n	8002342 <_swiopen+0x7e>
 8002334:	2300      	movs	r3, #0
 8002336:	4447      	add	r7, r8
 8002338:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	462c      	mov	r4, r5
 8002340:	e014      	b.n	800236c <_swiopen+0xa8>
 8002342:	4620      	mov	r0, r4
 8002344:	f7ff fe72 	bl	800202c <error>
 8002348:	4604      	mov	r4, r0
 800234a:	e00f      	b.n	800236c <_swiopen+0xa8>
 800234c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002350:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002354:	46e9      	mov	r9, sp
 8002356:	d1cc      	bne.n	80022f2 <_swiopen+0x2e>
 8002358:	4649      	mov	r1, r9
 800235a:	4650      	mov	r0, sl
 800235c:	f7ff ff95 	bl	800228a <_stat>
 8002360:	3001      	adds	r0, #1
 8002362:	d0c6      	beq.n	80022f2 <_swiopen+0x2e>
 8002364:	f000 f902 	bl	800256c <__errno>
 8002368:	2311      	movs	r3, #17
 800236a:	6003      	str	r3, [r0, #0]
 800236c:	4620      	mov	r0, r4
 800236e:	b016      	add	sp, #88	; 0x58
 8002370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002374:	200000c0 	.word	0x200000c0

08002378 <_get_semihosting_exts>:
 8002378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800237c:	4607      	mov	r7, r0
 800237e:	4688      	mov	r8, r1
 8002380:	4829      	ldr	r0, [pc, #164]	; (8002428 <_get_semihosting_exts+0xb0>)
 8002382:	2100      	movs	r1, #0
 8002384:	4615      	mov	r5, r2
 8002386:	f7ff ff9d 	bl	80022c4 <_swiopen>
 800238a:	4604      	mov	r4, r0
 800238c:	462a      	mov	r2, r5
 800238e:	2100      	movs	r1, #0
 8002390:	4638      	mov	r0, r7
 8002392:	f7fe fec7 	bl	8001124 <memset>
 8002396:	1c63      	adds	r3, r4, #1
 8002398:	d015      	beq.n	80023c6 <_get_semihosting_exts+0x4e>
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff fe1c 	bl	8001fd8 <findslot>
 80023a0:	260c      	movs	r6, #12
 80023a2:	4681      	mov	r9, r0
 80023a4:	4630      	mov	r0, r6
 80023a6:	4649      	mov	r1, r9
 80023a8:	beab      	bkpt	0x00ab
 80023aa:	4606      	mov	r6, r0
 80023ac:	4630      	mov	r0, r6
 80023ae:	f7ff fe2d 	bl	800200c <checkerror>
 80023b2:	2803      	cmp	r0, #3
 80023b4:	dd02      	ble.n	80023bc <_get_semihosting_exts+0x44>
 80023b6:	3803      	subs	r0, #3
 80023b8:	42a8      	cmp	r0, r5
 80023ba:	dc08      	bgt.n	80023ce <_get_semihosting_exts+0x56>
 80023bc:	4620      	mov	r0, r4
 80023be:	f7ff feeb 	bl	8002198 <_close>
 80023c2:	f04f 34ff 	mov.w	r4, #4294967295
 80023c6:	4620      	mov	r0, r4
 80023c8:	b003      	add	sp, #12
 80023ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ce:	2204      	movs	r2, #4
 80023d0:	4620      	mov	r0, r4
 80023d2:	eb0d 0102 	add.w	r1, sp, r2
 80023d6:	f7ff fe47 	bl	8002068 <_read>
 80023da:	2803      	cmp	r0, #3
 80023dc:	ddee      	ble.n	80023bc <_get_semihosting_exts+0x44>
 80023de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80023e2:	2b53      	cmp	r3, #83	; 0x53
 80023e4:	d1ea      	bne.n	80023bc <_get_semihosting_exts+0x44>
 80023e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80023ea:	2b48      	cmp	r3, #72	; 0x48
 80023ec:	d1e6      	bne.n	80023bc <_get_semihosting_exts+0x44>
 80023ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80023f2:	2b46      	cmp	r3, #70	; 0x46
 80023f4:	d1e2      	bne.n	80023bc <_get_semihosting_exts+0x44>
 80023f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023fa:	2b42      	cmp	r3, #66	; 0x42
 80023fc:	d1de      	bne.n	80023bc <_get_semihosting_exts+0x44>
 80023fe:	2201      	movs	r2, #1
 8002400:	4641      	mov	r1, r8
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe4a 	bl	800209c <_swilseek>
 8002408:	2800      	cmp	r0, #0
 800240a:	dbd7      	blt.n	80023bc <_get_semihosting_exts+0x44>
 800240c:	462a      	mov	r2, r5
 800240e:	4639      	mov	r1, r7
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff fe29 	bl	8002068 <_read>
 8002416:	4605      	mov	r5, r0
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff febd 	bl	8002198 <_close>
 800241e:	4628      	mov	r0, r5
 8002420:	f7ff fdf4 	bl	800200c <checkerror>
 8002424:	4604      	mov	r4, r0
 8002426:	e7ce      	b.n	80023c6 <_get_semihosting_exts+0x4e>
 8002428:	080026cf 	.word	0x080026cf

0800242c <initialise_semihosting_exts>:
 800242c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800242e:	2100      	movs	r1, #0
 8002430:	2201      	movs	r2, #1
 8002432:	4d09      	ldr	r5, [pc, #36]	; (8002458 <initialise_semihosting_exts+0x2c>)
 8002434:	4c09      	ldr	r4, [pc, #36]	; (800245c <initialise_semihosting_exts+0x30>)
 8002436:	a801      	add	r0, sp, #4
 8002438:	6029      	str	r1, [r5, #0]
 800243a:	6022      	str	r2, [r4, #0]
 800243c:	f7ff ff9c 	bl	8002378 <_get_semihosting_exts>
 8002440:	2800      	cmp	r0, #0
 8002442:	dd07      	ble.n	8002454 <initialise_semihosting_exts+0x28>
 8002444:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002448:	f003 0201 	and.w	r2, r3, #1
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	602a      	str	r2, [r5, #0]
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	b003      	add	sp, #12
 8002456:	bd30      	pop	{r4, r5, pc}
 8002458:	20000080 	.word	0x20000080
 800245c:	20000084 	.word	0x20000084

08002460 <_has_ext_stdout_stderr>:
 8002460:	b510      	push	{r4, lr}
 8002462:	4c04      	ldr	r4, [pc, #16]	; (8002474 <_has_ext_stdout_stderr+0x14>)
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	2a00      	cmp	r2, #0
 8002468:	da01      	bge.n	800246e <_has_ext_stdout_stderr+0xe>
 800246a:	f7ff ffdf 	bl	800242c <initialise_semihosting_exts>
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	20000084 	.word	0x20000084

08002478 <initialise_monitor_handles>:
 8002478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800247c:	2303      	movs	r3, #3
 800247e:	2400      	movs	r4, #0
 8002480:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002530 <initialise_monitor_handles+0xb8>
 8002484:	b085      	sub	sp, #20
 8002486:	f8cd 9004 	str.w	r9, [sp, #4]
 800248a:	f10d 0804 	add.w	r8, sp, #4
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	2501      	movs	r5, #1
 8002492:	9402      	str	r4, [sp, #8]
 8002494:	4628      	mov	r0, r5
 8002496:	4641      	mov	r1, r8
 8002498:	beab      	bkpt	0x00ab
 800249a:	4605      	mov	r5, r0
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <initialise_monitor_handles+0xa8>)
 800249e:	4623      	mov	r3, r4
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	4614      	mov	r4, r2
 80024a6:	4e1f      	ldr	r6, [pc, #124]	; (8002524 <initialise_monitor_handles+0xac>)
 80024a8:	6035      	str	r5, [r6, #0]
 80024aa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80024ae:	3301      	adds	r3, #1
 80024b0:	2b14      	cmp	r3, #20
 80024b2:	d1fa      	bne.n	80024aa <initialise_monitor_handles+0x32>
 80024b4:	f7ff ffd4 	bl	8002460 <_has_ext_stdout_stderr>
 80024b8:	4d1b      	ldr	r5, [pc, #108]	; (8002528 <initialise_monitor_handles+0xb0>)
 80024ba:	b1d0      	cbz	r0, 80024f2 <initialise_monitor_handles+0x7a>
 80024bc:	f04f 0a03 	mov.w	sl, #3
 80024c0:	2304      	movs	r3, #4
 80024c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80024c6:	2701      	movs	r7, #1
 80024c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80024cc:	9302      	str	r3, [sp, #8]
 80024ce:	4638      	mov	r0, r7
 80024d0:	4641      	mov	r1, r8
 80024d2:	beab      	bkpt	0x00ab
 80024d4:	4683      	mov	fp, r0
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <initialise_monitor_handles+0xb4>)
 80024d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80024dc:	f8c3 b000 	str.w	fp, [r3]
 80024e0:	2308      	movs	r3, #8
 80024e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	4638      	mov	r0, r7
 80024ea:	4641      	mov	r1, r8
 80024ec:	beab      	bkpt	0x00ab
 80024ee:	4607      	mov	r7, r0
 80024f0:	602f      	str	r7, [r5, #0]
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	bf02      	ittt	eq
 80024f8:	4b0c      	ldreq	r3, [pc, #48]	; (800252c <initialise_monitor_handles+0xb4>)
 80024fa:	681b      	ldreq	r3, [r3, #0]
 80024fc:	602b      	streq	r3, [r5, #0]
 80024fe:	6833      	ldr	r3, [r6, #0]
 8002500:	2600      	movs	r6, #0
 8002502:	6023      	str	r3, [r4, #0]
 8002504:	6066      	str	r6, [r4, #4]
 8002506:	f7ff ffab 	bl	8002460 <_has_ext_stdout_stderr>
 800250a:	b130      	cbz	r0, 800251a <initialise_monitor_handles+0xa2>
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <initialise_monitor_handles+0xb4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800251a:	b005      	add	sp, #20
 800251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002520:	200000c0 	.word	0x200000c0
 8002524:	200000b8 	.word	0x200000b8
 8002528:	200000b4 	.word	0x200000b4
 800252c:	200000bc 	.word	0x200000bc
 8002530:	080026e5 	.word	0x080026e5

08002534 <_isatty>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	f7ff fd4f 	bl	8001fd8 <findslot>
 800253a:	2509      	movs	r5, #9
 800253c:	4604      	mov	r4, r0
 800253e:	b920      	cbnz	r0, 800254a <_isatty+0x16>
 8002540:	f000 f814 	bl	800256c <__errno>
 8002544:	6005      	str	r5, [r0, #0]
 8002546:	4620      	mov	r0, r4
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	4628      	mov	r0, r5
 800254c:	4621      	mov	r1, r4
 800254e:	beab      	bkpt	0x00ab
 8002550:	4604      	mov	r4, r0
 8002552:	2c01      	cmp	r4, #1
 8002554:	d0f7      	beq.n	8002546 <_isatty+0x12>
 8002556:	f000 f809 	bl	800256c <__errno>
 800255a:	2400      	movs	r4, #0
 800255c:	4606      	mov	r6, r0
 800255e:	2513      	movs	r5, #19
 8002560:	4628      	mov	r0, r5
 8002562:	4621      	mov	r1, r4
 8002564:	beab      	bkpt	0x00ab
 8002566:	4605      	mov	r5, r0
 8002568:	6035      	str	r5, [r6, #0]
 800256a:	e7ec      	b.n	8002546 <_isatty+0x12>

0800256c <__errno>:
 800256c:	4b01      	ldr	r3, [pc, #4]	; (8002574 <__errno+0x8>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000018 	.word	0x20000018

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr


stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002070  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022fc  080022fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080022fc  080022fc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022fc  080022fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  08002374  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002374  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c7d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000545  00000000  00000000  00021d16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  00022260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000262b  00000000  00000000  000225c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001525  00000000  00000000  00024bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a44f  00000000  00000000  00026118  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000120c  00000000  00000000  000305e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000070 	.word	0x20000070
 800014c:	00000000 	.word	0x00000000
 8000150:	08002188 	.word	0x08002188

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000074 	.word	0x20000074
 800016c:	08002188 	.word	0x08002188

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
// Arduino LED
#define LED_PIN				13

/*                                     FUNCTIONS                                          */

void delay (void){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000/2; i++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <delay+0x24>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	0003d08f 	.word	0x0003d08f

080001a8 <SPI_GPIOInits>:

void SPI_GPIOInits (void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOA;
 80001ae:	4b17      	ldr	r3, [pc, #92]	; (800020c <SPI_GPIOInits+0x64>)
 80001b0:	603b      	str	r3, [r7, #0]

	// NSS -- Not used in this case
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1; // Input
 80001b2:	2301      	movs	r3, #1
 80001b4:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Floating Input
 80001b6:	2302      	movs	r3, #2
 80001b8:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80001ba:	2304      	movs	r3, #4
 80001bc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001be:	463b      	mov	r3, r7
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 fb5f 	bl	8000884 <GPIO_Init>

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001c6:	2301      	movs	r3, #1
 80001c8:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001ca:	2302      	movs	r3, #2
 80001cc:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80001ce:	2305      	movs	r3, #5
 80001d0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001d2:	463b      	mov	r3, r7
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fb55 	bl	8000884 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 0; // Input
 80001da:	2300      	movs	r3, #0
 80001dc:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 1; // Floating input
 80001de:	2301      	movs	r3, #1
 80001e0:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001e2:	2306      	movs	r3, #6
 80001e4:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001e6:	463b      	mov	r3, r7
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fb4b 	bl	8000884 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinMode = 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	717b      	strb	r3, [r7, #5]
	SPIPins.GPIO_PinConfig.GPIO_Config = 2; // Master Alternate Push Pull
 80001f2:	2302      	movs	r3, #2
 80001f4:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001f6:	2307      	movs	r3, #7
 80001f8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPIPins);
 80001fa:	463b      	mov	r3, r7
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fb41 	bl	8000884 <GPIO_Init>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800

08000210 <SPI1_Inits>:

void SPI1_Inits(void){
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI1Handle;
	SPI1Handle.pSPIx = SPI1;
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <SPI1_Inits+0x38>)
 8000218:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD ;
 800021a:	2301      	movs	r3, #1
 800021c:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800021e:	2301      	movs	r3, #1
 8000220:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPI_Config.SPI_SCLKSpeed = SPI_SCLK_SPEED_DIV_8;
 8000222:	2302      	movs	r3, #2
 8000224:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000226:	2300      	movs	r3, #0
 8000228:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800022a:	2300      	movs	r3, #0
 800022c:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800022e:	2300      	movs	r3, #0
 8000230:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 8000232:	2300      	movs	r3, #0
 8000234:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 8000236:	463b      	mov	r3, r7
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fc47 	bl	8000acc <SPI_Init>
}
 800023e:	bf00      	nop
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40013000 	.word	0x40013000

0800024c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioBtn; // Variable for the GPIO Handle

	// GPIO Button Configuration
	gpioBtn.pGPIOx = GPIOA; // Initialize variable and select port
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <GPIO_ButtonInit+0x28>)
 8000254:	603b      	str	r3, [r7, #0]
	gpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000256:	2300      	movs	r3, #0
 8000258:	713b      	strb	r3, [r7, #4]
	gpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN ;
 800025a:	2300      	movs	r3, #0
 800025c:	717b      	strb	r3, [r7, #5]
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;
 800025e:	2302      	movs	r3, #2
 8000260:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&gpioBtn);
 8000262:	463b      	mov	r3, r7
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fb0d 	bl	8000884 <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010800 	.word	0x40010800

08000278 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse (uint8_t ackbyte){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]

	if (ackbyte == 0xf5){
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	2bf5      	cmp	r3, #245	; 0xf5
 8000286:	d101      	bne.n	800028c <SPI_VerifyResponse+0x14>
		// Acknowledged
		return 1;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <SPI_VerifyResponse+0x16>
	} else {
		// Not acknowledged
		return 0;
 800028c:	2300      	movs	r3, #0
	}
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <CMD_LED_CTRL>:

/*** Send command #1 CMD LED CTRL. You have to send pin number and value ***/
void CMD_LED_CTRL (uint8_t commandcode){
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1, &commandcode, 1);
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	2201      	movs	r2, #1
 80002a6:	4619      	mov	r1, r3
 80002a8:	4819      	ldr	r0, [pc, #100]	; (8000310 <CMD_LED_CTRL+0x78>)
 80002aa:	f000 fc7d 	bl	8000ba8 <SPI_SendData>

	// Read the dummy to clear off RXNE
	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 80002ae:	f107 030f 	add.w	r3, r7, #15
 80002b2:	2201      	movs	r2, #1
 80002b4:	4619      	mov	r1, r3
 80002b6:	4816      	ldr	r0, [pc, #88]	; (8000310 <CMD_LED_CTRL+0x78>)
 80002b8:	f000 fcac 	bl	8000c14 <SPI_ReceiveData>

	// Send some dummy byte to fetch the response from the slave (ACK or NACK)
	uint8_t dummywrite = 0xff;
 80002bc:	23ff      	movs	r3, #255	; 0xff
 80002be:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 80002c0:	f107 030e 	add.w	r3, r7, #14
 80002c4:	2201      	movs	r2, #1
 80002c6:	4619      	mov	r1, r3
 80002c8:	4811      	ldr	r0, [pc, #68]	; (8000310 <CMD_LED_CTRL+0x78>)
 80002ca:	f000 fc6d 	bl	8000ba8 <SPI_SendData>

	// Read the response from the slave
	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 80002ce:	f107 030d 	add.w	r3, r7, #13
 80002d2:	2201      	movs	r2, #1
 80002d4:	4619      	mov	r1, r3
 80002d6:	480e      	ldr	r0, [pc, #56]	; (8000310 <CMD_LED_CTRL+0x78>)
 80002d8:	f000 fc9c 	bl	8000c14 <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[2]; // args[0] = Pin number, args[1] = Value

	if (SPI_VerifyResponse(ackbyte)){
 80002dc:	7b7b      	ldrb	r3, [r7, #13]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ffca 	bl	8000278 <SPI_VerifyResponse>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d00d      	beq.n	8000306 <CMD_LED_CTRL+0x6e>
		// Send arguments pin number and value
		args[0] = LED_PIN;
 80002ea:	230d      	movs	r3, #13
 80002ec:	723b      	strb	r3, [r7, #8]
		args[1] = LED_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	727b      	strb	r3, [r7, #9]
		SPI_SendData(SPI1, args, 2);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	2202      	movs	r2, #2
 80002f8:	4619      	mov	r1, r3
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <CMD_LED_CTRL+0x78>)
 80002fc:	f000 fc54 	bl	8000ba8 <SPI_SendData>
		printf("Control LED executed\n");
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <CMD_LED_CTRL+0x7c>)
 8000302:	f000 fd93 	bl	8000e2c <puts>
	}
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40013000 	.word	0x40013000
 8000314:	080021a0 	.word	0x080021a0

08000318 <CMD_SENSOR>:

/*** Send command #2 CMD SENSOR READ. You have to send analog pin number ***/
void CMD_SENSOR(uint8_t commandcode){
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1, &commandcode, 1);
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	4826      	ldr	r0, [pc, #152]	; (80003c4 <CMD_SENSOR+0xac>)
 800032a:	f000 fc3d 	bl	8000ba8 <SPI_SendData>

	// Read the dummy to clear off RXNE
	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 800032e:	f107 030f 	add.w	r3, r7, #15
 8000332:	2201      	movs	r2, #1
 8000334:	4619      	mov	r1, r3
 8000336:	4823      	ldr	r0, [pc, #140]	; (80003c4 <CMD_SENSOR+0xac>)
 8000338:	f000 fc6c 	bl	8000c14 <SPI_ReceiveData>

	// Send some dummy byte to fetch the response from the slave (ACK or NACK)
	uint8_t dummywrite = 0xff;
 800033c:	23ff      	movs	r3, #255	; 0xff
 800033e:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 8000340:	f107 030e 	add.w	r3, r7, #14
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	481e      	ldr	r0, [pc, #120]	; (80003c4 <CMD_SENSOR+0xac>)
 800034a:	f000 fc2d 	bl	8000ba8 <SPI_SendData>

	// Read the response from the slave
	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 800034e:	f107 030d 	add.w	r3, r7, #13
 8000352:	2201      	movs	r2, #1
 8000354:	4619      	mov	r1, r3
 8000356:	481b      	ldr	r0, [pc, #108]	; (80003c4 <CMD_SENSOR+0xac>)
 8000358:	f000 fc5c 	bl	8000c14 <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[1]; // args[0] = Analog pin number

	if (SPI_VerifyResponse(ackbyte)){
 800035c:	7b7b      	ldrb	r3, [r7, #13]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff8a 	bl	8000278 <SPI_VerifyResponse>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d027      	beq.n	80003ba <CMD_SENSOR+0xa2>
		// Send arguments pin number and value
		args[0] = ANALOG_PIN0;
 800036a:	2300      	movs	r3, #0
 800036c:	733b      	strb	r3, [r7, #12]
		SPI_SendData(SPI1, args, 1);
 800036e:	f107 030c 	add.w	r3, r7, #12
 8000372:	2201      	movs	r2, #1
 8000374:	4619      	mov	r1, r3
 8000376:	4813      	ldr	r0, [pc, #76]	; (80003c4 <CMD_SENSOR+0xac>)
 8000378:	f000 fc16 	bl	8000ba8 <SPI_SendData>

		// Read RNXE again
		SPI_ReceiveData(SPI1, &dummyread, 1);
 800037c:	f107 030f 	add.w	r3, r7, #15
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	480f      	ldr	r0, [pc, #60]	; (80003c4 <CMD_SENSOR+0xac>)
 8000386:	f000 fc45 	bl	8000c14 <SPI_ReceiveData>

		// Some delay so the sensor has time to read
		delay();
 800038a:	f7ff fef9 	bl	8000180 <delay>

		// Send dummy byte to fetch the response
		SPI_SendData(SPI1, &dummywrite, 1);
 800038e:	f107 030e 	add.w	r3, r7, #14
 8000392:	2201      	movs	r2, #1
 8000394:	4619      	mov	r1, r3
 8000396:	480b      	ldr	r0, [pc, #44]	; (80003c4 <CMD_SENSOR+0xac>)
 8000398:	f000 fc06 	bl	8000ba8 <SPI_SendData>

		// Read the value of the sensor
		uint8_t analog_read;
		SPI_ReceiveData(SPI1, &analog_read, 1);
 800039c:	f107 030b 	add.w	r3, r7, #11
 80003a0:	2201      	movs	r2, #1
 80003a2:	4619      	mov	r1, r3
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <CMD_SENSOR+0xac>)
 80003a6:	f000 fc35 	bl	8000c14 <SPI_ReceiveData>
		printf("Value read: %d\n", analog_read);
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	; (80003c8 <CMD_SENSOR+0xb0>)
 80003b0:	f000 fcc8 	bl	8000d44 <iprintf>
		printf("Sensor read executed\n");
 80003b4:	4805      	ldr	r0, [pc, #20]	; (80003cc <CMD_SENSOR+0xb4>)
 80003b6:	f000 fd39 	bl	8000e2c <puts>
	}
}
 80003ba:	bf00      	nop
 80003bc:	3710      	adds	r7, #16
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40013000 	.word	0x40013000
 80003c8:	080021b8 	.word	0x080021b8
 80003cc:	080021c8 	.word	0x080021c8

080003d0 <CMD_LED_READ>:

void CMD_LED_READ(uint8_t commandcode){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 80003da:	1dfb      	adds	r3, r7, #7
 80003dc:	2201      	movs	r2, #1
 80003de:	4619      	mov	r1, r3
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <CMD_LED_READ+0xac>)
 80003e2:	f000 fbe1 	bl	8000ba8 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 80003e6:	f107 030f 	add.w	r3, r7, #15
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	4823      	ldr	r0, [pc, #140]	; (800047c <CMD_LED_READ+0xac>)
 80003f0:	f000 fc10 	bl	8000c14 <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 80003f4:	23ff      	movs	r3, #255	; 0xff
 80003f6:	73bb      	strb	r3, [r7, #14]
	SPI_SendData(SPI1, &dummywrite, 1);
 80003f8:	f107 030e 	add.w	r3, r7, #14
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	481e      	ldr	r0, [pc, #120]	; (800047c <CMD_LED_READ+0xac>)
 8000402:	f000 fbd1 	bl	8000ba8 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 8000406:	f107 030d 	add.w	r3, r7, #13
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	481b      	ldr	r0, [pc, #108]	; (800047c <CMD_LED_READ+0xac>)
 8000410:	f000 fc00 	bl	8000c14 <SPI_ReceiveData>

	// Array of arguments
	uint8_t args[1]; // args[0] = Digital pin number

	if (SPI_VerifyResponse(ackbyte)){
 8000414:	7b7b      	ldrb	r3, [r7, #13]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff2e 	bl	8000278 <SPI_VerifyResponse>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d027      	beq.n	8000472 <CMD_LED_READ+0xa2>
		// Send arguments pin number and value
		args[0] = LED_PIN;
 8000422:	230d      	movs	r3, #13
 8000424:	733b      	strb	r3, [r7, #12]
		SPI_SendData(SPI1, args, 1);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	2201      	movs	r2, #1
 800042c:	4619      	mov	r1, r3
 800042e:	4813      	ldr	r0, [pc, #76]	; (800047c <CMD_LED_READ+0xac>)
 8000430:	f000 fbba 	bl	8000ba8 <SPI_SendData>

		// Read RNXE again
		SPI_ReceiveData(SPI1, &dummyread, 1);
 8000434:	f107 030f 	add.w	r3, r7, #15
 8000438:	2201      	movs	r2, #1
 800043a:	4619      	mov	r1, r3
 800043c:	480f      	ldr	r0, [pc, #60]	; (800047c <CMD_LED_READ+0xac>)
 800043e:	f000 fbe9 	bl	8000c14 <SPI_ReceiveData>

		// Some delay so the sensor has time to read
		delay();
 8000442:	f7ff fe9d 	bl	8000180 <delay>

		// Send dummy byte to fetch the response
		SPI_SendData(SPI1, &dummywrite, 1);
 8000446:	f107 030e 	add.w	r3, r7, #14
 800044a:	2201      	movs	r2, #1
 800044c:	4619      	mov	r1, r3
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <CMD_LED_READ+0xac>)
 8000450:	f000 fbaa 	bl	8000ba8 <SPI_SendData>

		// Read the value of the sensor
		uint8_t led_status;
		SPI_ReceiveData(SPI1, &led_status,1);
 8000454:	f107 030b 	add.w	r3, r7, #11
 8000458:	2201      	movs	r2, #1
 800045a:	4619      	mov	r1, r3
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <CMD_LED_READ+0xac>)
 800045e:	f000 fbd9 	bl	8000c14 <SPI_ReceiveData>
		printf("Value read: %d\n", led_status);
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	4619      	mov	r1, r3
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <CMD_LED_READ+0xb0>)
 8000468:	f000 fc6c 	bl	8000d44 <iprintf>
		printf("Sensor LED executed\n");
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <CMD_LED_READ+0xb4>)
 800046e:	f000 fcdd 	bl	8000e2c <puts>
	}

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40013000 	.word	0x40013000
 8000480:	080021b8 	.word	0x080021b8
 8000484:	080021e0 	.word	0x080021e0

08000488 <CMD_PRINT>:

void CMD_PRINT (uint8_t commandcode){
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	4831      	ldr	r0, [pc, #196]	; (8000560 <CMD_PRINT+0xd8>)
 800049a:	f000 fb85 	bl	8000ba8 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 800049e:	f107 031b 	add.w	r3, r7, #27
 80004a2:	2201      	movs	r2, #1
 80004a4:	4619      	mov	r1, r3
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <CMD_PRINT+0xd8>)
 80004a8:	f000 fbb4 	bl	8000c14 <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 80004ac:	23ff      	movs	r3, #255	; 0xff
 80004ae:	76bb      	strb	r3, [r7, #26]
	SPI_SendData(SPI1, &dummywrite, 1);
 80004b0:	f107 031a 	add.w	r3, r7, #26
 80004b4:	2201      	movs	r2, #1
 80004b6:	4619      	mov	r1, r3
 80004b8:	4829      	ldr	r0, [pc, #164]	; (8000560 <CMD_PRINT+0xd8>)
 80004ba:	f000 fb75 	bl	8000ba8 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 80004be:	f107 0319 	add.w	r3, r7, #25
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4826      	ldr	r0, [pc, #152]	; (8000560 <CMD_PRINT+0xd8>)
 80004c8:	f000 fba4 	bl	8000c14 <SPI_ReceiveData>

	uint8_t message[] = "Hello Word";
 80004cc:	4a25      	ldr	r2, [pc, #148]	; (8000564 <CMD_PRINT+0xdc>)
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d4:	c303      	stmia	r3!, {r0, r1}
 80004d6:	801a      	strh	r2, [r3, #0]
 80004d8:	3302      	adds	r3, #2
 80004da:	0c12      	lsrs	r2, r2, #16
 80004dc:	701a      	strb	r2, [r3, #0]
	uint8_t args[1];

	if (SPI_VerifyResponse(ackbyte)){
 80004de:	7e7b      	ldrb	r3, [r7, #25]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fec9 	bl	8000278 <SPI_VerifyResponse>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d035      	beq.n	8000558 <CMD_PRINT+0xd0>
		args[0] = strlen((char*)message);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff fe3d 	bl	8000170 <strlen>
 80004f6:	4603      	mov	r3, r0
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	723b      	strb	r3, [r7, #8]

		SPI_SendData(SPI1,args,1);
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	2201      	movs	r2, #1
 8000502:	4619      	mov	r1, r3
 8000504:	4816      	ldr	r0, [pc, #88]	; (8000560 <CMD_PRINT+0xd8>)
 8000506:	f000 fb4f 	bl	8000ba8 <SPI_SendData>

		SPI_ReceiveData(SPI1,&dummyread,1);
 800050a:	f107 031b 	add.w	r3, r7, #27
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <CMD_PRINT+0xd8>)
 8000514:	f000 fb7e 	bl	8000c14 <SPI_ReceiveData>

		delay();
 8000518:	f7ff fe32 	bl	8000180 <delay>

		for(int i = 0 ; i < args[0] ; i++){
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
 8000520:	e012      	b.n	8000548 <CMD_PRINT+0xc0>
			SPI_SendData(SPI1,&message[i],1);
 8000522:	f107 020c 	add.w	r2, r7, #12
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	4413      	add	r3, r2
 800052a:	2201      	movs	r2, #1
 800052c:	4619      	mov	r1, r3
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <CMD_PRINT+0xd8>)
 8000530:	f000 fb3a 	bl	8000ba8 <SPI_SendData>
			SPI_ReceiveData(SPI1,&dummyread,1);
 8000534:	f107 031b 	add.w	r3, r7, #27
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <CMD_PRINT+0xd8>)
 800053e:	f000 fb69 	bl	8000c14 <SPI_ReceiveData>
		for(int i = 0 ; i < args[0] ; i++){
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	3301      	adds	r3, #1
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	7a3b      	ldrb	r3, [r7, #8]
 800054a:	461a      	mov	r2, r3
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	4293      	cmp	r3, r2
 8000550:	dbe7      	blt.n	8000522 <CMD_PRINT+0x9a>
		}
		printf("Print executed\n");
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <CMD_PRINT+0xe0>)
 8000554:	f000 fc6a 	bl	8000e2c <puts>
	}
}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40013000 	.word	0x40013000
 8000564:	08002204 	.word	0x08002204
 8000568:	080021f4 	.word	0x080021f4

0800056c <CMD_ID>:

void CMD_ID (uint8_t commandcode){
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]

	SPI_SendData(SPI1,&commandcode, 1);
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	2201      	movs	r2, #1
 800057a:	4619      	mov	r1, r3
 800057c:	4824      	ldr	r0, [pc, #144]	; (8000610 <CMD_ID+0xa4>)
 800057e:	f000 fb13 	bl	8000ba8 <SPI_SendData>

	uint8_t dummyread;
	SPI_ReceiveData(SPI1, &dummyread, 1);
 8000582:	f107 031b 	add.w	r3, r7, #27
 8000586:	2201      	movs	r2, #1
 8000588:	4619      	mov	r1, r3
 800058a:	4821      	ldr	r0, [pc, #132]	; (8000610 <CMD_ID+0xa4>)
 800058c:	f000 fb42 	bl	8000c14 <SPI_ReceiveData>

	uint8_t dummywrite = 0xff;
 8000590:	23ff      	movs	r3, #255	; 0xff
 8000592:	76bb      	strb	r3, [r7, #26]
	SPI_SendData(SPI1, &dummywrite, 1);
 8000594:	f107 031a 	add.w	r3, r7, #26
 8000598:	2201      	movs	r2, #1
 800059a:	4619      	mov	r1, r3
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <CMD_ID+0xa4>)
 800059e:	f000 fb03 	bl	8000ba8 <SPI_SendData>

	uint8_t ackbyte;
	SPI_ReceiveData(SPI1, &ackbyte, 1);
 80005a2:	f107 0319 	add.w	r3, r7, #25
 80005a6:	2201      	movs	r2, #1
 80005a8:	4619      	mov	r1, r3
 80005aa:	4819      	ldr	r0, [pc, #100]	; (8000610 <CMD_ID+0xa4>)
 80005ac:	f000 fb32 	bl	8000c14 <SPI_ReceiveData>

	uint8_t id[11];

	if(SPI_VerifyResponse(ackbyte)){
 80005b0:	7e7b      	ldrb	r3, [r7, #25]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fe60 	bl	8000278 <SPI_VerifyResponse>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d023      	beq.n	8000606 <CMD_ID+0x9a>
		for (uint32_t i = 0; i<10; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
 80005c2:	e012      	b.n	80005ea <CMD_ID+0x7e>
			SPI_SendData(SPI1, &dummywrite, 1);
 80005c4:	f107 031a 	add.w	r3, r7, #26
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	4810      	ldr	r0, [pc, #64]	; (8000610 <CMD_ID+0xa4>)
 80005ce:	f000 faeb 	bl	8000ba8 <SPI_SendData>
			SPI_ReceiveData(SPI1, &id[i], 1);
 80005d2:	f107 020c 	add.w	r2, r7, #12
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	4413      	add	r3, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <CMD_ID+0xa4>)
 80005e0:	f000 fb18 	bl	8000c14 <SPI_ReceiveData>
		for (uint32_t i = 0; i<10; i++){
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	3301      	adds	r3, #1
 80005e8:	61fb      	str	r3, [r7, #28]
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d9e9      	bls.n	80005c4 <CMD_ID+0x58>
		}
		id[10] = '\0';
 80005f0:	2300      	movs	r3, #0
 80005f2:	75bb      	strb	r3, [r7, #22]

		printf("ID: %d\n", id);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <CMD_ID+0xa8>)
 80005fc:	f000 fba2 	bl	8000d44 <iprintf>
		printf("Print ID executed\n");
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <CMD_ID+0xac>)
 8000602:	f000 fc13 	bl	8000e2c <puts>
	}
}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40013000 	.word	0x40013000
 8000614:	08002210 	.word	0x08002210
 8000618:	08002218 	.word	0x08002218

0800061c <main>:

extern void initialise_monitor_handles(void);

int main (void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

	initialise_monitor_handles();
 8000622:	f001 fd31 	bl	8002088 <initialise_monitor_handles>

	printf("It works!\n");
 8000626:	4827      	ldr	r0, [pc, #156]	; (80006c4 <main+0xa8>)
 8000628:	f000 fc00 	bl	8000e2c <puts>

	GPIO_ButtonInit();
 800062c:	f7ff fe0e 	bl	800024c <GPIO_ButtonInit>

	SPI_GPIOInits(); // Function to initialize the GPIO pins to behave as SPI1
 8000630:	f7ff fdba 	bl	80001a8 <SPI_GPIOInits>

	SPI1_Inits(); // Function to initialize SPI1 parameters
 8000634:	f7ff fdec 	bl	8000210 <SPI1_Inits>

	printf("SPI initialized\n");
 8000638:	4823      	ldr	r0, [pc, #140]	; (80006c8 <main+0xac>)
 800063a:	f000 fbf7 	bl	8000e2c <puts>

	SPI_SSOEConfig(SPI1, ENABLE);
 800063e:	2101      	movs	r1, #1
 8000640:	4822      	ldr	r0, [pc, #136]	; (80006cc <main+0xb0>)
 8000642:	f000 fb38 	bl	8000cb6 <SPI_SSOEConfig>

	while (1) {

		uint8_t button_value = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 8000646:	2100      	movs	r1, #0
 8000648:	4821      	ldr	r0, [pc, #132]	; (80006d0 <main+0xb4>)
 800064a:	f000 f9dc 	bl	8000a06 <GPIO_ReadFromInputPin>
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
		// Button pressed for the 1st time
		while((button_value));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1fc      	bne.n	8000652 <main+0x36>
		delay();
 8000658:	f7ff fd92 	bl	8000180 <delay>

		SPI_PeripheralControl(SPI1, ENABLE); // Enable SPI
 800065c:	2101      	movs	r1, #1
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <main+0xb0>)
 8000660:	f000 fb0e 	bl	8000c80 <SPI_PeripheralControl>

		// CMD 1: Send command to turn ON/OFF the LED
		CMD_LED_CTRL(COMMAND_LED_CTRL);
 8000664:	2050      	movs	r0, #80	; 0x50
 8000666:	f7ff fe17 	bl	8000298 <CMD_LED_CTRL>

		// Button pressed for the 2nd time
		while((button_value));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1fc      	bne.n	800066a <main+0x4e>
		delay();
 8000670:	f7ff fd86 	bl	8000180 <delay>

		// CMD 2: Send command to read sensor
		CMD_SENSOR(COMMAND_SENSOR_READ);
 8000674:	2051      	movs	r0, #81	; 0x51
 8000676:	f7ff fe4f 	bl	8000318 <CMD_SENSOR>

		// Button pressed for the 3rd time
		while((button_value));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1fc      	bne.n	800067a <main+0x5e>
		delay();
 8000680:	f7ff fd7e 	bl	8000180 <delay>

		// CMD 3:
		CMD_LED_READ(COMMAND_LED_READ);
 8000684:	2052      	movs	r0, #82	; 0x52
 8000686:	f7ff fea3 	bl	80003d0 <CMD_LED_READ>

		// Button pressed for the 4th time
		while((button_value));
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1fc      	bne.n	800068a <main+0x6e>
		delay();
 8000690:	f7ff fd76 	bl	8000180 <delay>

		// CMD 4:
		CMD_PRINT(COMMAND_PRINT);
 8000694:	2053      	movs	r0, #83	; 0x53
 8000696:	f7ff fef7 	bl	8000488 <CMD_PRINT>

		// Button pressed for the 5th time
		while((button_value));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1fc      	bne.n	800069a <main+0x7e>
		delay();
 80006a0:	f7ff fd6e 	bl	8000180 <delay>

		// CMD 5:
		CMD_ID(COMMAND_ID_READ);
 80006a4:	2054      	movs	r0, #84	; 0x54
 80006a6:	f7ff ff61 	bl	800056c <CMD_ID>

		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 80006aa:	bf00      	nop
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0xb0>)
 80006b0:	f000 fa67 	bl	8000b82 <SPI_GetFlagStatus>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f8      	bne.n	80006ac <main+0x90>

		SPI_PeripheralControl(SPI1, DISABLE); // Disable SPI. To close the line communication
 80006ba:	2100      	movs	r1, #0
 80006bc:	4803      	ldr	r0, [pc, #12]	; (80006cc <main+0xb0>)
 80006be:	f000 fadf 	bl	8000c80 <SPI_PeripheralControl>
	while (1) {
 80006c2:	e7c0      	b.n	8000646 <main+0x2a>
 80006c4:	0800222c 	.word	0x0800222c
 80006c8:	08002238 	.word	0x08002238
 80006cc:	40013000 	.word	0x40013000
 80006d0:	40010800 	.word	0x40010800

080006d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490e      	ldr	r1, [pc, #56]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0b      	ldr	r4, [pc, #44]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006fe:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000702:	f000 faf3 	bl	8000cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff ff89 	bl	800061c <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   r0, =_estack
 800070c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000718:	08002304 	.word	0x08002304
  ldr r2, =_sbss
 800071c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000720:	20000148 	.word	0x20000148

08000724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_2_IRQHandler>
	...

08000728 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d148      	bne.n	80007cc <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a4a      	ldr	r2, [pc, #296]	; (8000868 <GPIO_PeriClkCtrl+0x140>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 8000742:	4b4a      	ldr	r3, [pc, #296]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a49      	ldr	r2, [pc, #292]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 800074e:	e085      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a47      	ldr	r2, [pc, #284]	; (8000870 <GPIO_PeriClkCtrl+0x148>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a43      	ldr	r2, [pc, #268]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
}
 8000764:	e07a      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a42      	ldr	r2, [pc, #264]	; (8000874 <GPIO_PeriClkCtrl+0x14c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800076e:	4b3f      	ldr	r3, [pc, #252]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a3e      	ldr	r2, [pc, #248]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6193      	str	r3, [r2, #24]
}
 800077a:	e06f      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a3e      	ldr	r2, [pc, #248]	; (8000878 <GPIO_PeriClkCtrl+0x150>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000784:	4b39      	ldr	r3, [pc, #228]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a38      	ldr	r2, [pc, #224]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6193      	str	r3, [r2, #24]
}
 8000790:	e064      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a39      	ldr	r2, [pc, #228]	; (800087c <GPIO_PeriClkCtrl+0x154>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800079a:	4b34      	ldr	r3, [pc, #208]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a33      	ldr	r2, [pc, #204]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a4:	6193      	str	r3, [r2, #24]
}
 80007a6:	e059      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a35      	ldr	r2, [pc, #212]	; (8000880 <GPIO_PeriClkCtrl+0x158>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a2d      	ldr	r2, [pc, #180]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ba:	6193      	str	r3, [r2, #24]
}
 80007bc:	e04e      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a2a      	ldr	r2, [pc, #168]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c8:	6193      	str	r3, [r2, #24]
}
 80007ca:	e047      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a26      	ldr	r2, [pc, #152]	; (8000868 <GPIO_PeriClkCtrl+0x140>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d106      	bne.n	80007e2 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a24      	ldr	r2, [pc, #144]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007da:	f023 0304 	bic.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
}
 80007e0:	e03c      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <GPIO_PeriClkCtrl+0x148>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 80007f0:	f023 0308 	bic.w	r3, r3, #8
 80007f4:	6193      	str	r3, [r2, #24]
}
 80007f6:	e031      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a1e      	ldr	r2, [pc, #120]	; (8000874 <GPIO_PeriClkCtrl+0x14c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000806:	f023 0310 	bic.w	r3, r3, #16
 800080a:	6193      	str	r3, [r2, #24]
}
 800080c:	e026      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a19      	ldr	r2, [pc, #100]	; (8000878 <GPIO_PeriClkCtrl+0x150>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800081c:	f023 0320 	bic.w	r3, r3, #32
 8000820:	6193      	str	r3, [r2, #24]
}
 8000822:	e01b      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <GPIO_PeriClkCtrl+0x154>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000836:	6193      	str	r3, [r2, #24]
}
 8000838:	e010      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <GPIO_PeriClkCtrl+0x158>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800084c:	6193      	str	r3, [r2, #24]
}
 800084e:	e005      	b.n	800085c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <GPIO_PeriClkCtrl+0x144>)
 8000856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085a:	6193      	str	r3, [r2, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40010800 	.word	0x40010800
 800086c:	40021000 	.word	0x40021000
 8000870:	40010c00 	.word	0x40010c00
 8000874:	40011000 	.word	0x40011000
 8000878:	40011400 	.word	0x40011400
 800087c:	40011800 	.word	0x40011800
 8000880:	40011c00 	.word	0x40011c00

08000884 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff48 	bl	8000728 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d84b      	bhi.n	8000940 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	3302      	adds	r3, #2
 80008c8:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 80008ca:	7d3b      	ldrb	r3, [r7, #20]
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 80008d4:	7cfb      	ldrb	r3, [r7, #19]
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 80008de:	7dba      	ldrb	r2, [r7, #22]
 80008e0:	7d3b      	ldrb	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	43da      	mvns	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	400a      	ands	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000906:	430a      	orrs	r2, r1
 8000908:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 800090e:	7d7a      	ldrb	r2, [r7, #21]
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	43da      	mvns	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	400a      	ands	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000936:	430a      	orrs	r2, r1
 8000938:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
 800093e:	e058      	b.n	80009f2 <GPIO_Init+0x16e>

	} else { // Configuration of Pins 8-15

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	3b08      	subs	r3, #8
 8000946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	799b      	ldrb	r3, [r3, #6]
 8000956:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 800095a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3302      	adds	r3, #2
 800096e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 8000972:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 8000980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000984:	2203      	movs	r2, #3
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	61bb      	str	r3, [r7, #24]

		temp_mode = value_mode << positions_mode;
 800098e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6859      	ldr	r1, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	400a      	ands	r2, r1
 80009aa:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6859      	ldr	r1, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009b8:	430a      	orrs	r2, r1
 80009ba:	605a      	str	r2, [r3, #4]

		temp_mode = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 80009c0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80009c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	6859      	ldr	r1, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	400a      	ands	r2, r1
 80009dc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6859      	ldr	r1, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ea:	430a      	orrs	r2, r1
 80009ec:	605a      	str	r2, [r3, #4]

		temp_config = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// Configuration of the Alternate Functions
	if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_PP) | (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode = ALT_FUNC_OP_TYPE_OD)){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2202      	movs	r2, #2
 80009f6:	715a      	strb	r2, [r3, #5]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2203      	movs	r2, #3
 80009fc:	715a      	strb	r2, [r3, #5]

	}
}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <GPIO_ReadFromInputPin>:
 * @param [in]		Pin number
 * @return			Read value 0 or 1
 * @note 			None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b085      	sub	sp, #20
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SPI_PeriClkCtrl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d11c      	bne.n	8000a7c <SPI_PeriClkCtrl+0x4c>
		if (pSPIx == SPI1) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <SPI_PeriClkCtrl+0x90>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d106      	bne.n	8000a58 <SPI_PeriClkCtrl+0x28>
			SPI1_PCLK_EN();
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a54:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();
		}  else {
			SPI3_PCLK_DI();
		}
	}
}
 8000a56:	e02d      	b.n	8000ab4 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <SPI_PeriClkCtrl+0x98>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d106      	bne.n	8000a6e <SPI_PeriClkCtrl+0x3e>
			SPI2_PCLK_EN();
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	61d3      	str	r3, [r2, #28]
}
 8000a6c:	e022      	b.n	8000ab4 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_EN();
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	4a14      	ldr	r2, [pc, #80]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a78:	61d3      	str	r3, [r2, #28]
}
 8000a7a:	e01b      	b.n	8000ab4 <SPI_PeriClkCtrl+0x84>
		if (pSPIx == SPI1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <SPI_PeriClkCtrl+0x90>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d106      	bne.n	8000a92 <SPI_PeriClkCtrl+0x62>
			SPI1_PCLK_DI();
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a8e:	6193      	str	r3, [r2, #24]
}
 8000a90:	e010      	b.n	8000ab4 <SPI_PeriClkCtrl+0x84>
		} else if (pSPIx == SPI2) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <SPI_PeriClkCtrl+0x98>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <SPI_PeriClkCtrl+0x78>
			SPI2_PCLK_DI();
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000aa4:	61d3      	str	r3, [r2, #28]
}
 8000aa6:	e005      	b.n	8000ab4 <SPI_PeriClkCtrl+0x84>
			SPI3_PCLK_DI();
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SPI_PeriClkCtrl+0x94>)
 8000aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab2:	61d3      	str	r3, [r2, #28]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40003800 	.word	0x40003800

08000acc <SPI_Init>:
 * @brief			This functions initializes a given SPI
 * @param [in]		Base Address of the SPI Handle
 * @return			None
 * @note 			None
 */
void SPI_Init(SPI_Handle_t *pSPIxHandle){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	//Enable clock
	SPI_PeriClkCtrl(pSPIxHandle->pSPIx, ENABLE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffa8 	bl	8000a30 <SPI_PeriClkCtrl>


	uint32_t temp = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]

	// Configuration of the device mode
	temp |= pSPIxHandle->SPI_Config.SPI_DeviceMode << 2;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]

	// Configuration of the Bus
	if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	795b      	ldrb	r3, [r3, #5]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d104      	bne.n	8000b04 <SPI_Init+0x38>
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDI mode clear
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	e014      	b.n	8000b2e <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	795b      	ldrb	r3, [r3, #5]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d104      	bne.n	8000b16 <SPI_Init+0x4a>
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e00b      	b.n	8000b2e <SPI_Init+0x62>
	} else if (pSPIxHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RSONLY){
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	795b      	ldrb	r3, [r3, #5]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d107      	bne.n	8000b2e <SPI_Init+0x62>
		temp &= ~(1 << SPI_CR1_BIDIMODE); // BIDI mode clear
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000b24:	60fb      	str	r3, [r7, #12]
		temp |= (1 << SPI_CR1_RXONLY); // RXONLY set
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2c:	60fb      	str	r3, [r7, #12]
	}

	// Configuration of the clock speed
	temp |= (pSPIxHandle->SPI_Config.SPI_SCLKSpeed << SPI_CR1_BR);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	799b      	ldrb	r3, [r3, #6]
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	461a      	mov	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

	// Configuration of the DFF
	temp |= (pSPIxHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	79db      	ldrb	r3, [r3, #7]
 8000b40:	02db      	lsls	r3, r3, #11
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPOL
	temp |= (pSPIxHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

	// Configuration of the CPHA
	temp |= (pSPIxHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7a5b      	ldrb	r3, [r3, #9]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

	// Configuration of the SSM
	temp |= (pSPIxHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7a9b      	ldrb	r3, [r3, #10]
 8000b68:	025b      	lsls	r3, r3, #9
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]

	pSPIxHandle->pSPIx->CR1 = temp; // Here yoo can use = bc al the bit-fields are already configured
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <SPI_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){ // while(!(pSPIx->SR & (1 << 1)));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SPI_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit is one in that register
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e000      	b.n	8000b9e <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET; // The programs loops in this state until it changes and the flag is set
 8000b9c:	2300      	movs	r3, #0
 }
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SPI_SendData>:
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note 			Blocked communication implemented. The function call will wait until all
 *  				the bytes are transmitted
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]

	while (len > 0){
 8000bb4:	e027      	b.n	8000c06 <SPI_SendData+0x5e>
		// Wait until TXE is set -> Tx Buffer is empty
		while((SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG)) == FLAG_RESET);
 8000bb6:	bf00      	nop
 8000bb8:	2102      	movs	r1, #2
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff ffe1 	bl	8000b82 <SPI_GetFlagStatus>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f8      	beq.n	8000bb8 <SPI_SendData+0x10>
		// When the expression is true and the flag is still in reset, it will wait in the while

		// Check DFF bit
		if(pSPIx->CR1 & (SPI_CR1_DFF)){
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 030b 	and.w	r3, r3, #11
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00e      	beq.n	8000bf0 <SPI_SendData+0x48>
			// 16-Bit format
			// Load data into Tx Buffer
			pSPIx->DR = *((uint16_t*)pTxBuffer); // Dereference the pointer to get the data
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	60da      	str	r2, [r3, #12]

			// Decrease the length
			len--;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
			len--; // 2 bytes to decrease
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	607b      	str	r3, [r7, #4]

			// Increment TxBuffer in order to make it point to the next data item
			(uint16_t*)pTxBuffer++;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	e00a      	b.n	8000c06 <SPI_SendData+0x5e>

		} else {
			// 8-Bit format
			pSPIx->DR = *pTxBuffer;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	60da      	str	r2, [r3, #12]
			len--;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
	while (len > 0){
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1d4      	bne.n	8000bb6 <SPI_SendData+0xe>
		}
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SPI_ReceiveData>:
 * @param [in]		Pointer to the buffer containing the data that is going to be received
 * @param [in]		Length of the buffer in bytes
 * @return			None
 * @note
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]

	while (len > 0){
 8000c20:	e027      	b.n	8000c72 <SPI_ReceiveData+0x5e>
			// Wait until RXE is set -> Tx Buffer is empty
			while((SPI_GetFlagStatus(pSPIx, SPI_RXE_FLAG)) == FLAG_RESET);
 8000c22:	bf00      	nop
 8000c24:	2101      	movs	r1, #1
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f7ff ffab 	bl	8000b82 <SPI_GetFlagStatus>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f8      	beq.n	8000c24 <SPI_ReceiveData+0x10>
			// When the expression is true and the flag is still in reset, it will wait in the while

			// Check DFF bit
			if(pSPIx->CR1 & (SPI_CR1_DFF)){
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 030b 	and.w	r3, r3, #11
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00e      	beq.n	8000c5c <SPI_ReceiveData+0x48>
				// 16-Bit format
				// Load data from DR to RxBuffer
				*((uint16_t*)pRxBuffer) = pSPIx->DR; // Dereference the pointer to get the data
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	801a      	strh	r2, [r3, #0]

				// Decrease the length
				len--;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
				len--; // 2 bytes to decrease
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]

				// Increment TxBuffer in order to make it point to the next data item
				(uint16_t*)pRxBuffer++;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	e00a      	b.n	8000c72 <SPI_ReceiveData+0x5e>

			} else {
				// 8-Bit format
				*pRxBuffer = pSPIx->DR ;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	701a      	strb	r2, [r3, #0]
				len--;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
	while (len > 0){
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1d4      	bne.n	8000c22 <SPI_ReceiveData+0xe>
			}
		}
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SPI_PeripheralControl>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d106      	bne.n	8000ca0 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c9e:	e005      	b.n	8000cac <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr

08000cb6 <SPI_SSOEConfig>:
 * @param [in]		Base Address of the SPI Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d106      	bne.n	8000cd6 <SPI_SSOEConfig+0x20>
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f043 0204 	orr.w	r2, r3, #4
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	605a      	str	r2, [r3, #4]
	} else {
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000cd4:	e005      	b.n	8000ce2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f023 0204 	bic.w	r2, r3, #4
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	605a      	str	r2, [r3, #4]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <__libc_init_array>:
 8000cec:	b570      	push	{r4, r5, r6, lr}
 8000cee:	2500      	movs	r5, #0
 8000cf0:	4e0c      	ldr	r6, [pc, #48]	; (8000d24 <__libc_init_array+0x38>)
 8000cf2:	4c0d      	ldr	r4, [pc, #52]	; (8000d28 <__libc_init_array+0x3c>)
 8000cf4:	1ba4      	subs	r4, r4, r6
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	42a5      	cmp	r5, r4
 8000cfa:	d109      	bne.n	8000d10 <__libc_init_array+0x24>
 8000cfc:	f001 fa44 	bl	8002188 <_init>
 8000d00:	2500      	movs	r5, #0
 8000d02:	4e0a      	ldr	r6, [pc, #40]	; (8000d2c <__libc_init_array+0x40>)
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <__libc_init_array+0x44>)
 8000d06:	1ba4      	subs	r4, r4, r6
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	d105      	bne.n	8000d1a <__libc_init_array+0x2e>
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d14:	4798      	blx	r3
 8000d16:	3501      	adds	r5, #1
 8000d18:	e7ee      	b.n	8000cf8 <__libc_init_array+0xc>
 8000d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d1e:	4798      	blx	r3
 8000d20:	3501      	adds	r5, #1
 8000d22:	e7f2      	b.n	8000d0a <__libc_init_array+0x1e>
 8000d24:	080022fc 	.word	0x080022fc
 8000d28:	080022fc 	.word	0x080022fc
 8000d2c:	080022fc 	.word	0x080022fc
 8000d30:	08002300 	.word	0x08002300

08000d34 <memset>:
 8000d34:	4603      	mov	r3, r0
 8000d36:	4402      	add	r2, r0
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d100      	bne.n	8000d3e <memset+0xa>
 8000d3c:	4770      	bx	lr
 8000d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d42:	e7f9      	b.n	8000d38 <memset+0x4>

08000d44 <iprintf>:
 8000d44:	b40f      	push	{r0, r1, r2, r3}
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <iprintf+0x2c>)
 8000d48:	b513      	push	{r0, r1, r4, lr}
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	b124      	cbz	r4, 8000d58 <iprintf+0x14>
 8000d4e:	69a3      	ldr	r3, [r4, #24]
 8000d50:	b913      	cbnz	r3, 8000d58 <iprintf+0x14>
 8000d52:	4620      	mov	r0, r4
 8000d54:	f000 fa22 	bl	800119c <__sinit>
 8000d58:	ab05      	add	r3, sp, #20
 8000d5a:	9a04      	ldr	r2, [sp, #16]
 8000d5c:	68a1      	ldr	r1, [r4, #8]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	f000 fbd7 	bl	8001514 <_vfiprintf_r>
 8000d66:	b002      	add	sp, #8
 8000d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr
 8000d70:	20000000 	.word	0x20000000

08000d74 <_puts_r>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	460e      	mov	r6, r1
 8000d78:	4605      	mov	r5, r0
 8000d7a:	b118      	cbz	r0, 8000d84 <_puts_r+0x10>
 8000d7c:	6983      	ldr	r3, [r0, #24]
 8000d7e:	b90b      	cbnz	r3, 8000d84 <_puts_r+0x10>
 8000d80:	f000 fa0c 	bl	800119c <__sinit>
 8000d84:	69ab      	ldr	r3, [r5, #24]
 8000d86:	68ac      	ldr	r4, [r5, #8]
 8000d88:	b913      	cbnz	r3, 8000d90 <_puts_r+0x1c>
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f000 fa06 	bl	800119c <__sinit>
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <_puts_r+0xac>)
 8000d92:	429c      	cmp	r4, r3
 8000d94:	d117      	bne.n	8000dc6 <_puts_r+0x52>
 8000d96:	686c      	ldr	r4, [r5, #4]
 8000d98:	89a3      	ldrh	r3, [r4, #12]
 8000d9a:	071b      	lsls	r3, r3, #28
 8000d9c:	d51d      	bpl.n	8000dda <_puts_r+0x66>
 8000d9e:	6923      	ldr	r3, [r4, #16]
 8000da0:	b1db      	cbz	r3, 8000dda <_puts_r+0x66>
 8000da2:	3e01      	subs	r6, #1
 8000da4:	68a3      	ldr	r3, [r4, #8]
 8000da6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000daa:	3b01      	subs	r3, #1
 8000dac:	60a3      	str	r3, [r4, #8]
 8000dae:	b9e9      	cbnz	r1, 8000dec <_puts_r+0x78>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	da2e      	bge.n	8000e12 <_puts_r+0x9e>
 8000db4:	4622      	mov	r2, r4
 8000db6:	210a      	movs	r1, #10
 8000db8:	4628      	mov	r0, r5
 8000dba:	f000 f83f 	bl	8000e3c <__swbuf_r>
 8000dbe:	3001      	adds	r0, #1
 8000dc0:	d011      	beq.n	8000de6 <_puts_r+0x72>
 8000dc2:	200a      	movs	r0, #10
 8000dc4:	e011      	b.n	8000dea <_puts_r+0x76>
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <_puts_r+0xb0>)
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d101      	bne.n	8000dd0 <_puts_r+0x5c>
 8000dcc:	68ac      	ldr	r4, [r5, #8]
 8000dce:	e7e3      	b.n	8000d98 <_puts_r+0x24>
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <_puts_r+0xb4>)
 8000dd2:	429c      	cmp	r4, r3
 8000dd4:	bf08      	it	eq
 8000dd6:	68ec      	ldreq	r4, [r5, #12]
 8000dd8:	e7de      	b.n	8000d98 <_puts_r+0x24>
 8000dda:	4621      	mov	r1, r4
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f000 f87f 	bl	8000ee0 <__swsetup_r>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0dd      	beq.n	8000da2 <_puts_r+0x2e>
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da04      	bge.n	8000dfa <_puts_r+0x86>
 8000df0:	69a2      	ldr	r2, [r4, #24]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	dc06      	bgt.n	8000e04 <_puts_r+0x90>
 8000df6:	290a      	cmp	r1, #10
 8000df8:	d004      	beq.n	8000e04 <_puts_r+0x90>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	6022      	str	r2, [r4, #0]
 8000e00:	7019      	strb	r1, [r3, #0]
 8000e02:	e7cf      	b.n	8000da4 <_puts_r+0x30>
 8000e04:	4622      	mov	r2, r4
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 f818 	bl	8000e3c <__swbuf_r>
 8000e0c:	3001      	adds	r0, #1
 8000e0e:	d1c9      	bne.n	8000da4 <_puts_r+0x30>
 8000e10:	e7e9      	b.n	8000de6 <_puts_r+0x72>
 8000e12:	200a      	movs	r0, #10
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	6022      	str	r2, [r4, #0]
 8000e1a:	7018      	strb	r0, [r3, #0]
 8000e1c:	e7e5      	b.n	8000dea <_puts_r+0x76>
 8000e1e:	bf00      	nop
 8000e20:	0800226c 	.word	0x0800226c
 8000e24:	0800228c 	.word	0x0800228c
 8000e28:	0800224c 	.word	0x0800224c

08000e2c <puts>:
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <puts+0xc>)
 8000e2e:	4601      	mov	r1, r0
 8000e30:	6818      	ldr	r0, [r3, #0]
 8000e32:	f7ff bf9f 	b.w	8000d74 <_puts_r>
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <__swbuf_r>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	460e      	mov	r6, r1
 8000e40:	4614      	mov	r4, r2
 8000e42:	4605      	mov	r5, r0
 8000e44:	b118      	cbz	r0, 8000e4e <__swbuf_r+0x12>
 8000e46:	6983      	ldr	r3, [r0, #24]
 8000e48:	b90b      	cbnz	r3, 8000e4e <__swbuf_r+0x12>
 8000e4a:	f000 f9a7 	bl	800119c <__sinit>
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <__swbuf_r+0x98>)
 8000e50:	429c      	cmp	r4, r3
 8000e52:	d12a      	bne.n	8000eaa <__swbuf_r+0x6e>
 8000e54:	686c      	ldr	r4, [r5, #4]
 8000e56:	69a3      	ldr	r3, [r4, #24]
 8000e58:	60a3      	str	r3, [r4, #8]
 8000e5a:	89a3      	ldrh	r3, [r4, #12]
 8000e5c:	071a      	lsls	r2, r3, #28
 8000e5e:	d52e      	bpl.n	8000ebe <__swbuf_r+0x82>
 8000e60:	6923      	ldr	r3, [r4, #16]
 8000e62:	b363      	cbz	r3, 8000ebe <__swbuf_r+0x82>
 8000e64:	6923      	ldr	r3, [r4, #16]
 8000e66:	6820      	ldr	r0, [r4, #0]
 8000e68:	b2f6      	uxtb	r6, r6
 8000e6a:	1ac0      	subs	r0, r0, r3
 8000e6c:	6963      	ldr	r3, [r4, #20]
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4283      	cmp	r3, r0
 8000e72:	dc04      	bgt.n	8000e7e <__swbuf_r+0x42>
 8000e74:	4621      	mov	r1, r4
 8000e76:	4628      	mov	r0, r5
 8000e78:	f000 f926 	bl	80010c8 <_fflush_r>
 8000e7c:	bb28      	cbnz	r0, 8000eca <__swbuf_r+0x8e>
 8000e7e:	68a3      	ldr	r3, [r4, #8]
 8000e80:	3001      	adds	r0, #1
 8000e82:	3b01      	subs	r3, #1
 8000e84:	60a3      	str	r3, [r4, #8]
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	6022      	str	r2, [r4, #0]
 8000e8c:	701e      	strb	r6, [r3, #0]
 8000e8e:	6963      	ldr	r3, [r4, #20]
 8000e90:	4283      	cmp	r3, r0
 8000e92:	d004      	beq.n	8000e9e <__swbuf_r+0x62>
 8000e94:	89a3      	ldrh	r3, [r4, #12]
 8000e96:	07db      	lsls	r3, r3, #31
 8000e98:	d519      	bpl.n	8000ece <__swbuf_r+0x92>
 8000e9a:	2e0a      	cmp	r6, #10
 8000e9c:	d117      	bne.n	8000ece <__swbuf_r+0x92>
 8000e9e:	4621      	mov	r1, r4
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f000 f911 	bl	80010c8 <_fflush_r>
 8000ea6:	b190      	cbz	r0, 8000ece <__swbuf_r+0x92>
 8000ea8:	e00f      	b.n	8000eca <__swbuf_r+0x8e>
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__swbuf_r+0x9c>)
 8000eac:	429c      	cmp	r4, r3
 8000eae:	d101      	bne.n	8000eb4 <__swbuf_r+0x78>
 8000eb0:	68ac      	ldr	r4, [r5, #8]
 8000eb2:	e7d0      	b.n	8000e56 <__swbuf_r+0x1a>
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <__swbuf_r+0xa0>)
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	bf08      	it	eq
 8000eba:	68ec      	ldreq	r4, [r5, #12]
 8000ebc:	e7cb      	b.n	8000e56 <__swbuf_r+0x1a>
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	f000 f80d 	bl	8000ee0 <__swsetup_r>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d0cc      	beq.n	8000e64 <__swbuf_r+0x28>
 8000eca:	f04f 37ff 	mov.w	r7, #4294967295
 8000ece:	4638      	mov	r0, r7
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	0800226c 	.word	0x0800226c
 8000ed8:	0800228c 	.word	0x0800228c
 8000edc:	0800224c 	.word	0x0800224c

08000ee0 <__swsetup_r>:
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <__swsetup_r+0xcc>)
 8000ee2:	b570      	push	{r4, r5, r6, lr}
 8000ee4:	681d      	ldr	r5, [r3, #0]
 8000ee6:	4606      	mov	r6, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	b125      	cbz	r5, 8000ef6 <__swsetup_r+0x16>
 8000eec:	69ab      	ldr	r3, [r5, #24]
 8000eee:	b913      	cbnz	r3, 8000ef6 <__swsetup_r+0x16>
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 f953 	bl	800119c <__sinit>
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <__swsetup_r+0xd0>)
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	d10f      	bne.n	8000f1c <__swsetup_r+0x3c>
 8000efc:	686c      	ldr	r4, [r5, #4]
 8000efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	0715      	lsls	r5, r2, #28
 8000f06:	d42c      	bmi.n	8000f62 <__swsetup_r+0x82>
 8000f08:	06d0      	lsls	r0, r2, #27
 8000f0a:	d411      	bmi.n	8000f30 <__swsetup_r+0x50>
 8000f0c:	2209      	movs	r2, #9
 8000f0e:	6032      	str	r2, [r6, #0]
 8000f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f14:	81a3      	strh	r3, [r4, #12]
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	e03e      	b.n	8000f9a <__swsetup_r+0xba>
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <__swsetup_r+0xd4>)
 8000f1e:	429c      	cmp	r4, r3
 8000f20:	d101      	bne.n	8000f26 <__swsetup_r+0x46>
 8000f22:	68ac      	ldr	r4, [r5, #8]
 8000f24:	e7eb      	b.n	8000efe <__swsetup_r+0x1e>
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <__swsetup_r+0xd8>)
 8000f28:	429c      	cmp	r4, r3
 8000f2a:	bf08      	it	eq
 8000f2c:	68ec      	ldreq	r4, [r5, #12]
 8000f2e:	e7e6      	b.n	8000efe <__swsetup_r+0x1e>
 8000f30:	0751      	lsls	r1, r2, #29
 8000f32:	d512      	bpl.n	8000f5a <__swsetup_r+0x7a>
 8000f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f36:	b141      	cbz	r1, 8000f4a <__swsetup_r+0x6a>
 8000f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d002      	beq.n	8000f46 <__swsetup_r+0x66>
 8000f40:	4630      	mov	r0, r6
 8000f42:	f000 fa19 	bl	8001378 <_free_r>
 8000f46:	2300      	movs	r3, #0
 8000f48:	6363      	str	r3, [r4, #52]	; 0x34
 8000f4a:	89a3      	ldrh	r3, [r4, #12]
 8000f4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000f50:	81a3      	strh	r3, [r4, #12]
 8000f52:	2300      	movs	r3, #0
 8000f54:	6063      	str	r3, [r4, #4]
 8000f56:	6923      	ldr	r3, [r4, #16]
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	89a3      	ldrh	r3, [r4, #12]
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	81a3      	strh	r3, [r4, #12]
 8000f62:	6923      	ldr	r3, [r4, #16]
 8000f64:	b94b      	cbnz	r3, 8000f7a <__swsetup_r+0x9a>
 8000f66:	89a3      	ldrh	r3, [r4, #12]
 8000f68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f70:	d003      	beq.n	8000f7a <__swsetup_r+0x9a>
 8000f72:	4621      	mov	r1, r4
 8000f74:	4630      	mov	r0, r6
 8000f76:	f000 f9bf 	bl	80012f8 <__smakebuf_r>
 8000f7a:	89a2      	ldrh	r2, [r4, #12]
 8000f7c:	f012 0301 	ands.w	r3, r2, #1
 8000f80:	d00c      	beq.n	8000f9c <__swsetup_r+0xbc>
 8000f82:	2300      	movs	r3, #0
 8000f84:	60a3      	str	r3, [r4, #8]
 8000f86:	6963      	ldr	r3, [r4, #20]
 8000f88:	425b      	negs	r3, r3
 8000f8a:	61a3      	str	r3, [r4, #24]
 8000f8c:	6923      	ldr	r3, [r4, #16]
 8000f8e:	b953      	cbnz	r3, 8000fa6 <__swsetup_r+0xc6>
 8000f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000f98:	d1ba      	bne.n	8000f10 <__swsetup_r+0x30>
 8000f9a:	bd70      	pop	{r4, r5, r6, pc}
 8000f9c:	0792      	lsls	r2, r2, #30
 8000f9e:	bf58      	it	pl
 8000fa0:	6963      	ldrpl	r3, [r4, #20]
 8000fa2:	60a3      	str	r3, [r4, #8]
 8000fa4:	e7f2      	b.n	8000f8c <__swsetup_r+0xac>
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	e7f7      	b.n	8000f9a <__swsetup_r+0xba>
 8000faa:	bf00      	nop
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	0800226c 	.word	0x0800226c
 8000fb4:	0800228c 	.word	0x0800228c
 8000fb8:	0800224c 	.word	0x0800224c

08000fbc <__sflush_r>:
 8000fbc:	898a      	ldrh	r2, [r1, #12]
 8000fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fc2:	4605      	mov	r5, r0
 8000fc4:	0710      	lsls	r0, r2, #28
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	d458      	bmi.n	800107c <__sflush_r+0xc0>
 8000fca:	684b      	ldr	r3, [r1, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dc05      	bgt.n	8000fdc <__sflush_r+0x20>
 8000fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dc02      	bgt.n	8000fdc <__sflush_r+0x20>
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	d0f9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000fe8:	682f      	ldr	r7, [r5, #0]
 8000fea:	6a21      	ldr	r1, [r4, #32]
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	d032      	beq.n	8001056 <__sflush_r+0x9a>
 8000ff0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000ff2:	89a3      	ldrh	r3, [r4, #12]
 8000ff4:	075a      	lsls	r2, r3, #29
 8000ff6:	d505      	bpl.n	8001004 <__sflush_r+0x48>
 8000ff8:	6863      	ldr	r3, [r4, #4]
 8000ffa:	1ac0      	subs	r0, r0, r3
 8000ffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ffe:	b10b      	cbz	r3, 8001004 <__sflush_r+0x48>
 8001000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001002:	1ac0      	subs	r0, r0, r3
 8001004:	2300      	movs	r3, #0
 8001006:	4602      	mov	r2, r0
 8001008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800100a:	6a21      	ldr	r1, [r4, #32]
 800100c:	4628      	mov	r0, r5
 800100e:	47b0      	blx	r6
 8001010:	1c43      	adds	r3, r0, #1
 8001012:	89a3      	ldrh	r3, [r4, #12]
 8001014:	d106      	bne.n	8001024 <__sflush_r+0x68>
 8001016:	6829      	ldr	r1, [r5, #0]
 8001018:	291d      	cmp	r1, #29
 800101a:	d848      	bhi.n	80010ae <__sflush_r+0xf2>
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <__sflush_r+0x108>)
 800101e:	40ca      	lsrs	r2, r1
 8001020:	07d6      	lsls	r6, r2, #31
 8001022:	d544      	bpl.n	80010ae <__sflush_r+0xf2>
 8001024:	2200      	movs	r2, #0
 8001026:	6062      	str	r2, [r4, #4]
 8001028:	6922      	ldr	r2, [r4, #16]
 800102a:	04d9      	lsls	r1, r3, #19
 800102c:	6022      	str	r2, [r4, #0]
 800102e:	d504      	bpl.n	800103a <__sflush_r+0x7e>
 8001030:	1c42      	adds	r2, r0, #1
 8001032:	d101      	bne.n	8001038 <__sflush_r+0x7c>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b903      	cbnz	r3, 800103a <__sflush_r+0x7e>
 8001038:	6560      	str	r0, [r4, #84]	; 0x54
 800103a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800103c:	602f      	str	r7, [r5, #0]
 800103e:	2900      	cmp	r1, #0
 8001040:	d0c9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8001042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001046:	4299      	cmp	r1, r3
 8001048:	d002      	beq.n	8001050 <__sflush_r+0x94>
 800104a:	4628      	mov	r0, r5
 800104c:	f000 f994 	bl	8001378 <_free_r>
 8001050:	2000      	movs	r0, #0
 8001052:	6360      	str	r0, [r4, #52]	; 0x34
 8001054:	e7c0      	b.n	8000fd8 <__sflush_r+0x1c>
 8001056:	2301      	movs	r3, #1
 8001058:	4628      	mov	r0, r5
 800105a:	47b0      	blx	r6
 800105c:	1c41      	adds	r1, r0, #1
 800105e:	d1c8      	bne.n	8000ff2 <__sflush_r+0x36>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0c5      	beq.n	8000ff2 <__sflush_r+0x36>
 8001066:	2b1d      	cmp	r3, #29
 8001068:	d001      	beq.n	800106e <__sflush_r+0xb2>
 800106a:	2b16      	cmp	r3, #22
 800106c:	d101      	bne.n	8001072 <__sflush_r+0xb6>
 800106e:	602f      	str	r7, [r5, #0]
 8001070:	e7b1      	b.n	8000fd6 <__sflush_r+0x1a>
 8001072:	89a3      	ldrh	r3, [r4, #12]
 8001074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001078:	81a3      	strh	r3, [r4, #12]
 800107a:	e7ad      	b.n	8000fd8 <__sflush_r+0x1c>
 800107c:	690f      	ldr	r7, [r1, #16]
 800107e:	2f00      	cmp	r7, #0
 8001080:	d0a9      	beq.n	8000fd6 <__sflush_r+0x1a>
 8001082:	0793      	lsls	r3, r2, #30
 8001084:	bf18      	it	ne
 8001086:	2300      	movne	r3, #0
 8001088:	680e      	ldr	r6, [r1, #0]
 800108a:	bf08      	it	eq
 800108c:	694b      	ldreq	r3, [r1, #20]
 800108e:	eba6 0807 	sub.w	r8, r6, r7
 8001092:	600f      	str	r7, [r1, #0]
 8001094:	608b      	str	r3, [r1, #8]
 8001096:	f1b8 0f00 	cmp.w	r8, #0
 800109a:	dd9c      	ble.n	8000fd6 <__sflush_r+0x1a>
 800109c:	4643      	mov	r3, r8
 800109e:	463a      	mov	r2, r7
 80010a0:	6a21      	ldr	r1, [r4, #32]
 80010a2:	4628      	mov	r0, r5
 80010a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80010a6:	47b0      	blx	r6
 80010a8:	2800      	cmp	r0, #0
 80010aa:	dc06      	bgt.n	80010ba <__sflush_r+0xfe>
 80010ac:	89a3      	ldrh	r3, [r4, #12]
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	81a3      	strh	r3, [r4, #12]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	e78e      	b.n	8000fd8 <__sflush_r+0x1c>
 80010ba:	4407      	add	r7, r0
 80010bc:	eba8 0800 	sub.w	r8, r8, r0
 80010c0:	e7e9      	b.n	8001096 <__sflush_r+0xda>
 80010c2:	bf00      	nop
 80010c4:	20400001 	.word	0x20400001

080010c8 <_fflush_r>:
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	690b      	ldr	r3, [r1, #16]
 80010cc:	4605      	mov	r5, r0
 80010ce:	460c      	mov	r4, r1
 80010d0:	b1db      	cbz	r3, 800110a <_fflush_r+0x42>
 80010d2:	b118      	cbz	r0, 80010dc <_fflush_r+0x14>
 80010d4:	6983      	ldr	r3, [r0, #24]
 80010d6:	b90b      	cbnz	r3, 80010dc <_fflush_r+0x14>
 80010d8:	f000 f860 	bl	800119c <__sinit>
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <_fflush_r+0x48>)
 80010de:	429c      	cmp	r4, r3
 80010e0:	d109      	bne.n	80010f6 <_fflush_r+0x2e>
 80010e2:	686c      	ldr	r4, [r5, #4]
 80010e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e8:	b17b      	cbz	r3, 800110a <_fflush_r+0x42>
 80010ea:	4621      	mov	r1, r4
 80010ec:	4628      	mov	r0, r5
 80010ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010f2:	f7ff bf63 	b.w	8000fbc <__sflush_r>
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_fflush_r+0x4c>)
 80010f8:	429c      	cmp	r4, r3
 80010fa:	d101      	bne.n	8001100 <_fflush_r+0x38>
 80010fc:	68ac      	ldr	r4, [r5, #8]
 80010fe:	e7f1      	b.n	80010e4 <_fflush_r+0x1c>
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <_fflush_r+0x50>)
 8001102:	429c      	cmp	r4, r3
 8001104:	bf08      	it	eq
 8001106:	68ec      	ldreq	r4, [r5, #12]
 8001108:	e7ec      	b.n	80010e4 <_fflush_r+0x1c>
 800110a:	2000      	movs	r0, #0
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	0800226c 	.word	0x0800226c
 8001114:	0800228c 	.word	0x0800228c
 8001118:	0800224c 	.word	0x0800224c

0800111c <std>:
 800111c:	2300      	movs	r3, #0
 800111e:	b510      	push	{r4, lr}
 8001120:	4604      	mov	r4, r0
 8001122:	e9c0 3300 	strd	r3, r3, [r0]
 8001126:	6083      	str	r3, [r0, #8]
 8001128:	8181      	strh	r1, [r0, #12]
 800112a:	6643      	str	r3, [r0, #100]	; 0x64
 800112c:	81c2      	strh	r2, [r0, #14]
 800112e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001132:	6183      	str	r3, [r0, #24]
 8001134:	4619      	mov	r1, r3
 8001136:	2208      	movs	r2, #8
 8001138:	305c      	adds	r0, #92	; 0x5c
 800113a:	f7ff fdfb 	bl	8000d34 <memset>
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <std+0x38>)
 8001140:	6224      	str	r4, [r4, #32]
 8001142:	6263      	str	r3, [r4, #36]	; 0x24
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <std+0x3c>)
 8001146:	62a3      	str	r3, [r4, #40]	; 0x28
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <std+0x40>)
 800114a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <std+0x44>)
 800114e:	6323      	str	r3, [r4, #48]	; 0x30
 8001150:	bd10      	pop	{r4, pc}
 8001152:	bf00      	nop
 8001154:	08001a71 	.word	0x08001a71
 8001158:	08001a93 	.word	0x08001a93
 800115c:	08001acb 	.word	0x08001acb
 8001160:	08001aef 	.word	0x08001aef

08001164 <_cleanup_r>:
 8001164:	4901      	ldr	r1, [pc, #4]	; (800116c <_cleanup_r+0x8>)
 8001166:	f000 b885 	b.w	8001274 <_fwalk_reent>
 800116a:	bf00      	nop
 800116c:	080010c9 	.word	0x080010c9

08001170 <__sfmoreglue>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	2568      	movs	r5, #104	; 0x68
 8001174:	1e4a      	subs	r2, r1, #1
 8001176:	4355      	muls	r5, r2
 8001178:	460e      	mov	r6, r1
 800117a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800117e:	f000 f947 	bl	8001410 <_malloc_r>
 8001182:	4604      	mov	r4, r0
 8001184:	b140      	cbz	r0, 8001198 <__sfmoreglue+0x28>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c0 1600 	strd	r1, r6, [r0]
 800118c:	300c      	adds	r0, #12
 800118e:	60a0      	str	r0, [r4, #8]
 8001190:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001194:	f7ff fdce 	bl	8000d34 <memset>
 8001198:	4620      	mov	r0, r4
 800119a:	bd70      	pop	{r4, r5, r6, pc}

0800119c <__sinit>:
 800119c:	6983      	ldr	r3, [r0, #24]
 800119e:	b510      	push	{r4, lr}
 80011a0:	4604      	mov	r4, r0
 80011a2:	bb33      	cbnz	r3, 80011f2 <__sinit+0x56>
 80011a4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80011a8:	6503      	str	r3, [r0, #80]	; 0x50
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <__sinit+0x58>)
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <__sinit+0x5c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6282      	str	r2, [r0, #40]	; 0x28
 80011b2:	4298      	cmp	r0, r3
 80011b4:	bf04      	itt	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	6183      	streq	r3, [r0, #24]
 80011ba:	f000 f81f 	bl	80011fc <__sfp>
 80011be:	6060      	str	r0, [r4, #4]
 80011c0:	4620      	mov	r0, r4
 80011c2:	f000 f81b 	bl	80011fc <__sfp>
 80011c6:	60a0      	str	r0, [r4, #8]
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 f817 	bl	80011fc <__sfp>
 80011ce:	2200      	movs	r2, #0
 80011d0:	60e0      	str	r0, [r4, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	6860      	ldr	r0, [r4, #4]
 80011d6:	f7ff ffa1 	bl	800111c <std>
 80011da:	2201      	movs	r2, #1
 80011dc:	2109      	movs	r1, #9
 80011de:	68a0      	ldr	r0, [r4, #8]
 80011e0:	f7ff ff9c 	bl	800111c <std>
 80011e4:	2202      	movs	r2, #2
 80011e6:	2112      	movs	r1, #18
 80011e8:	68e0      	ldr	r0, [r4, #12]
 80011ea:	f7ff ff97 	bl	800111c <std>
 80011ee:	2301      	movs	r3, #1
 80011f0:	61a3      	str	r3, [r4, #24]
 80011f2:	bd10      	pop	{r4, pc}
 80011f4:	08002248 	.word	0x08002248
 80011f8:	08001165 	.word	0x08001165

080011fc <__sfp>:
 80011fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <__sfp+0x70>)
 8001200:	4607      	mov	r7, r0
 8001202:	681e      	ldr	r6, [r3, #0]
 8001204:	69b3      	ldr	r3, [r6, #24]
 8001206:	b913      	cbnz	r3, 800120e <__sfp+0x12>
 8001208:	4630      	mov	r0, r6
 800120a:	f7ff ffc7 	bl	800119c <__sinit>
 800120e:	3648      	adds	r6, #72	; 0x48
 8001210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001214:	3b01      	subs	r3, #1
 8001216:	d503      	bpl.n	8001220 <__sfp+0x24>
 8001218:	6833      	ldr	r3, [r6, #0]
 800121a:	b133      	cbz	r3, 800122a <__sfp+0x2e>
 800121c:	6836      	ldr	r6, [r6, #0]
 800121e:	e7f7      	b.n	8001210 <__sfp+0x14>
 8001220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001224:	b16d      	cbz	r5, 8001242 <__sfp+0x46>
 8001226:	3468      	adds	r4, #104	; 0x68
 8001228:	e7f4      	b.n	8001214 <__sfp+0x18>
 800122a:	2104      	movs	r1, #4
 800122c:	4638      	mov	r0, r7
 800122e:	f7ff ff9f 	bl	8001170 <__sfmoreglue>
 8001232:	6030      	str	r0, [r6, #0]
 8001234:	2800      	cmp	r0, #0
 8001236:	d1f1      	bne.n	800121c <__sfp+0x20>
 8001238:	230c      	movs	r3, #12
 800123a:	4604      	mov	r4, r0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4620      	mov	r0, r4
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <__sfp+0x74>)
 8001244:	6665      	str	r5, [r4, #100]	; 0x64
 8001246:	e9c4 5500 	strd	r5, r5, [r4]
 800124a:	60a5      	str	r5, [r4, #8]
 800124c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001250:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001254:	2208      	movs	r2, #8
 8001256:	4629      	mov	r1, r5
 8001258:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800125c:	f7ff fd6a 	bl	8000d34 <memset>
 8001260:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001264:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001268:	e7e9      	b.n	800123e <__sfp+0x42>
 800126a:	bf00      	nop
 800126c:	08002248 	.word	0x08002248
 8001270:	ffff0001 	.word	0xffff0001

08001274 <_fwalk_reent>:
 8001274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001278:	4680      	mov	r8, r0
 800127a:	4689      	mov	r9, r1
 800127c:	2600      	movs	r6, #0
 800127e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001282:	b914      	cbnz	r4, 800128a <_fwalk_reent+0x16>
 8001284:	4630      	mov	r0, r6
 8001286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800128a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800128e:	3f01      	subs	r7, #1
 8001290:	d501      	bpl.n	8001296 <_fwalk_reent+0x22>
 8001292:	6824      	ldr	r4, [r4, #0]
 8001294:	e7f5      	b.n	8001282 <_fwalk_reent+0xe>
 8001296:	89ab      	ldrh	r3, [r5, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d907      	bls.n	80012ac <_fwalk_reent+0x38>
 800129c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012a0:	3301      	adds	r3, #1
 80012a2:	d003      	beq.n	80012ac <_fwalk_reent+0x38>
 80012a4:	4629      	mov	r1, r5
 80012a6:	4640      	mov	r0, r8
 80012a8:	47c8      	blx	r9
 80012aa:	4306      	orrs	r6, r0
 80012ac:	3568      	adds	r5, #104	; 0x68
 80012ae:	e7ee      	b.n	800128e <_fwalk_reent+0x1a>

080012b0 <__swhatbuf_r>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	460e      	mov	r6, r1
 80012b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b8:	b096      	sub	sp, #88	; 0x58
 80012ba:	2900      	cmp	r1, #0
 80012bc:	4614      	mov	r4, r2
 80012be:	461d      	mov	r5, r3
 80012c0:	da07      	bge.n	80012d2 <__swhatbuf_r+0x22>
 80012c2:	2300      	movs	r3, #0
 80012c4:	602b      	str	r3, [r5, #0]
 80012c6:	89b3      	ldrh	r3, [r6, #12]
 80012c8:	061a      	lsls	r2, r3, #24
 80012ca:	d410      	bmi.n	80012ee <__swhatbuf_r+0x3e>
 80012cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d0:	e00e      	b.n	80012f0 <__swhatbuf_r+0x40>
 80012d2:	466a      	mov	r2, sp
 80012d4:	f000 fc32 	bl	8001b3c <_fstat_r>
 80012d8:	2800      	cmp	r0, #0
 80012da:	dbf2      	blt.n	80012c2 <__swhatbuf_r+0x12>
 80012dc:	9a01      	ldr	r2, [sp, #4]
 80012de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012e6:	425a      	negs	r2, r3
 80012e8:	415a      	adcs	r2, r3
 80012ea:	602a      	str	r2, [r5, #0]
 80012ec:	e7ee      	b.n	80012cc <__swhatbuf_r+0x1c>
 80012ee:	2340      	movs	r3, #64	; 0x40
 80012f0:	2000      	movs	r0, #0
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	b016      	add	sp, #88	; 0x58
 80012f6:	bd70      	pop	{r4, r5, r6, pc}

080012f8 <__smakebuf_r>:
 80012f8:	898b      	ldrh	r3, [r1, #12]
 80012fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012fc:	079d      	lsls	r5, r3, #30
 80012fe:	4606      	mov	r6, r0
 8001300:	460c      	mov	r4, r1
 8001302:	d507      	bpl.n	8001314 <__smakebuf_r+0x1c>
 8001304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	6123      	str	r3, [r4, #16]
 800130c:	2301      	movs	r3, #1
 800130e:	6163      	str	r3, [r4, #20]
 8001310:	b002      	add	sp, #8
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	ab01      	add	r3, sp, #4
 8001316:	466a      	mov	r2, sp
 8001318:	f7ff ffca 	bl	80012b0 <__swhatbuf_r>
 800131c:	9900      	ldr	r1, [sp, #0]
 800131e:	4605      	mov	r5, r0
 8001320:	4630      	mov	r0, r6
 8001322:	f000 f875 	bl	8001410 <_malloc_r>
 8001326:	b948      	cbnz	r0, 800133c <__smakebuf_r+0x44>
 8001328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132c:	059a      	lsls	r2, r3, #22
 800132e:	d4ef      	bmi.n	8001310 <__smakebuf_r+0x18>
 8001330:	f023 0303 	bic.w	r3, r3, #3
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	81a3      	strh	r3, [r4, #12]
 800133a:	e7e3      	b.n	8001304 <__smakebuf_r+0xc>
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <__smakebuf_r+0x7c>)
 800133e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	6020      	str	r0, [r4, #0]
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	81a3      	strh	r3, [r4, #12]
 800134a:	9b00      	ldr	r3, [sp, #0]
 800134c:	6120      	str	r0, [r4, #16]
 800134e:	6163      	str	r3, [r4, #20]
 8001350:	9b01      	ldr	r3, [sp, #4]
 8001352:	b15b      	cbz	r3, 800136c <__smakebuf_r+0x74>
 8001354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001358:	4630      	mov	r0, r6
 800135a:	f000 fc01 	bl	8001b60 <_isatty_r>
 800135e:	b128      	cbz	r0, 800136c <__smakebuf_r+0x74>
 8001360:	89a3      	ldrh	r3, [r4, #12]
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	81a3      	strh	r3, [r4, #12]
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	431d      	orrs	r5, r3
 8001370:	81a5      	strh	r5, [r4, #12]
 8001372:	e7cd      	b.n	8001310 <__smakebuf_r+0x18>
 8001374:	08001165 	.word	0x08001165

08001378 <_free_r>:
 8001378:	b538      	push	{r3, r4, r5, lr}
 800137a:	4605      	mov	r5, r0
 800137c:	2900      	cmp	r1, #0
 800137e:	d043      	beq.n	8001408 <_free_r+0x90>
 8001380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001384:	1f0c      	subs	r4, r1, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfb8      	it	lt
 800138a:	18e4      	addlt	r4, r4, r3
 800138c:	f000 fc18 	bl	8001bc0 <__malloc_lock>
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <_free_r+0x94>)
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	4610      	mov	r0, r2
 8001396:	b933      	cbnz	r3, 80013a6 <_free_r+0x2e>
 8001398:	6063      	str	r3, [r4, #4]
 800139a:	6014      	str	r4, [r2, #0]
 800139c:	4628      	mov	r0, r5
 800139e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013a2:	f000 bc0e 	b.w	8001bc2 <__malloc_unlock>
 80013a6:	42a3      	cmp	r3, r4
 80013a8:	d90b      	bls.n	80013c2 <_free_r+0x4a>
 80013aa:	6821      	ldr	r1, [r4, #0]
 80013ac:	1862      	adds	r2, r4, r1
 80013ae:	4293      	cmp	r3, r2
 80013b0:	bf01      	itttt	eq
 80013b2:	681a      	ldreq	r2, [r3, #0]
 80013b4:	685b      	ldreq	r3, [r3, #4]
 80013b6:	1852      	addeq	r2, r2, r1
 80013b8:	6022      	streq	r2, [r4, #0]
 80013ba:	6063      	str	r3, [r4, #4]
 80013bc:	6004      	str	r4, [r0, #0]
 80013be:	e7ed      	b.n	800139c <_free_r+0x24>
 80013c0:	4613      	mov	r3, r2
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	b10a      	cbz	r2, 80013ca <_free_r+0x52>
 80013c6:	42a2      	cmp	r2, r4
 80013c8:	d9fa      	bls.n	80013c0 <_free_r+0x48>
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	1858      	adds	r0, r3, r1
 80013ce:	42a0      	cmp	r0, r4
 80013d0:	d10b      	bne.n	80013ea <_free_r+0x72>
 80013d2:	6820      	ldr	r0, [r4, #0]
 80013d4:	4401      	add	r1, r0
 80013d6:	1858      	adds	r0, r3, r1
 80013d8:	4282      	cmp	r2, r0
 80013da:	6019      	str	r1, [r3, #0]
 80013dc:	d1de      	bne.n	800139c <_free_r+0x24>
 80013de:	6810      	ldr	r0, [r2, #0]
 80013e0:	6852      	ldr	r2, [r2, #4]
 80013e2:	4401      	add	r1, r0
 80013e4:	6019      	str	r1, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	e7d8      	b.n	800139c <_free_r+0x24>
 80013ea:	d902      	bls.n	80013f2 <_free_r+0x7a>
 80013ec:	230c      	movs	r3, #12
 80013ee:	602b      	str	r3, [r5, #0]
 80013f0:	e7d4      	b.n	800139c <_free_r+0x24>
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	1821      	adds	r1, r4, r0
 80013f6:	428a      	cmp	r2, r1
 80013f8:	bf01      	itttt	eq
 80013fa:	6811      	ldreq	r1, [r2, #0]
 80013fc:	6852      	ldreq	r2, [r2, #4]
 80013fe:	1809      	addeq	r1, r1, r0
 8001400:	6021      	streq	r1, [r4, #0]
 8001402:	6062      	str	r2, [r4, #4]
 8001404:	605c      	str	r4, [r3, #4]
 8001406:	e7c9      	b.n	800139c <_free_r+0x24>
 8001408:	bd38      	pop	{r3, r4, r5, pc}
 800140a:	bf00      	nop
 800140c:	2000008c 	.word	0x2000008c

08001410 <_malloc_r>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	1ccd      	adds	r5, r1, #3
 8001414:	f025 0503 	bic.w	r5, r5, #3
 8001418:	3508      	adds	r5, #8
 800141a:	2d0c      	cmp	r5, #12
 800141c:	bf38      	it	cc
 800141e:	250c      	movcc	r5, #12
 8001420:	2d00      	cmp	r5, #0
 8001422:	4606      	mov	r6, r0
 8001424:	db01      	blt.n	800142a <_malloc_r+0x1a>
 8001426:	42a9      	cmp	r1, r5
 8001428:	d903      	bls.n	8001432 <_malloc_r+0x22>
 800142a:	230c      	movs	r3, #12
 800142c:	6033      	str	r3, [r6, #0]
 800142e:	2000      	movs	r0, #0
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	f000 fbc5 	bl	8001bc0 <__malloc_lock>
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <_malloc_r+0xac>)
 8001438:	6814      	ldr	r4, [r2, #0]
 800143a:	4621      	mov	r1, r4
 800143c:	b991      	cbnz	r1, 8001464 <_malloc_r+0x54>
 800143e:	4c20      	ldr	r4, [pc, #128]	; (80014c0 <_malloc_r+0xb0>)
 8001440:	6823      	ldr	r3, [r4, #0]
 8001442:	b91b      	cbnz	r3, 800144c <_malloc_r+0x3c>
 8001444:	4630      	mov	r0, r6
 8001446:	f000 fb03 	bl	8001a50 <_sbrk_r>
 800144a:	6020      	str	r0, [r4, #0]
 800144c:	4629      	mov	r1, r5
 800144e:	4630      	mov	r0, r6
 8001450:	f000 fafe 	bl	8001a50 <_sbrk_r>
 8001454:	1c43      	adds	r3, r0, #1
 8001456:	d124      	bne.n	80014a2 <_malloc_r+0x92>
 8001458:	230c      	movs	r3, #12
 800145a:	4630      	mov	r0, r6
 800145c:	6033      	str	r3, [r6, #0]
 800145e:	f000 fbb0 	bl	8001bc2 <__malloc_unlock>
 8001462:	e7e4      	b.n	800142e <_malloc_r+0x1e>
 8001464:	680b      	ldr	r3, [r1, #0]
 8001466:	1b5b      	subs	r3, r3, r5
 8001468:	d418      	bmi.n	800149c <_malloc_r+0x8c>
 800146a:	2b0b      	cmp	r3, #11
 800146c:	d90f      	bls.n	800148e <_malloc_r+0x7e>
 800146e:	600b      	str	r3, [r1, #0]
 8001470:	18cc      	adds	r4, r1, r3
 8001472:	50cd      	str	r5, [r1, r3]
 8001474:	4630      	mov	r0, r6
 8001476:	f000 fba4 	bl	8001bc2 <__malloc_unlock>
 800147a:	f104 000b 	add.w	r0, r4, #11
 800147e:	1d23      	adds	r3, r4, #4
 8001480:	f020 0007 	bic.w	r0, r0, #7
 8001484:	1ac3      	subs	r3, r0, r3
 8001486:	d0d3      	beq.n	8001430 <_malloc_r+0x20>
 8001488:	425a      	negs	r2, r3
 800148a:	50e2      	str	r2, [r4, r3]
 800148c:	e7d0      	b.n	8001430 <_malloc_r+0x20>
 800148e:	684b      	ldr	r3, [r1, #4]
 8001490:	428c      	cmp	r4, r1
 8001492:	bf16      	itet	ne
 8001494:	6063      	strne	r3, [r4, #4]
 8001496:	6013      	streq	r3, [r2, #0]
 8001498:	460c      	movne	r4, r1
 800149a:	e7eb      	b.n	8001474 <_malloc_r+0x64>
 800149c:	460c      	mov	r4, r1
 800149e:	6849      	ldr	r1, [r1, #4]
 80014a0:	e7cc      	b.n	800143c <_malloc_r+0x2c>
 80014a2:	1cc4      	adds	r4, r0, #3
 80014a4:	f024 0403 	bic.w	r4, r4, #3
 80014a8:	42a0      	cmp	r0, r4
 80014aa:	d005      	beq.n	80014b8 <_malloc_r+0xa8>
 80014ac:	1a21      	subs	r1, r4, r0
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 face 	bl	8001a50 <_sbrk_r>
 80014b4:	3001      	adds	r0, #1
 80014b6:	d0cf      	beq.n	8001458 <_malloc_r+0x48>
 80014b8:	6025      	str	r5, [r4, #0]
 80014ba:	e7db      	b.n	8001474 <_malloc_r+0x64>
 80014bc:	2000008c 	.word	0x2000008c
 80014c0:	20000090 	.word	0x20000090

080014c4 <__sfputc_r>:
 80014c4:	6893      	ldr	r3, [r2, #8]
 80014c6:	b410      	push	{r4}
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	6093      	str	r3, [r2, #8]
 80014ce:	da07      	bge.n	80014e0 <__sfputc_r+0x1c>
 80014d0:	6994      	ldr	r4, [r2, #24]
 80014d2:	42a3      	cmp	r3, r4
 80014d4:	db01      	blt.n	80014da <__sfputc_r+0x16>
 80014d6:	290a      	cmp	r1, #10
 80014d8:	d102      	bne.n	80014e0 <__sfputc_r+0x1c>
 80014da:	bc10      	pop	{r4}
 80014dc:	f7ff bcae 	b.w	8000e3c <__swbuf_r>
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	1c58      	adds	r0, r3, #1
 80014e4:	6010      	str	r0, [r2, #0]
 80014e6:	7019      	strb	r1, [r3, #0]
 80014e8:	4608      	mov	r0, r1
 80014ea:	bc10      	pop	{r4}
 80014ec:	4770      	bx	lr

080014ee <__sfputs_r>:
 80014ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f0:	4606      	mov	r6, r0
 80014f2:	460f      	mov	r7, r1
 80014f4:	4614      	mov	r4, r2
 80014f6:	18d5      	adds	r5, r2, r3
 80014f8:	42ac      	cmp	r4, r5
 80014fa:	d101      	bne.n	8001500 <__sfputs_r+0x12>
 80014fc:	2000      	movs	r0, #0
 80014fe:	e007      	b.n	8001510 <__sfputs_r+0x22>
 8001500:	463a      	mov	r2, r7
 8001502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001506:	4630      	mov	r0, r6
 8001508:	f7ff ffdc 	bl	80014c4 <__sfputc_r>
 800150c:	1c43      	adds	r3, r0, #1
 800150e:	d1f3      	bne.n	80014f8 <__sfputs_r+0xa>
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001514 <_vfiprintf_r>:
 8001514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001518:	460c      	mov	r4, r1
 800151a:	b09d      	sub	sp, #116	; 0x74
 800151c:	4617      	mov	r7, r2
 800151e:	461d      	mov	r5, r3
 8001520:	4606      	mov	r6, r0
 8001522:	b118      	cbz	r0, 800152c <_vfiprintf_r+0x18>
 8001524:	6983      	ldr	r3, [r0, #24]
 8001526:	b90b      	cbnz	r3, 800152c <_vfiprintf_r+0x18>
 8001528:	f7ff fe38 	bl	800119c <__sinit>
 800152c:	4b7c      	ldr	r3, [pc, #496]	; (8001720 <_vfiprintf_r+0x20c>)
 800152e:	429c      	cmp	r4, r3
 8001530:	d158      	bne.n	80015e4 <_vfiprintf_r+0xd0>
 8001532:	6874      	ldr	r4, [r6, #4]
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	0718      	lsls	r0, r3, #28
 8001538:	d55e      	bpl.n	80015f8 <_vfiprintf_r+0xe4>
 800153a:	6923      	ldr	r3, [r4, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d05b      	beq.n	80015f8 <_vfiprintf_r+0xe4>
 8001540:	2300      	movs	r3, #0
 8001542:	9309      	str	r3, [sp, #36]	; 0x24
 8001544:	2320      	movs	r3, #32
 8001546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800154a:	2330      	movs	r3, #48	; 0x30
 800154c:	f04f 0b01 	mov.w	fp, #1
 8001550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001554:	9503      	str	r5, [sp, #12]
 8001556:	46b8      	mov	r8, r7
 8001558:	4645      	mov	r5, r8
 800155a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800155e:	b10b      	cbz	r3, 8001564 <_vfiprintf_r+0x50>
 8001560:	2b25      	cmp	r3, #37	; 0x25
 8001562:	d154      	bne.n	800160e <_vfiprintf_r+0xfa>
 8001564:	ebb8 0a07 	subs.w	sl, r8, r7
 8001568:	d00b      	beq.n	8001582 <_vfiprintf_r+0x6e>
 800156a:	4653      	mov	r3, sl
 800156c:	463a      	mov	r2, r7
 800156e:	4621      	mov	r1, r4
 8001570:	4630      	mov	r0, r6
 8001572:	f7ff ffbc 	bl	80014ee <__sfputs_r>
 8001576:	3001      	adds	r0, #1
 8001578:	f000 80c2 	beq.w	8001700 <_vfiprintf_r+0x1ec>
 800157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800157e:	4453      	add	r3, sl
 8001580:	9309      	str	r3, [sp, #36]	; 0x24
 8001582:	f898 3000 	ldrb.w	r3, [r8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80ba 	beq.w	8001700 <_vfiprintf_r+0x1ec>
 800158c:	2300      	movs	r3, #0
 800158e:	f04f 32ff 	mov.w	r2, #4294967295
 8001592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001596:	9304      	str	r3, [sp, #16]
 8001598:	9307      	str	r3, [sp, #28]
 800159a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800159e:	931a      	str	r3, [sp, #104]	; 0x68
 80015a0:	46a8      	mov	r8, r5
 80015a2:	2205      	movs	r2, #5
 80015a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80015a8:	485e      	ldr	r0, [pc, #376]	; (8001724 <_vfiprintf_r+0x210>)
 80015aa:	f000 fafb 	bl	8001ba4 <memchr>
 80015ae:	9b04      	ldr	r3, [sp, #16]
 80015b0:	bb78      	cbnz	r0, 8001612 <_vfiprintf_r+0xfe>
 80015b2:	06d9      	lsls	r1, r3, #27
 80015b4:	bf44      	itt	mi
 80015b6:	2220      	movmi	r2, #32
 80015b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80015bc:	071a      	lsls	r2, r3, #28
 80015be:	bf44      	itt	mi
 80015c0:	222b      	movmi	r2, #43	; 0x2b
 80015c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80015c6:	782a      	ldrb	r2, [r5, #0]
 80015c8:	2a2a      	cmp	r2, #42	; 0x2a
 80015ca:	d02a      	beq.n	8001622 <_vfiprintf_r+0x10e>
 80015cc:	46a8      	mov	r8, r5
 80015ce:	2000      	movs	r0, #0
 80015d0:	250a      	movs	r5, #10
 80015d2:	9a07      	ldr	r2, [sp, #28]
 80015d4:	4641      	mov	r1, r8
 80015d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015da:	3b30      	subs	r3, #48	; 0x30
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d969      	bls.n	80016b4 <_vfiprintf_r+0x1a0>
 80015e0:	b360      	cbz	r0, 800163c <_vfiprintf_r+0x128>
 80015e2:	e024      	b.n	800162e <_vfiprintf_r+0x11a>
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <_vfiprintf_r+0x214>)
 80015e6:	429c      	cmp	r4, r3
 80015e8:	d101      	bne.n	80015ee <_vfiprintf_r+0xda>
 80015ea:	68b4      	ldr	r4, [r6, #8]
 80015ec:	e7a2      	b.n	8001534 <_vfiprintf_r+0x20>
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <_vfiprintf_r+0x218>)
 80015f0:	429c      	cmp	r4, r3
 80015f2:	bf08      	it	eq
 80015f4:	68f4      	ldreq	r4, [r6, #12]
 80015f6:	e79d      	b.n	8001534 <_vfiprintf_r+0x20>
 80015f8:	4621      	mov	r1, r4
 80015fa:	4630      	mov	r0, r6
 80015fc:	f7ff fc70 	bl	8000ee0 <__swsetup_r>
 8001600:	2800      	cmp	r0, #0
 8001602:	d09d      	beq.n	8001540 <_vfiprintf_r+0x2c>
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	b01d      	add	sp, #116	; 0x74
 800160a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800160e:	46a8      	mov	r8, r5
 8001610:	e7a2      	b.n	8001558 <_vfiprintf_r+0x44>
 8001612:	4a44      	ldr	r2, [pc, #272]	; (8001724 <_vfiprintf_r+0x210>)
 8001614:	4645      	mov	r5, r8
 8001616:	1a80      	subs	r0, r0, r2
 8001618:	fa0b f000 	lsl.w	r0, fp, r0
 800161c:	4318      	orrs	r0, r3
 800161e:	9004      	str	r0, [sp, #16]
 8001620:	e7be      	b.n	80015a0 <_vfiprintf_r+0x8c>
 8001622:	9a03      	ldr	r2, [sp, #12]
 8001624:	1d11      	adds	r1, r2, #4
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	9103      	str	r1, [sp, #12]
 800162a:	2a00      	cmp	r2, #0
 800162c:	db01      	blt.n	8001632 <_vfiprintf_r+0x11e>
 800162e:	9207      	str	r2, [sp, #28]
 8001630:	e004      	b.n	800163c <_vfiprintf_r+0x128>
 8001632:	4252      	negs	r2, r2
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	9207      	str	r2, [sp, #28]
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	f898 3000 	ldrb.w	r3, [r8]
 8001640:	2b2e      	cmp	r3, #46	; 0x2e
 8001642:	d10e      	bne.n	8001662 <_vfiprintf_r+0x14e>
 8001644:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001648:	2b2a      	cmp	r3, #42	; 0x2a
 800164a:	d138      	bne.n	80016be <_vfiprintf_r+0x1aa>
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	f108 0802 	add.w	r8, r8, #2
 8001652:	1d1a      	adds	r2, r3, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	9203      	str	r2, [sp, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	bfb8      	it	lt
 800165c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001660:	9305      	str	r3, [sp, #20]
 8001662:	4d33      	ldr	r5, [pc, #204]	; (8001730 <_vfiprintf_r+0x21c>)
 8001664:	2203      	movs	r2, #3
 8001666:	f898 1000 	ldrb.w	r1, [r8]
 800166a:	4628      	mov	r0, r5
 800166c:	f000 fa9a 	bl	8001ba4 <memchr>
 8001670:	b140      	cbz	r0, 8001684 <_vfiprintf_r+0x170>
 8001672:	2340      	movs	r3, #64	; 0x40
 8001674:	1b40      	subs	r0, r0, r5
 8001676:	fa03 f000 	lsl.w	r0, r3, r0
 800167a:	9b04      	ldr	r3, [sp, #16]
 800167c:	f108 0801 	add.w	r8, r8, #1
 8001680:	4303      	orrs	r3, r0
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	f898 1000 	ldrb.w	r1, [r8]
 8001688:	2206      	movs	r2, #6
 800168a:	482a      	ldr	r0, [pc, #168]	; (8001734 <_vfiprintf_r+0x220>)
 800168c:	f108 0701 	add.w	r7, r8, #1
 8001690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001694:	f000 fa86 	bl	8001ba4 <memchr>
 8001698:	2800      	cmp	r0, #0
 800169a:	d037      	beq.n	800170c <_vfiprintf_r+0x1f8>
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <_vfiprintf_r+0x224>)
 800169e:	bb1b      	cbnz	r3, 80016e8 <_vfiprintf_r+0x1d4>
 80016a0:	9b03      	ldr	r3, [sp, #12]
 80016a2:	3307      	adds	r3, #7
 80016a4:	f023 0307 	bic.w	r3, r3, #7
 80016a8:	3308      	adds	r3, #8
 80016aa:	9303      	str	r3, [sp, #12]
 80016ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ae:	444b      	add	r3, r9
 80016b0:	9309      	str	r3, [sp, #36]	; 0x24
 80016b2:	e750      	b.n	8001556 <_vfiprintf_r+0x42>
 80016b4:	fb05 3202 	mla	r2, r5, r2, r3
 80016b8:	2001      	movs	r0, #1
 80016ba:	4688      	mov	r8, r1
 80016bc:	e78a      	b.n	80015d4 <_vfiprintf_r+0xc0>
 80016be:	2300      	movs	r3, #0
 80016c0:	250a      	movs	r5, #10
 80016c2:	4619      	mov	r1, r3
 80016c4:	f108 0801 	add.w	r8, r8, #1
 80016c8:	9305      	str	r3, [sp, #20]
 80016ca:	4640      	mov	r0, r8
 80016cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016d0:	3a30      	subs	r2, #48	; 0x30
 80016d2:	2a09      	cmp	r2, #9
 80016d4:	d903      	bls.n	80016de <_vfiprintf_r+0x1ca>
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0c3      	beq.n	8001662 <_vfiprintf_r+0x14e>
 80016da:	9105      	str	r1, [sp, #20]
 80016dc:	e7c1      	b.n	8001662 <_vfiprintf_r+0x14e>
 80016de:	fb05 2101 	mla	r1, r5, r1, r2
 80016e2:	2301      	movs	r3, #1
 80016e4:	4680      	mov	r8, r0
 80016e6:	e7f0      	b.n	80016ca <_vfiprintf_r+0x1b6>
 80016e8:	ab03      	add	r3, sp, #12
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4622      	mov	r2, r4
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <_vfiprintf_r+0x228>)
 80016f0:	a904      	add	r1, sp, #16
 80016f2:	4630      	mov	r0, r6
 80016f4:	f3af 8000 	nop.w
 80016f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80016fc:	4681      	mov	r9, r0
 80016fe:	d1d5      	bne.n	80016ac <_vfiprintf_r+0x198>
 8001700:	89a3      	ldrh	r3, [r4, #12]
 8001702:	065b      	lsls	r3, r3, #25
 8001704:	f53f af7e 	bmi.w	8001604 <_vfiprintf_r+0xf0>
 8001708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800170a:	e77d      	b.n	8001608 <_vfiprintf_r+0xf4>
 800170c:	ab03      	add	r3, sp, #12
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4622      	mov	r2, r4
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <_vfiprintf_r+0x228>)
 8001714:	a904      	add	r1, sp, #16
 8001716:	4630      	mov	r0, r6
 8001718:	f000 f888 	bl	800182c <_printf_i>
 800171c:	e7ec      	b.n	80016f8 <_vfiprintf_r+0x1e4>
 800171e:	bf00      	nop
 8001720:	0800226c 	.word	0x0800226c
 8001724:	080022ac 	.word	0x080022ac
 8001728:	0800228c 	.word	0x0800228c
 800172c:	0800224c 	.word	0x0800224c
 8001730:	080022b2 	.word	0x080022b2
 8001734:	080022b6 	.word	0x080022b6
 8001738:	00000000 	.word	0x00000000
 800173c:	080014ef 	.word	0x080014ef

08001740 <_printf_common>:
 8001740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001744:	4691      	mov	r9, r2
 8001746:	461f      	mov	r7, r3
 8001748:	688a      	ldr	r2, [r1, #8]
 800174a:	690b      	ldr	r3, [r1, #16]
 800174c:	4606      	mov	r6, r0
 800174e:	4293      	cmp	r3, r2
 8001750:	bfb8      	it	lt
 8001752:	4613      	movlt	r3, r2
 8001754:	f8c9 3000 	str.w	r3, [r9]
 8001758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800175c:	460c      	mov	r4, r1
 800175e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001762:	b112      	cbz	r2, 800176a <_printf_common+0x2a>
 8001764:	3301      	adds	r3, #1
 8001766:	f8c9 3000 	str.w	r3, [r9]
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	0699      	lsls	r1, r3, #26
 800176e:	bf42      	ittt	mi
 8001770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001774:	3302      	addmi	r3, #2
 8001776:	f8c9 3000 	strmi.w	r3, [r9]
 800177a:	6825      	ldr	r5, [r4, #0]
 800177c:	f015 0506 	ands.w	r5, r5, #6
 8001780:	d107      	bne.n	8001792 <_printf_common+0x52>
 8001782:	f104 0a19 	add.w	sl, r4, #25
 8001786:	68e3      	ldr	r3, [r4, #12]
 8001788:	f8d9 2000 	ldr.w	r2, [r9]
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	42ab      	cmp	r3, r5
 8001790:	dc29      	bgt.n	80017e6 <_printf_common+0xa6>
 8001792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	3300      	adds	r3, #0
 800179a:	bf18      	it	ne
 800179c:	2301      	movne	r3, #1
 800179e:	0692      	lsls	r2, r2, #26
 80017a0:	d42e      	bmi.n	8001800 <_printf_common+0xc0>
 80017a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017a6:	4639      	mov	r1, r7
 80017a8:	4630      	mov	r0, r6
 80017aa:	47c0      	blx	r8
 80017ac:	3001      	adds	r0, #1
 80017ae:	d021      	beq.n	80017f4 <_printf_common+0xb4>
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	68e5      	ldr	r5, [r4, #12]
 80017b4:	f003 0306 	and.w	r3, r3, #6
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	bf18      	it	ne
 80017bc:	2500      	movne	r5, #0
 80017be:	f8d9 2000 	ldr.w	r2, [r9]
 80017c2:	f04f 0900 	mov.w	r9, #0
 80017c6:	bf08      	it	eq
 80017c8:	1aad      	subeq	r5, r5, r2
 80017ca:	68a3      	ldr	r3, [r4, #8]
 80017cc:	6922      	ldr	r2, [r4, #16]
 80017ce:	bf08      	it	eq
 80017d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bfc4      	itt	gt
 80017d8:	1a9b      	subgt	r3, r3, r2
 80017da:	18ed      	addgt	r5, r5, r3
 80017dc:	341a      	adds	r4, #26
 80017de:	454d      	cmp	r5, r9
 80017e0:	d11a      	bne.n	8001818 <_printf_common+0xd8>
 80017e2:	2000      	movs	r0, #0
 80017e4:	e008      	b.n	80017f8 <_printf_common+0xb8>
 80017e6:	2301      	movs	r3, #1
 80017e8:	4652      	mov	r2, sl
 80017ea:	4639      	mov	r1, r7
 80017ec:	4630      	mov	r0, r6
 80017ee:	47c0      	blx	r8
 80017f0:	3001      	adds	r0, #1
 80017f2:	d103      	bne.n	80017fc <_printf_common+0xbc>
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017fc:	3501      	adds	r5, #1
 80017fe:	e7c2      	b.n	8001786 <_printf_common+0x46>
 8001800:	2030      	movs	r0, #48	; 0x30
 8001802:	18e1      	adds	r1, r4, r3
 8001804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800180e:	4422      	add	r2, r4
 8001810:	3302      	adds	r3, #2
 8001812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001816:	e7c4      	b.n	80017a2 <_printf_common+0x62>
 8001818:	2301      	movs	r3, #1
 800181a:	4622      	mov	r2, r4
 800181c:	4639      	mov	r1, r7
 800181e:	4630      	mov	r0, r6
 8001820:	47c0      	blx	r8
 8001822:	3001      	adds	r0, #1
 8001824:	d0e6      	beq.n	80017f4 <_printf_common+0xb4>
 8001826:	f109 0901 	add.w	r9, r9, #1
 800182a:	e7d8      	b.n	80017de <_printf_common+0x9e>

0800182c <_printf_i>:
 800182c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001834:	460c      	mov	r4, r1
 8001836:	7e09      	ldrb	r1, [r1, #24]
 8001838:	b085      	sub	sp, #20
 800183a:	296e      	cmp	r1, #110	; 0x6e
 800183c:	4617      	mov	r7, r2
 800183e:	4606      	mov	r6, r0
 8001840:	4698      	mov	r8, r3
 8001842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001844:	f000 80b3 	beq.w	80019ae <_printf_i+0x182>
 8001848:	d822      	bhi.n	8001890 <_printf_i+0x64>
 800184a:	2963      	cmp	r1, #99	; 0x63
 800184c:	d036      	beq.n	80018bc <_printf_i+0x90>
 800184e:	d80a      	bhi.n	8001866 <_printf_i+0x3a>
 8001850:	2900      	cmp	r1, #0
 8001852:	f000 80b9 	beq.w	80019c8 <_printf_i+0x19c>
 8001856:	2958      	cmp	r1, #88	; 0x58
 8001858:	f000 8083 	beq.w	8001962 <_printf_i+0x136>
 800185c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001864:	e032      	b.n	80018cc <_printf_i+0xa0>
 8001866:	2964      	cmp	r1, #100	; 0x64
 8001868:	d001      	beq.n	800186e <_printf_i+0x42>
 800186a:	2969      	cmp	r1, #105	; 0x69
 800186c:	d1f6      	bne.n	800185c <_printf_i+0x30>
 800186e:	6820      	ldr	r0, [r4, #0]
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	0605      	lsls	r5, r0, #24
 8001874:	f103 0104 	add.w	r1, r3, #4
 8001878:	d52a      	bpl.n	80018d0 <_printf_i+0xa4>
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6011      	str	r1, [r2, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da03      	bge.n	800188a <_printf_i+0x5e>
 8001882:	222d      	movs	r2, #45	; 0x2d
 8001884:	425b      	negs	r3, r3
 8001886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800188a:	486f      	ldr	r0, [pc, #444]	; (8001a48 <_printf_i+0x21c>)
 800188c:	220a      	movs	r2, #10
 800188e:	e039      	b.n	8001904 <_printf_i+0xd8>
 8001890:	2973      	cmp	r1, #115	; 0x73
 8001892:	f000 809d 	beq.w	80019d0 <_printf_i+0x1a4>
 8001896:	d808      	bhi.n	80018aa <_printf_i+0x7e>
 8001898:	296f      	cmp	r1, #111	; 0x6f
 800189a:	d020      	beq.n	80018de <_printf_i+0xb2>
 800189c:	2970      	cmp	r1, #112	; 0x70
 800189e:	d1dd      	bne.n	800185c <_printf_i+0x30>
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	e003      	b.n	80018b2 <_printf_i+0x86>
 80018aa:	2975      	cmp	r1, #117	; 0x75
 80018ac:	d017      	beq.n	80018de <_printf_i+0xb2>
 80018ae:	2978      	cmp	r1, #120	; 0x78
 80018b0:	d1d4      	bne.n	800185c <_printf_i+0x30>
 80018b2:	2378      	movs	r3, #120	; 0x78
 80018b4:	4865      	ldr	r0, [pc, #404]	; (8001a4c <_printf_i+0x220>)
 80018b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80018ba:	e055      	b.n	8001968 <_printf_i+0x13c>
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018c2:	1d19      	adds	r1, r3, #4
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6011      	str	r1, [r2, #0]
 80018c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018cc:	2301      	movs	r3, #1
 80018ce:	e08c      	b.n	80019ea <_printf_i+0x1be>
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018d6:	6011      	str	r1, [r2, #0]
 80018d8:	bf18      	it	ne
 80018da:	b21b      	sxthne	r3, r3
 80018dc:	e7cf      	b.n	800187e <_printf_i+0x52>
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	6825      	ldr	r5, [r4, #0]
 80018e2:	1d18      	adds	r0, r3, #4
 80018e4:	6010      	str	r0, [r2, #0]
 80018e6:	0628      	lsls	r0, r5, #24
 80018e8:	d501      	bpl.n	80018ee <_printf_i+0xc2>
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e002      	b.n	80018f4 <_printf_i+0xc8>
 80018ee:	0668      	lsls	r0, r5, #25
 80018f0:	d5fb      	bpl.n	80018ea <_printf_i+0xbe>
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	296f      	cmp	r1, #111	; 0x6f
 80018f6:	bf14      	ite	ne
 80018f8:	220a      	movne	r2, #10
 80018fa:	2208      	moveq	r2, #8
 80018fc:	4852      	ldr	r0, [pc, #328]	; (8001a48 <_printf_i+0x21c>)
 80018fe:	2100      	movs	r1, #0
 8001900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001904:	6865      	ldr	r5, [r4, #4]
 8001906:	2d00      	cmp	r5, #0
 8001908:	60a5      	str	r5, [r4, #8]
 800190a:	f2c0 8095 	blt.w	8001a38 <_printf_i+0x20c>
 800190e:	6821      	ldr	r1, [r4, #0]
 8001910:	f021 0104 	bic.w	r1, r1, #4
 8001914:	6021      	str	r1, [r4, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d13d      	bne.n	8001996 <_printf_i+0x16a>
 800191a:	2d00      	cmp	r5, #0
 800191c:	f040 808e 	bne.w	8001a3c <_printf_i+0x210>
 8001920:	4665      	mov	r5, ip
 8001922:	2a08      	cmp	r2, #8
 8001924:	d10b      	bne.n	800193e <_printf_i+0x112>
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	07db      	lsls	r3, r3, #31
 800192a:	d508      	bpl.n	800193e <_printf_i+0x112>
 800192c:	6923      	ldr	r3, [r4, #16]
 800192e:	6862      	ldr	r2, [r4, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	bfde      	ittt	le
 8001934:	2330      	movle	r3, #48	; 0x30
 8001936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800193a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800193e:	ebac 0305 	sub.w	r3, ip, r5
 8001942:	6123      	str	r3, [r4, #16]
 8001944:	f8cd 8000 	str.w	r8, [sp]
 8001948:	463b      	mov	r3, r7
 800194a:	aa03      	add	r2, sp, #12
 800194c:	4621      	mov	r1, r4
 800194e:	4630      	mov	r0, r6
 8001950:	f7ff fef6 	bl	8001740 <_printf_common>
 8001954:	3001      	adds	r0, #1
 8001956:	d14d      	bne.n	80019f4 <_printf_i+0x1c8>
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	b005      	add	sp, #20
 800195e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001962:	4839      	ldr	r0, [pc, #228]	; (8001a48 <_printf_i+0x21c>)
 8001964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	6821      	ldr	r1, [r4, #0]
 800196c:	1d1d      	adds	r5, r3, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6015      	str	r5, [r2, #0]
 8001972:	060a      	lsls	r2, r1, #24
 8001974:	d50b      	bpl.n	800198e <_printf_i+0x162>
 8001976:	07ca      	lsls	r2, r1, #31
 8001978:	bf44      	itt	mi
 800197a:	f041 0120 	orrmi.w	r1, r1, #32
 800197e:	6021      	strmi	r1, [r4, #0]
 8001980:	b91b      	cbnz	r3, 800198a <_printf_i+0x15e>
 8001982:	6822      	ldr	r2, [r4, #0]
 8001984:	f022 0220 	bic.w	r2, r2, #32
 8001988:	6022      	str	r2, [r4, #0]
 800198a:	2210      	movs	r2, #16
 800198c:	e7b7      	b.n	80018fe <_printf_i+0xd2>
 800198e:	064d      	lsls	r5, r1, #25
 8001990:	bf48      	it	mi
 8001992:	b29b      	uxthmi	r3, r3
 8001994:	e7ef      	b.n	8001976 <_printf_i+0x14a>
 8001996:	4665      	mov	r5, ip
 8001998:	fbb3 f1f2 	udiv	r1, r3, r2
 800199c:	fb02 3311 	mls	r3, r2, r1, r3
 80019a0:	5cc3      	ldrb	r3, [r0, r3]
 80019a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80019a6:	460b      	mov	r3, r1
 80019a8:	2900      	cmp	r1, #0
 80019aa:	d1f5      	bne.n	8001998 <_printf_i+0x16c>
 80019ac:	e7b9      	b.n	8001922 <_printf_i+0xf6>
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	6825      	ldr	r5, [r4, #0]
 80019b2:	1d18      	adds	r0, r3, #4
 80019b4:	6961      	ldr	r1, [r4, #20]
 80019b6:	6010      	str	r0, [r2, #0]
 80019b8:	0628      	lsls	r0, r5, #24
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	d501      	bpl.n	80019c2 <_printf_i+0x196>
 80019be:	6019      	str	r1, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <_printf_i+0x19c>
 80019c2:	066a      	lsls	r2, r5, #25
 80019c4:	d5fb      	bpl.n	80019be <_printf_i+0x192>
 80019c6:	8019      	strh	r1, [r3, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	4665      	mov	r5, ip
 80019cc:	6123      	str	r3, [r4, #16]
 80019ce:	e7b9      	b.n	8001944 <_printf_i+0x118>
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	1d19      	adds	r1, r3, #4
 80019d4:	6011      	str	r1, [r2, #0]
 80019d6:	681d      	ldr	r5, [r3, #0]
 80019d8:	6862      	ldr	r2, [r4, #4]
 80019da:	2100      	movs	r1, #0
 80019dc:	4628      	mov	r0, r5
 80019de:	f000 f8e1 	bl	8001ba4 <memchr>
 80019e2:	b108      	cbz	r0, 80019e8 <_printf_i+0x1bc>
 80019e4:	1b40      	subs	r0, r0, r5
 80019e6:	6060      	str	r0, [r4, #4]
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	6123      	str	r3, [r4, #16]
 80019ec:	2300      	movs	r3, #0
 80019ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019f2:	e7a7      	b.n	8001944 <_printf_i+0x118>
 80019f4:	6923      	ldr	r3, [r4, #16]
 80019f6:	462a      	mov	r2, r5
 80019f8:	4639      	mov	r1, r7
 80019fa:	4630      	mov	r0, r6
 80019fc:	47c0      	blx	r8
 80019fe:	3001      	adds	r0, #1
 8001a00:	d0aa      	beq.n	8001958 <_printf_i+0x12c>
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	079b      	lsls	r3, r3, #30
 8001a06:	d413      	bmi.n	8001a30 <_printf_i+0x204>
 8001a08:	68e0      	ldr	r0, [r4, #12]
 8001a0a:	9b03      	ldr	r3, [sp, #12]
 8001a0c:	4298      	cmp	r0, r3
 8001a0e:	bfb8      	it	lt
 8001a10:	4618      	movlt	r0, r3
 8001a12:	e7a3      	b.n	800195c <_printf_i+0x130>
 8001a14:	2301      	movs	r3, #1
 8001a16:	464a      	mov	r2, r9
 8001a18:	4639      	mov	r1, r7
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	47c0      	blx	r8
 8001a1e:	3001      	adds	r0, #1
 8001a20:	d09a      	beq.n	8001958 <_printf_i+0x12c>
 8001a22:	3501      	adds	r5, #1
 8001a24:	68e3      	ldr	r3, [r4, #12]
 8001a26:	9a03      	ldr	r2, [sp, #12]
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	42ab      	cmp	r3, r5
 8001a2c:	dcf2      	bgt.n	8001a14 <_printf_i+0x1e8>
 8001a2e:	e7eb      	b.n	8001a08 <_printf_i+0x1dc>
 8001a30:	2500      	movs	r5, #0
 8001a32:	f104 0919 	add.w	r9, r4, #25
 8001a36:	e7f5      	b.n	8001a24 <_printf_i+0x1f8>
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ac      	bne.n	8001996 <_printf_i+0x16a>
 8001a3c:	7803      	ldrb	r3, [r0, #0]
 8001a3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a46:	e76c      	b.n	8001922 <_printf_i+0xf6>
 8001a48:	080022bd 	.word	0x080022bd
 8001a4c:	080022ce 	.word	0x080022ce

08001a50 <_sbrk_r>:
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	2300      	movs	r3, #0
 8001a54:	4c05      	ldr	r4, [pc, #20]	; (8001a6c <_sbrk_r+0x1c>)
 8001a56:	4605      	mov	r5, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	6023      	str	r3, [r4, #0]
 8001a5c:	f000 f9ca 	bl	8001df4 <_sbrk>
 8001a60:	1c43      	adds	r3, r0, #1
 8001a62:	d102      	bne.n	8001a6a <_sbrk_r+0x1a>
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	b103      	cbz	r3, 8001a6a <_sbrk_r+0x1a>
 8001a68:	602b      	str	r3, [r5, #0]
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000144 	.word	0x20000144

08001a70 <__sread>:
 8001a70:	b510      	push	{r4, lr}
 8001a72:	460c      	mov	r4, r1
 8001a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a78:	f000 f8a4 	bl	8001bc4 <_read_r>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	bfab      	itete	ge
 8001a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a82:	89a3      	ldrhlt	r3, [r4, #12]
 8001a84:	181b      	addge	r3, r3, r0
 8001a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a8a:	bfac      	ite	ge
 8001a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a8e:	81a3      	strhlt	r3, [r4, #12]
 8001a90:	bd10      	pop	{r4, pc}

08001a92 <__swrite>:
 8001a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a96:	461f      	mov	r7, r3
 8001a98:	898b      	ldrh	r3, [r1, #12]
 8001a9a:	4605      	mov	r5, r0
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4616      	mov	r6, r2
 8001aa2:	d505      	bpl.n	8001ab0 <__swrite+0x1e>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aac:	f000 f868 	bl	8001b80 <_lseek_r>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	4632      	mov	r2, r6
 8001ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ab8:	81a3      	strh	r3, [r4, #12]
 8001aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac6:	f000 b817 	b.w	8001af8 <_write_r>

08001aca <__sseek>:
 8001aca:	b510      	push	{r4, lr}
 8001acc:	460c      	mov	r4, r1
 8001ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad2:	f000 f855 	bl	8001b80 <_lseek_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	bf15      	itete	ne
 8001adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ae6:	81a3      	strheq	r3, [r4, #12]
 8001ae8:	bf18      	it	ne
 8001aea:	81a3      	strhne	r3, [r4, #12]
 8001aec:	bd10      	pop	{r4, pc}

08001aee <__sclose>:
 8001aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af2:	f000 b813 	b.w	8001b1c <_close_r>
	...

08001af8 <_write_r>:
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4605      	mov	r5, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	2200      	movs	r2, #0
 8001b02:	4c05      	ldr	r4, [pc, #20]	; (8001b18 <_write_r+0x20>)
 8001b04:	6022      	str	r2, [r4, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	f000 f91f 	bl	8001d4a <_write>
 8001b0c:	1c43      	adds	r3, r0, #1
 8001b0e:	d102      	bne.n	8001b16 <_write_r+0x1e>
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	b103      	cbz	r3, 8001b16 <_write_r+0x1e>
 8001b14:	602b      	str	r3, [r5, #0]
 8001b16:	bd38      	pop	{r3, r4, r5, pc}
 8001b18:	20000144 	.word	0x20000144

08001b1c <_close_r>:
 8001b1c:	b538      	push	{r3, r4, r5, lr}
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4c05      	ldr	r4, [pc, #20]	; (8001b38 <_close_r+0x1c>)
 8001b22:	4605      	mov	r5, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	6023      	str	r3, [r4, #0]
 8001b28:	f000 f93e 	bl	8001da8 <_close>
 8001b2c:	1c43      	adds	r3, r0, #1
 8001b2e:	d102      	bne.n	8001b36 <_close_r+0x1a>
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	b103      	cbz	r3, 8001b36 <_close_r+0x1a>
 8001b34:	602b      	str	r3, [r5, #0]
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	20000144 	.word	0x20000144

08001b3c <_fstat_r>:
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	2300      	movs	r3, #0
 8001b40:	4c06      	ldr	r4, [pc, #24]	; (8001b5c <_fstat_r+0x20>)
 8001b42:	4605      	mov	r5, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	f000 f998 	bl	8001e7e <_fstat>
 8001b4e:	1c43      	adds	r3, r0, #1
 8001b50:	d102      	bne.n	8001b58 <_fstat_r+0x1c>
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	b103      	cbz	r3, 8001b58 <_fstat_r+0x1c>
 8001b56:	602b      	str	r3, [r5, #0]
 8001b58:	bd38      	pop	{r3, r4, r5, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000144 	.word	0x20000144

08001b60 <_isatty_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	2300      	movs	r3, #0
 8001b64:	4c05      	ldr	r4, [pc, #20]	; (8001b7c <_isatty_r+0x1c>)
 8001b66:	4605      	mov	r5, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	6023      	str	r3, [r4, #0]
 8001b6c:	f000 faea 	bl	8002144 <_isatty>
 8001b70:	1c43      	adds	r3, r0, #1
 8001b72:	d102      	bne.n	8001b7a <_isatty_r+0x1a>
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	b103      	cbz	r3, 8001b7a <_isatty_r+0x1a>
 8001b78:	602b      	str	r3, [r5, #0]
 8001b7a:	bd38      	pop	{r3, r4, r5, pc}
 8001b7c:	20000144 	.word	0x20000144

08001b80 <_lseek_r>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4605      	mov	r5, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4c05      	ldr	r4, [pc, #20]	; (8001ba0 <_lseek_r+0x20>)
 8001b8c:	6022      	str	r2, [r4, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f000 f8c9 	bl	8001d26 <_lseek>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d102      	bne.n	8001b9e <_lseek_r+0x1e>
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	b103      	cbz	r3, 8001b9e <_lseek_r+0x1e>
 8001b9c:	602b      	str	r3, [r5, #0]
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	20000144 	.word	0x20000144

08001ba4 <memchr>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	4402      	add	r2, r0
 8001baa:	4290      	cmp	r0, r2
 8001bac:	4603      	mov	r3, r0
 8001bae:	d101      	bne.n	8001bb4 <memchr+0x10>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e003      	b.n	8001bbc <memchr+0x18>
 8001bb4:	781c      	ldrb	r4, [r3, #0]
 8001bb6:	3001      	adds	r0, #1
 8001bb8:	428c      	cmp	r4, r1
 8001bba:	d1f6      	bne.n	8001baa <memchr+0x6>
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd10      	pop	{r4, pc}

08001bc0 <__malloc_lock>:
 8001bc0:	4770      	bx	lr

08001bc2 <__malloc_unlock>:
 8001bc2:	4770      	bx	lr

08001bc4 <_read_r>:
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4c05      	ldr	r4, [pc, #20]	; (8001be4 <_read_r+0x20>)
 8001bd0:	6022      	str	r2, [r4, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f000 f850 	bl	8001c78 <_read>
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d102      	bne.n	8001be2 <_read_r+0x1e>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	b103      	cbz	r3, 8001be2 <_read_r+0x1e>
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	20000144 	.word	0x20000144

08001be8 <findslot>:
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <findslot+0x2c>)
 8001bea:	b510      	push	{r4, lr}
 8001bec:	4604      	mov	r4, r0
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	b118      	cbz	r0, 8001bfa <findslot+0x12>
 8001bf2:	6983      	ldr	r3, [r0, #24]
 8001bf4:	b90b      	cbnz	r3, 8001bfa <findslot+0x12>
 8001bf6:	f7ff fad1 	bl	800119c <__sinit>
 8001bfa:	2c13      	cmp	r4, #19
 8001bfc:	d807      	bhi.n	8001c0e <findslot+0x26>
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <findslot+0x30>)
 8001c00:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001c04:	3301      	adds	r3, #1
 8001c06:	d002      	beq.n	8001c0e <findslot+0x26>
 8001c08:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	2000      	movs	r0, #0
 8001c10:	e7fc      	b.n	8001c0c <findslot+0x24>
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000
 8001c18:	200000a4 	.word	0x200000a4

08001c1c <checkerror>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	1c43      	adds	r3, r0, #1
 8001c20:	4605      	mov	r5, r0
 8001c22:	d109      	bne.n	8001c38 <checkerror+0x1c>
 8001c24:	f000 faaa 	bl	800217c <__errno>
 8001c28:	2413      	movs	r4, #19
 8001c2a:	4606      	mov	r6, r0
 8001c2c:	2700      	movs	r7, #0
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4639      	mov	r1, r7
 8001c32:	beab      	bkpt	0x00ab
 8001c34:	4604      	mov	r4, r0
 8001c36:	6034      	str	r4, [r6, #0]
 8001c38:	4628      	mov	r0, r5
 8001c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c3c <error>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4605      	mov	r5, r0
 8001c40:	f000 fa9c 	bl	800217c <__errno>
 8001c44:	2413      	movs	r4, #19
 8001c46:	4606      	mov	r6, r0
 8001c48:	2700      	movs	r7, #0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4639      	mov	r1, r7
 8001c4e:	beab      	bkpt	0x00ab
 8001c50:	4604      	mov	r4, r0
 8001c52:	6034      	str	r4, [r6, #0]
 8001c54:	4628      	mov	r0, r5
 8001c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c58 <_swiread>:
 8001c58:	b530      	push	{r4, r5, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c60:	9203      	str	r2, [sp, #12]
 8001c62:	2406      	movs	r4, #6
 8001c64:	ad01      	add	r5, sp, #4
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	beab      	bkpt	0x00ab
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f7ff ffd4 	bl	8001c1c <checkerror>
 8001c74:	b005      	add	sp, #20
 8001c76:	bd30      	pop	{r4, r5, pc}

08001c78 <_read>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	460e      	mov	r6, r1
 8001c7c:	4615      	mov	r5, r2
 8001c7e:	f7ff ffb3 	bl	8001be8 <findslot>
 8001c82:	4604      	mov	r4, r0
 8001c84:	b930      	cbnz	r0, 8001c94 <_read+0x1c>
 8001c86:	f000 fa79 	bl	800217c <__errno>
 8001c8a:	2309      	movs	r3, #9
 8001c8c:	6003      	str	r3, [r0, #0]
 8001c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	462a      	mov	r2, r5
 8001c96:	4631      	mov	r1, r6
 8001c98:	6800      	ldr	r0, [r0, #0]
 8001c9a:	f7ff ffdd 	bl	8001c58 <_swiread>
 8001c9e:	1c43      	adds	r3, r0, #1
 8001ca0:	bf1f      	itttt	ne
 8001ca2:	6863      	ldrne	r3, [r4, #4]
 8001ca4:	1a28      	subne	r0, r5, r0
 8001ca6:	181b      	addne	r3, r3, r0
 8001ca8:	6063      	strne	r3, [r4, #4]
 8001caa:	e7f2      	b.n	8001c92 <_read+0x1a>

08001cac <_swilseek>:
 8001cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4616      	mov	r6, r2
 8001cb2:	f7ff ff99 	bl	8001be8 <findslot>
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	b940      	cbnz	r0, 8001ccc <_swilseek+0x20>
 8001cba:	f000 fa5f 	bl	800217c <__errno>
 8001cbe:	2309      	movs	r3, #9
 8001cc0:	6003      	str	r3, [r0, #0]
 8001cc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	b003      	add	sp, #12
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	2e02      	cmp	r6, #2
 8001cce:	d903      	bls.n	8001cd8 <_swilseek+0x2c>
 8001cd0:	f000 fa54 	bl	800217c <__errno>
 8001cd4:	2316      	movs	r3, #22
 8001cd6:	e7f3      	b.n	8001cc0 <_swilseek+0x14>
 8001cd8:	2e01      	cmp	r6, #1
 8001cda:	d112      	bne.n	8001d02 <_swilseek+0x56>
 8001cdc:	6843      	ldr	r3, [r0, #4]
 8001cde:	18e4      	adds	r4, r4, r3
 8001ce0:	d4f6      	bmi.n	8001cd0 <_swilseek+0x24>
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	260a      	movs	r6, #10
 8001ce6:	e9cd 3400 	strd	r3, r4, [sp]
 8001cea:	466f      	mov	r7, sp
 8001cec:	4630      	mov	r0, r6
 8001cee:	4639      	mov	r1, r7
 8001cf0:	beab      	bkpt	0x00ab
 8001cf2:	4606      	mov	r6, r0
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f7ff ff91 	bl	8001c1c <checkerror>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	dbe1      	blt.n	8001cc2 <_swilseek+0x16>
 8001cfe:	606c      	str	r4, [r5, #4]
 8001d00:	e7e1      	b.n	8001cc6 <_swilseek+0x1a>
 8001d02:	2e02      	cmp	r6, #2
 8001d04:	d1ed      	bne.n	8001ce2 <_swilseek+0x36>
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001d0e:	260c      	movs	r6, #12
 8001d10:	4630      	mov	r0, r6
 8001d12:	4639      	mov	r1, r7
 8001d14:	beab      	bkpt	0x00ab
 8001d16:	4606      	mov	r6, r0
 8001d18:	4630      	mov	r0, r6
 8001d1a:	f7ff ff7f 	bl	8001c1c <checkerror>
 8001d1e:	1c43      	adds	r3, r0, #1
 8001d20:	d0cf      	beq.n	8001cc2 <_swilseek+0x16>
 8001d22:	4404      	add	r4, r0
 8001d24:	e7dd      	b.n	8001ce2 <_swilseek+0x36>

08001d26 <_lseek>:
 8001d26:	f7ff bfc1 	b.w	8001cac <_swilseek>

08001d2a <_swiwrite>:
 8001d2a:	b530      	push	{r4, r5, lr}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d32:	9203      	str	r2, [sp, #12]
 8001d34:	2405      	movs	r4, #5
 8001d36:	ad01      	add	r5, sp, #4
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	beab      	bkpt	0x00ab
 8001d3e:	4604      	mov	r4, r0
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff6b 	bl	8001c1c <checkerror>
 8001d46:	b005      	add	sp, #20
 8001d48:	bd30      	pop	{r4, r5, pc}

08001d4a <_write>:
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	460e      	mov	r6, r1
 8001d4e:	4615      	mov	r5, r2
 8001d50:	f7ff ff4a 	bl	8001be8 <findslot>
 8001d54:	4604      	mov	r4, r0
 8001d56:	b930      	cbnz	r0, 8001d66 <_write+0x1c>
 8001d58:	f000 fa10 	bl	800217c <__errno>
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	6003      	str	r3, [r0, #0]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	bd70      	pop	{r4, r5, r6, pc}
 8001d66:	462a      	mov	r2, r5
 8001d68:	4631      	mov	r1, r6
 8001d6a:	6800      	ldr	r0, [r0, #0]
 8001d6c:	f7ff ffdd 	bl	8001d2a <_swiwrite>
 8001d70:	1e02      	subs	r2, r0, #0
 8001d72:	dbf5      	blt.n	8001d60 <_write+0x16>
 8001d74:	6863      	ldr	r3, [r4, #4]
 8001d76:	1aa8      	subs	r0, r5, r2
 8001d78:	4403      	add	r3, r0
 8001d7a:	42aa      	cmp	r2, r5
 8001d7c:	6063      	str	r3, [r4, #4]
 8001d7e:	d1f1      	bne.n	8001d64 <_write+0x1a>
 8001d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff bf59 	b.w	8001c3c <error>

08001d8a <_swiclose>:
 8001d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d8c:	ad02      	add	r5, sp, #8
 8001d8e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001d92:	2402      	movs	r4, #2
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	beab      	bkpt	0x00ab
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff ff3d 	bl	8001c1c <checkerror>
 8001da2:	b003      	add	sp, #12
 8001da4:	bd30      	pop	{r4, r5, pc}
	...

08001da8 <_close>:
 8001da8:	b538      	push	{r3, r4, r5, lr}
 8001daa:	4605      	mov	r5, r0
 8001dac:	f7ff ff1c 	bl	8001be8 <findslot>
 8001db0:	4604      	mov	r4, r0
 8001db2:	b930      	cbnz	r0, 8001dc2 <_close+0x1a>
 8001db4:	f000 f9e2 	bl	800217c <__errno>
 8001db8:	2309      	movs	r3, #9
 8001dba:	6003      	str	r3, [r0, #0]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	bd38      	pop	{r3, r4, r5, pc}
 8001dc2:	3d01      	subs	r5, #1
 8001dc4:	2d01      	cmp	r5, #1
 8001dc6:	d809      	bhi.n	8001ddc <_close+0x34>
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_close+0x48>)
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d104      	bne.n	8001ddc <_close+0x34>
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	6003      	str	r3, [r0, #0]
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e7f1      	b.n	8001dc0 <_close+0x18>
 8001ddc:	6820      	ldr	r0, [r4, #0]
 8001dde:	f7ff ffd4 	bl	8001d8a <_swiclose>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d1ec      	bne.n	8001dc0 <_close+0x18>
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	e7e8      	b.n	8001dc0 <_close+0x18>
 8001dee:	bf00      	nop
 8001df0:	200000a4 	.word	0x200000a4

08001df4 <_sbrk>:
 8001df4:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <_sbrk+0x38>)
 8001df6:	b510      	push	{r4, lr}
 8001df8:	6819      	ldr	r1, [r3, #0]
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	b909      	cbnz	r1, 8001e02 <_sbrk+0xe>
 8001dfe:	490c      	ldr	r1, [pc, #48]	; (8001e30 <_sbrk+0x3c>)
 8001e00:	6019      	str	r1, [r3, #0]
 8001e02:	4669      	mov	r1, sp
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	4402      	add	r2, r0
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	d806      	bhi.n	8001e1a <_sbrk+0x26>
 8001e0c:	4909      	ldr	r1, [pc, #36]	; (8001e34 <_sbrk+0x40>)
 8001e0e:	4c0a      	ldr	r4, [pc, #40]	; (8001e38 <_sbrk+0x44>)
 8001e10:	6809      	ldr	r1, [r1, #0]
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d008      	beq.n	8001e28 <_sbrk+0x34>
 8001e16:	428a      	cmp	r2, r1
 8001e18:	d906      	bls.n	8001e28 <_sbrk+0x34>
 8001e1a:	f000 f9af 	bl	800217c <__errno>
 8001e1e:	230c      	movs	r3, #12
 8001e20:	6003      	str	r3, [r0, #0]
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	bd10      	pop	{r4, pc}
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	e7fc      	b.n	8001e26 <_sbrk+0x32>
 8001e2c:	20000094 	.word	0x20000094
 8001e30:	20000148 	.word	0x20000148
 8001e34:	20000064 	.word	0x20000064
 8001e38:	cafedead 	.word	0xcafedead

08001e3c <_swistat>:
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	460c      	mov	r4, r1
 8001e40:	f7ff fed2 	bl	8001be8 <findslot>
 8001e44:	4606      	mov	r6, r0
 8001e46:	b930      	cbnz	r0, 8001e56 <_swistat+0x1a>
 8001e48:	f000 f998 	bl	800217c <__errno>
 8001e4c:	2309      	movs	r3, #9
 8001e4e:	6003      	str	r3, [r0, #0]
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
 8001e56:	6863      	ldr	r3, [r4, #4]
 8001e58:	250c      	movs	r5, #12
 8001e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e5e:	6063      	str	r3, [r4, #4]
 8001e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e64:	6463      	str	r3, [r4, #68]	; 0x44
 8001e66:	4628      	mov	r0, r5
 8001e68:	4631      	mov	r1, r6
 8001e6a:	beab      	bkpt	0x00ab
 8001e6c:	4605      	mov	r5, r0
 8001e6e:	4628      	mov	r0, r5
 8001e70:	f7ff fed4 	bl	8001c1c <checkerror>
 8001e74:	1c43      	adds	r3, r0, #1
 8001e76:	bf1c      	itt	ne
 8001e78:	6120      	strne	r0, [r4, #16]
 8001e7a:	2000      	movne	r0, #0
 8001e7c:	e7ea      	b.n	8001e54 <_swistat+0x18>

08001e7e <_fstat>:
 8001e7e:	460b      	mov	r3, r1
 8001e80:	b510      	push	{r4, lr}
 8001e82:	2100      	movs	r1, #0
 8001e84:	4604      	mov	r4, r0
 8001e86:	2258      	movs	r2, #88	; 0x58
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff53 	bl	8000d34 <memset>
 8001e8e:	4601      	mov	r1, r0
 8001e90:	4620      	mov	r0, r4
 8001e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e96:	f7ff bfd1 	b.w	8001e3c <_swistat>

08001e9a <_stat>:
 8001e9a:	b538      	push	{r3, r4, r5, lr}
 8001e9c:	460d      	mov	r5, r1
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	2258      	movs	r2, #88	; 0x58
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	f7fe ff45 	bl	8000d34 <memset>
 8001eaa:	4620      	mov	r0, r4
 8001eac:	2100      	movs	r1, #0
 8001eae:	f000 f811 	bl	8001ed4 <_swiopen>
 8001eb2:	1c43      	adds	r3, r0, #1
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	d00b      	beq.n	8001ed0 <_stat+0x36>
 8001eb8:	686b      	ldr	r3, [r5, #4]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001ec0:	606b      	str	r3, [r5, #4]
 8001ec2:	f7ff ffbb 	bl	8001e3c <_swistat>
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff ff6d 	bl	8001da8 <_close>
 8001ece:	462c      	mov	r4, r5
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}

08001ed4 <_swiopen>:
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <_swiopen+0xb0>)
 8001ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eda:	4682      	mov	sl, r0
 8001edc:	460e      	mov	r6, r1
 8001ede:	2500      	movs	r5, #0
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	b096      	sub	sp, #88	; 0x58
 8001ee4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001ee8:	00ef      	lsls	r7, r5, #3
 8001eea:	1c61      	adds	r1, r4, #1
 8001eec:	d036      	beq.n	8001f5c <_swiopen+0x88>
 8001eee:	3501      	adds	r5, #1
 8001ef0:	2d14      	cmp	r5, #20
 8001ef2:	d1f7      	bne.n	8001ee4 <_swiopen+0x10>
 8001ef4:	f000 f942 	bl	800217c <__errno>
 8001ef8:	2318      	movs	r3, #24
 8001efa:	f04f 34ff 	mov.w	r4, #4294967295
 8001efe:	6003      	str	r3, [r0, #0]
 8001f00:	e03c      	b.n	8001f7c <_swiopen+0xa8>
 8001f02:	f240 6301 	movw	r3, #1537	; 0x601
 8001f06:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001f0a:	07b2      	lsls	r2, r6, #30
 8001f0c:	bf48      	it	mi
 8001f0e:	f044 0402 	orrmi.w	r4, r4, #2
 8001f12:	421e      	tst	r6, r3
 8001f14:	bf18      	it	ne
 8001f16:	f044 0404 	orrne.w	r4, r4, #4
 8001f1a:	0733      	lsls	r3, r6, #28
 8001f1c:	bf48      	it	mi
 8001f1e:	f024 0404 	bicmi.w	r4, r4, #4
 8001f22:	4650      	mov	r0, sl
 8001f24:	bf48      	it	mi
 8001f26:	f044 0408 	orrmi.w	r4, r4, #8
 8001f2a:	f8cd a000 	str.w	sl, [sp]
 8001f2e:	f7fe f91f 	bl	8000170 <strlen>
 8001f32:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001f36:	2401      	movs	r4, #1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	beab      	bkpt	0x00ab
 8001f3e:	4604      	mov	r4, r0
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	db06      	blt.n	8001f52 <_swiopen+0x7e>
 8001f44:	2300      	movs	r3, #0
 8001f46:	4447      	add	r7, r8
 8001f48:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	462c      	mov	r4, r5
 8001f50:	e014      	b.n	8001f7c <_swiopen+0xa8>
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff fe72 	bl	8001c3c <error>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	e00f      	b.n	8001f7c <_swiopen+0xa8>
 8001f5c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001f60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001f64:	46e9      	mov	r9, sp
 8001f66:	d1cc      	bne.n	8001f02 <_swiopen+0x2e>
 8001f68:	4649      	mov	r1, r9
 8001f6a:	4650      	mov	r0, sl
 8001f6c:	f7ff ff95 	bl	8001e9a <_stat>
 8001f70:	3001      	adds	r0, #1
 8001f72:	d0c6      	beq.n	8001f02 <_swiopen+0x2e>
 8001f74:	f000 f902 	bl	800217c <__errno>
 8001f78:	2311      	movs	r3, #17
 8001f7a:	6003      	str	r3, [r0, #0]
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	b016      	add	sp, #88	; 0x58
 8001f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f84:	200000a4 	.word	0x200000a4

08001f88 <_get_semihosting_exts>:
 8001f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	4607      	mov	r7, r0
 8001f8e:	4688      	mov	r8, r1
 8001f90:	4829      	ldr	r0, [pc, #164]	; (8002038 <_get_semihosting_exts+0xb0>)
 8001f92:	2100      	movs	r1, #0
 8001f94:	4615      	mov	r5, r2
 8001f96:	f7ff ff9d 	bl	8001ed4 <_swiopen>
 8001f9a:	4604      	mov	r4, r0
 8001f9c:	462a      	mov	r2, r5
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4638      	mov	r0, r7
 8001fa2:	f7fe fec7 	bl	8000d34 <memset>
 8001fa6:	1c63      	adds	r3, r4, #1
 8001fa8:	d015      	beq.n	8001fd6 <_get_semihosting_exts+0x4e>
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff fe1c 	bl	8001be8 <findslot>
 8001fb0:	260c      	movs	r6, #12
 8001fb2:	4681      	mov	r9, r0
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	beab      	bkpt	0x00ab
 8001fba:	4606      	mov	r6, r0
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7ff fe2d 	bl	8001c1c <checkerror>
 8001fc2:	2803      	cmp	r0, #3
 8001fc4:	dd02      	ble.n	8001fcc <_get_semihosting_exts+0x44>
 8001fc6:	3803      	subs	r0, #3
 8001fc8:	42a8      	cmp	r0, r5
 8001fca:	dc08      	bgt.n	8001fde <_get_semihosting_exts+0x56>
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff feeb 	bl	8001da8 <_close>
 8001fd2:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	b003      	add	sp, #12
 8001fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	eb0d 0102 	add.w	r1, sp, r2
 8001fe6:	f7ff fe47 	bl	8001c78 <_read>
 8001fea:	2803      	cmp	r0, #3
 8001fec:	ddee      	ble.n	8001fcc <_get_semihosting_exts+0x44>
 8001fee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ff2:	2b53      	cmp	r3, #83	; 0x53
 8001ff4:	d1ea      	bne.n	8001fcc <_get_semihosting_exts+0x44>
 8001ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001ffa:	2b48      	cmp	r3, #72	; 0x48
 8001ffc:	d1e6      	bne.n	8001fcc <_get_semihosting_exts+0x44>
 8001ffe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002002:	2b46      	cmp	r3, #70	; 0x46
 8002004:	d1e2      	bne.n	8001fcc <_get_semihosting_exts+0x44>
 8002006:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800200a:	2b42      	cmp	r3, #66	; 0x42
 800200c:	d1de      	bne.n	8001fcc <_get_semihosting_exts+0x44>
 800200e:	2201      	movs	r2, #1
 8002010:	4641      	mov	r1, r8
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fe4a 	bl	8001cac <_swilseek>
 8002018:	2800      	cmp	r0, #0
 800201a:	dbd7      	blt.n	8001fcc <_get_semihosting_exts+0x44>
 800201c:	462a      	mov	r2, r5
 800201e:	4639      	mov	r1, r7
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff fe29 	bl	8001c78 <_read>
 8002026:	4605      	mov	r5, r0
 8002028:	4620      	mov	r0, r4
 800202a:	f7ff febd 	bl	8001da8 <_close>
 800202e:	4628      	mov	r0, r5
 8002030:	f7ff fdf4 	bl	8001c1c <checkerror>
 8002034:	4604      	mov	r4, r0
 8002036:	e7ce      	b.n	8001fd6 <_get_semihosting_exts+0x4e>
 8002038:	080022df 	.word	0x080022df

0800203c <initialise_semihosting_exts>:
 800203c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800203e:	2100      	movs	r1, #0
 8002040:	2201      	movs	r2, #1
 8002042:	4d09      	ldr	r5, [pc, #36]	; (8002068 <initialise_semihosting_exts+0x2c>)
 8002044:	4c09      	ldr	r4, [pc, #36]	; (800206c <initialise_semihosting_exts+0x30>)
 8002046:	a801      	add	r0, sp, #4
 8002048:	6029      	str	r1, [r5, #0]
 800204a:	6022      	str	r2, [r4, #0]
 800204c:	f7ff ff9c 	bl	8001f88 <_get_semihosting_exts>
 8002050:	2800      	cmp	r0, #0
 8002052:	dd07      	ble.n	8002064 <initialise_semihosting_exts+0x28>
 8002054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002058:	f003 0201 	and.w	r2, r3, #1
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	602a      	str	r2, [r5, #0]
 8002062:	6023      	str	r3, [r4, #0]
 8002064:	b003      	add	sp, #12
 8002066:	bd30      	pop	{r4, r5, pc}
 8002068:	20000068 	.word	0x20000068
 800206c:	2000006c 	.word	0x2000006c

08002070 <_has_ext_stdout_stderr>:
 8002070:	b510      	push	{r4, lr}
 8002072:	4c04      	ldr	r4, [pc, #16]	; (8002084 <_has_ext_stdout_stderr+0x14>)
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	2a00      	cmp	r2, #0
 8002078:	da01      	bge.n	800207e <_has_ext_stdout_stderr+0xe>
 800207a:	f7ff ffdf 	bl	800203c <initialise_semihosting_exts>
 800207e:	6820      	ldr	r0, [r4, #0]
 8002080:	bd10      	pop	{r4, pc}
 8002082:	bf00      	nop
 8002084:	2000006c 	.word	0x2000006c

08002088 <initialise_monitor_handles>:
 8002088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208c:	2303      	movs	r3, #3
 800208e:	2400      	movs	r4, #0
 8002090:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002140 <initialise_monitor_handles+0xb8>
 8002094:	b085      	sub	sp, #20
 8002096:	f8cd 9004 	str.w	r9, [sp, #4]
 800209a:	f10d 0804 	add.w	r8, sp, #4
 800209e:	9303      	str	r3, [sp, #12]
 80020a0:	2501      	movs	r5, #1
 80020a2:	9402      	str	r4, [sp, #8]
 80020a4:	4628      	mov	r0, r5
 80020a6:	4641      	mov	r1, r8
 80020a8:	beab      	bkpt	0x00ab
 80020aa:	4605      	mov	r5, r0
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <initialise_monitor_handles+0xa8>)
 80020ae:	4623      	mov	r3, r4
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	4614      	mov	r4, r2
 80020b6:	4e1f      	ldr	r6, [pc, #124]	; (8002134 <initialise_monitor_handles+0xac>)
 80020b8:	6035      	str	r5, [r6, #0]
 80020ba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80020be:	3301      	adds	r3, #1
 80020c0:	2b14      	cmp	r3, #20
 80020c2:	d1fa      	bne.n	80020ba <initialise_monitor_handles+0x32>
 80020c4:	f7ff ffd4 	bl	8002070 <_has_ext_stdout_stderr>
 80020c8:	4d1b      	ldr	r5, [pc, #108]	; (8002138 <initialise_monitor_handles+0xb0>)
 80020ca:	b1d0      	cbz	r0, 8002102 <initialise_monitor_handles+0x7a>
 80020cc:	f04f 0a03 	mov.w	sl, #3
 80020d0:	2304      	movs	r3, #4
 80020d2:	f8cd 9004 	str.w	r9, [sp, #4]
 80020d6:	2701      	movs	r7, #1
 80020d8:	f8cd a00c 	str.w	sl, [sp, #12]
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	4638      	mov	r0, r7
 80020e0:	4641      	mov	r1, r8
 80020e2:	beab      	bkpt	0x00ab
 80020e4:	4683      	mov	fp, r0
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <initialise_monitor_handles+0xb4>)
 80020e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80020ec:	f8c3 b000 	str.w	fp, [r3]
 80020f0:	2308      	movs	r3, #8
 80020f2:	f8cd a00c 	str.w	sl, [sp, #12]
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	4638      	mov	r0, r7
 80020fa:	4641      	mov	r1, r8
 80020fc:	beab      	bkpt	0x00ab
 80020fe:	4607      	mov	r7, r0
 8002100:	602f      	str	r7, [r5, #0]
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	bf02      	ittt	eq
 8002108:	4b0c      	ldreq	r3, [pc, #48]	; (800213c <initialise_monitor_handles+0xb4>)
 800210a:	681b      	ldreq	r3, [r3, #0]
 800210c:	602b      	streq	r3, [r5, #0]
 800210e:	6833      	ldr	r3, [r6, #0]
 8002110:	2600      	movs	r6, #0
 8002112:	6023      	str	r3, [r4, #0]
 8002114:	6066      	str	r6, [r4, #4]
 8002116:	f7ff ffab 	bl	8002070 <_has_ext_stdout_stderr>
 800211a:	b130      	cbz	r0, 800212a <initialise_monitor_handles+0xa2>
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <initialise_monitor_handles+0xb4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800212a:	b005      	add	sp, #20
 800212c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002130:	200000a4 	.word	0x200000a4
 8002134:	2000009c 	.word	0x2000009c
 8002138:	20000098 	.word	0x20000098
 800213c:	200000a0 	.word	0x200000a0
 8002140:	080022f5 	.word	0x080022f5

08002144 <_isatty>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	f7ff fd4f 	bl	8001be8 <findslot>
 800214a:	2509      	movs	r5, #9
 800214c:	4604      	mov	r4, r0
 800214e:	b920      	cbnz	r0, 800215a <_isatty+0x16>
 8002150:	f000 f814 	bl	800217c <__errno>
 8002154:	6005      	str	r5, [r0, #0]
 8002156:	4620      	mov	r0, r4
 8002158:	bd70      	pop	{r4, r5, r6, pc}
 800215a:	4628      	mov	r0, r5
 800215c:	4621      	mov	r1, r4
 800215e:	beab      	bkpt	0x00ab
 8002160:	4604      	mov	r4, r0
 8002162:	2c01      	cmp	r4, #1
 8002164:	d0f7      	beq.n	8002156 <_isatty+0x12>
 8002166:	f000 f809 	bl	800217c <__errno>
 800216a:	2400      	movs	r4, #0
 800216c:	4606      	mov	r6, r0
 800216e:	2513      	movs	r5, #19
 8002170:	4628      	mov	r0, r5
 8002172:	4621      	mov	r1, r4
 8002174:	beab      	bkpt	0x00ab
 8002176:	4605      	mov	r5, r0
 8002178:	6035      	str	r5, [r6, #0]
 800217a:	e7ec      	b.n	8002156 <_isatty+0x12>

0800217c <__errno>:
 800217c:	4b01      	ldr	r3, [pc, #4]	; (8002184 <__errno+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000

08002188 <_init>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr

08002194 <_fini>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr

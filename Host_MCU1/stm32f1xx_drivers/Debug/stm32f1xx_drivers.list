
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080020b4  080020b4  000120b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002188  08002188  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002188  08002188  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000088  08002218  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08002218  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c27  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005a6  00000000  00000000  00021cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000188  00000000  00000000  00022440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002984  00000000  00000000  000225c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000155a  00000000  00000000  00024f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a51b  00000000  00000000  000264a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000309c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011bc  00000000  00000000  00030a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000088 	.word	0x20000088
 800014c:	00000000 	.word	0x00000000
 8000150:	0800209c 	.word	0x0800209c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000008c 	.word	0x2000008c
 800016c:	0800209c 	.word	0x0800209c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <delay>:
uint8_t received_buff[32];

I2C_Handle_t I2C1Handle;

void delay(void)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <delay+0x12>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <delay+0x24>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d9f8      	bls.n	800018c <delay+0xc>
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	0003d08f 	.word	0x0003d08f

080001a8 <I2C_GPIOInits>:

void I2C_GPIOInits(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80001ae:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <I2C_GPIOInits+0x3c>)
 80001b0:	603b      	str	r3, [r7, #0]

	// SCL -> B6
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 80001b2:	2301      	movs	r3, #1
 80001b4:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001b6:	2303      	movs	r3, #3
 80001b8:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80001ba:	2306      	movs	r3, #6
 80001bc:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001be:	463b      	mov	r3, r7
 80001c0:	4618      	mov	r0, r3
 80001c2:	f000 f95f 	bl	8000484 <GPIO_Init>

	// SDA -> B7
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 80001c6:	2301      	movs	r3, #1
 80001c8:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001ca:	2303      	movs	r3, #3
 80001cc:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001ce:	2307      	movs	r3, #7
 80001d0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001d2:	463b      	mov	r3, r7
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 f955 	bl	8000484 <GPIO_Init>
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	40010c00 	.word	0x40010c00

080001e8 <I2C_Inits>:

void I2C_Inits(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx= I2C1;
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <I2C_Inits+0x2c>)
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <I2C_Inits+0x30>)
 80001f0:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <I2C_Inits+0x2c>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = 0x61; // This doesn't matter in this application bc MCU is acting like master
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <I2C_Inits+0x2c>)
 80001fa:	2261      	movs	r2, #97	; 0x61
 80001fc:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTYCLYCLE_2; // Not used
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <I2C_Inits+0x2c>)
 8000200:	2200      	movs	r2, #0
 8000202:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_CLK_SPEED_SM; // Standard mode
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <I2C_Inits+0x2c>)
 8000206:	4a05      	ldr	r2, [pc, #20]	; (800021c <I2C_Inits+0x34>)
 8000208:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800020a:	4802      	ldr	r0, [pc, #8]	; (8000214 <I2C_Inits+0x2c>)
 800020c:	f000 fb1e 	bl	800084c <I2C_Init>
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000015c 	.word	0x2000015c
 8000218:	40005400 	.word	0x40005400
 800021c:	000186a0 	.word	0x000186a0

08000220 <main>:
	GPIO_Init(&gpioBtn);
}

extern void initialise_monitor_handles(void);

int main (void){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af02      	add	r7, sp, #8

	initialise_monitor_handles();
 8000226:	f001 feb9 	bl	8001f9c <initialise_monitor_handles>
	printf("It works!\n");
 800022a:	4824      	ldr	r0, [pc, #144]	; (80002bc <main+0x9c>)
 800022c:	f000 fd88 	bl	8000d40 <puts>

	uint8_t command_code;
	uint8_t length;

	// Initialize GPIOs a IC2 pins
	I2C_GPIOInits();
 8000230:	f7ff ffba 	bl	80001a8 <I2C_GPIOInits>

	// Configure I2C
	I2C_Inits();
 8000234:	f7ff ffd8 	bl	80001e8 <I2C_Inits>

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000238:	2101      	movs	r1, #1
 800023a:	4821      	ldr	r0, [pc, #132]	; (80002c0 <main+0xa0>)
 800023c:	f000 fcaa 	bl	8000b94 <I2C_PeripheralControl>

	// Enable acking after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	481f      	ldr	r0, [pc, #124]	; (80002c0 <main+0xa0>)
 8000244:	f000 fcc1 	bl	8000bca <I2C_ManageAcking>

	while (1){
		uint8_t button_value = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 8000248:	2100      	movs	r1, #0
 800024a:	481e      	ldr	r0, [pc, #120]	; (80002c4 <main+0xa4>)
 800024c:	f000 f9d5 	bl	80005fa <GPIO_ReadFromInputPin>
 8000250:	4603      	mov	r3, r0
 8000252:	71fb      	strb	r3, [r7, #7]

		// Button pressed for the 1st time
		while((button_value));
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1fc      	bne.n	8000254 <main+0x34>
		delay();
 800025a:	f7ff ff91 	bl	8000180 <delay>

		//Master sends 0x51 to the slave so it knows it has to send length
		command_code = 0x51;
 800025e:	2351      	movs	r3, #81	; 0x51
 8000260:	71bb      	strb	r3, [r7, #6]
		I2C_MasterSendData(&I2C1Handle, &command_code, 1, SLAVE_ADDR, I2C_SR); // Repeated start
 8000262:	1db9      	adds	r1, r7, #6
 8000264:	2301      	movs	r3, #1
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2368      	movs	r3, #104	; 0x68
 800026a:	2201      	movs	r2, #1
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <main+0xa8>)
 800026e:	f000 fba2 	bl	80009b6 <I2C_MasterSendData>

		// Slave returns length of the data and master reads it
		I2C_MasterReceiveData(&I2C1Handle, &length, 1, SLAVE_ADDR, I2C_SR); // Repeated start
 8000272:	1d79      	adds	r1, r7, #5
 8000274:	2301      	movs	r3, #1
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2368      	movs	r3, #104	; 0x68
 800027a:	2201      	movs	r2, #1
 800027c:	4812      	ldr	r0, [pc, #72]	; (80002c8 <main+0xa8>)
 800027e:	f000 fc01 	bl	8000a84 <I2C_MasterReceiveData>

		//Master sends 0x52 to the slave so it knows it has to send data
		command_code = 0x52;
 8000282:	2352      	movs	r3, #82	; 0x52
 8000284:	71bb      	strb	r3, [r7, #6]
		I2C_MasterSendData(&I2C1Handle, &command_code, 1, SLAVE_ADDR, I2C_SR); // Repeated start
 8000286:	1db9      	adds	r1, r7, #6
 8000288:	2301      	movs	r3, #1
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2368      	movs	r3, #104	; 0x68
 800028e:	2201      	movs	r2, #1
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <main+0xa8>)
 8000292:	f000 fb90 	bl	80009b6 <I2C_MasterSendData>

		// Slave sends data and masters receives it
		I2C_MasterReceiveData(&I2C1Handle, received_buff, length, SLAVE_ADDR, I2C_NO_SR); // No repeated start
 8000296:	797a      	ldrb	r2, [r7, #5]
 8000298:	2300      	movs	r3, #0
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2368      	movs	r3, #104	; 0x68
 800029e:	490b      	ldr	r1, [pc, #44]	; (80002cc <main+0xac>)
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <main+0xa8>)
 80002a2:	f000 fbef 	bl	8000a84 <I2C_MasterReceiveData>

		received_buff[length+1] = '\0'; //Buffer needs to be terminated with the null character so we are adding it
 80002a6:	797b      	ldrb	r3, [r7, #5]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a08      	ldr	r2, [pc, #32]	; (80002cc <main+0xac>)
 80002ac:	2100      	movs	r1, #0
 80002ae:	54d1      	strb	r1, [r2, r3]

		// Print data
		printf("Data received: %s", received_buff);
 80002b0:	4906      	ldr	r1, [pc, #24]	; (80002cc <main+0xac>)
 80002b2:	4807      	ldr	r0, [pc, #28]	; (80002d0 <main+0xb0>)
 80002b4:	f000 fcd0 	bl	8000c58 <iprintf>
	while (1){
 80002b8:	e7c6      	b.n	8000248 <main+0x28>
 80002ba:	bf00      	nop
 80002bc:	080020b4 	.word	0x080020b4
 80002c0:	40005400 	.word	0x40005400
 80002c4:	40010800 	.word	0x40010800
 80002c8:	2000015c 	.word	0x2000015c
 80002cc:	20000184 	.word	0x20000184
 80002d0:	080020c0 	.word	0x080020c0

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490e      	ldr	r1, [pc, #56]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fe:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 fc7d 	bl	8000c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff8b 	bl	8000220 <main>

0800030a <LoopForever>:

LoopForever:
    b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000318:	08002190 	.word	0x08002190
  ldr r2, =_sbss
 800031c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000320:	200001a8 	.word	0x200001a8

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d148      	bne.n	80003cc <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a4a      	ldr	r2, [pc, #296]	; (8000468 <GPIO_PeriClkCtrl+0x140>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 8000342:	4b4a      	ldr	r3, [pc, #296]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a49      	ldr	r2, [pc, #292]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 800034e:	e085      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a47      	ldr	r2, [pc, #284]	; (8000470 <GPIO_PeriClkCtrl+0x148>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000358:	4b44      	ldr	r3, [pc, #272]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a43      	ldr	r2, [pc, #268]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	6193      	str	r3, [r2, #24]
}
 8000364:	e07a      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a42      	ldr	r2, [pc, #264]	; (8000474 <GPIO_PeriClkCtrl+0x14c>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800036e:	4b3f      	ldr	r3, [pc, #252]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a3e      	ldr	r2, [pc, #248]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6193      	str	r3, [r2, #24]
}
 800037a:	e06f      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a3e      	ldr	r2, [pc, #248]	; (8000478 <GPIO_PeriClkCtrl+0x150>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000384:	4b39      	ldr	r3, [pc, #228]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a38      	ldr	r2, [pc, #224]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
}
 8000390:	e064      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a39      	ldr	r2, [pc, #228]	; (800047c <GPIO_PeriClkCtrl+0x154>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800039a:	4b34      	ldr	r3, [pc, #208]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a33      	ldr	r2, [pc, #204]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a4:	6193      	str	r3, [r2, #24]
}
 80003a6:	e059      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a35      	ldr	r2, [pc, #212]	; (8000480 <GPIO_PeriClkCtrl+0x158>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80003b0:	4b2e      	ldr	r3, [pc, #184]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a2d      	ldr	r2, [pc, #180]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ba:	6193      	str	r3, [r2, #24]
}
 80003bc:	e04e      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a2a      	ldr	r2, [pc, #168]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003c8:	6193      	str	r3, [r2, #24]
}
 80003ca:	e047      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a26      	ldr	r2, [pc, #152]	; (8000468 <GPIO_PeriClkCtrl+0x140>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a24      	ldr	r2, [pc, #144]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003da:	f023 0304 	bic.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
}
 80003e0:	e03c      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a22      	ldr	r2, [pc, #136]	; (8000470 <GPIO_PeriClkCtrl+0x148>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 80003ea:	4b20      	ldr	r3, [pc, #128]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a1f      	ldr	r2, [pc, #124]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 80003f0:	f023 0308 	bic.w	r3, r3, #8
 80003f4:	6193      	str	r3, [r2, #24]
}
 80003f6:	e031      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <GPIO_PeriClkCtrl+0x14c>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a19      	ldr	r2, [pc, #100]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000406:	f023 0310 	bic.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
}
 800040c:	e026      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a19      	ldr	r2, [pc, #100]	; (8000478 <GPIO_PeriClkCtrl+0x150>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a14      	ldr	r2, [pc, #80]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800041c:	f023 0320 	bic.w	r3, r3, #32
 8000420:	6193      	str	r3, [r2, #24]
}
 8000422:	e01b      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a15      	ldr	r2, [pc, #84]	; (800047c <GPIO_PeriClkCtrl+0x154>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a0e      	ldr	r2, [pc, #56]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000436:	6193      	str	r3, [r2, #24]
}
 8000438:	e010      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <GPIO_PeriClkCtrl+0x158>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a09      	ldr	r2, [pc, #36]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800044c:	6193      	str	r3, [r2, #24]
}
 800044e:	e005      	b.n	800045c <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <GPIO_PeriClkCtrl+0x144>)
 8000456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800045a:	6193      	str	r3, [r2, #24]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800
 800046c:	40021000 	.word	0x40021000
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40011000 	.word	0x40011000
 8000478:	40011400 	.word	0x40011400
 800047c:	40011800 	.word	0x40011800
 8000480:	40011c00 	.word	0x40011c00

08000484 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff48 	bl	8000328 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	2b07      	cmp	r3, #7
 80004a6:	d84b      	bhi.n	8000540 <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	799b      	ldrb	r3, [r3, #6]
 80004b8:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 80004c0:	7dfb      	ldrb	r3, [r7, #23]
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	3302      	adds	r3, #2
 80004c8:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 80004ca:	7d3b      	ldrb	r3, [r7, #20]
 80004cc:	2203      	movs	r2, #3
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 80004d4:	7cfb      	ldrb	r3, [r7, #19]
 80004d6:	2203      	movs	r2, #3
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 80004de:	7dba      	ldrb	r2, [r7, #22]
 80004e0:	7d3b      	ldrb	r3, [r7, #20]
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	6819      	ldr	r1, [r3, #0]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	43da      	mvns	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	400a      	ands	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 800050e:	7d7a      	ldrb	r2, [r7, #21]
 8000510:	7cfb      	ldrb	r3, [r7, #19]
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	43da      	mvns	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	400a      	ands	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6819      	ldr	r1, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000536:	430a      	orrs	r2, r1
 8000538:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting

		temp_config = 0;
	}

}
 800053e:	e058      	b.n	80005f2 <GPIO_Init+0x16e>
		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	3b08      	subs	r3, #8
 8000546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 800055a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 8000564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	3302      	adds	r3, #2
 800056e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 8000572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000576:	2203      	movs	r2, #3
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 8000580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000584:	2203      	movs	r2, #3
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	61bb      	str	r3, [r7, #24]
		temp_mode = value_mode << positions_mode;
 800058e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6859      	ldr	r1, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	69fa      	ldr	r2, [r7, #28]
 80005a8:	400a      	ands	r2, r1
 80005aa:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6859      	ldr	r1, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005b8:	430a      	orrs	r2, r1
 80005ba:	605a      	str	r2, [r3, #4]
		temp_mode = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
		temp_config = value_config << positions_config;
 80005c0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80005c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005c8:	fa02 f303 	lsl.w	r3, r2, r3
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	69ba      	ldr	r2, [r7, #24]
 80005da:	400a      	ands	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6859      	ldr	r1, [r3, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005ea:	430a      	orrs	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
		temp_config = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <GPIO_ReadFromInputPin>:
 * @param [in]		Pin number
 * @return			Read value 0 or 1
 * @note 			None
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	460b      	mov	r3, r1
 8000604:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	689a      	ldr	r2, [r3, #8]
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	fa22 f303 	lsr.w	r3, r2, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	73fb      	strb	r3, [r7, #15]
	return value;
 8000618:	7bfb      	ldrb	r3, [r7, #15]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <I2C_GenerateStartCondition>:
 * @brief			This functions generates the start condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]

}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <I2C_ExecuteAddressPhaseWrite>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	460b      	mov	r3, r1
 800064c:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // Set 0 to write
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800065c:	78fa      	ldrb	r2, [r7, #3]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	611a      	str	r2, [r3, #16]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <I2C_ExecuteAddressPhaseRead>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; // Set 1 to write
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000686:	78fa      	ldrb	r2, [r7, #3]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	611a      	str	r2, [r3, #16]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <I2C_ClearAddrFlag>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CxHandle){
 8000696:	b580      	push	{r7, lr}
 8000698:	b084      	sub	sp, #16
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]

	uint8_t dummy_read;

	// Check mode
	if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01f      	beq.n	80006ec <I2C_ClearAddrFlag+0x56>
		//Device in master mode
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7f1b      	ldrb	r3, [r3, #28]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d112      	bne.n	80006da <I2C_ClearAddrFlag+0x44>
			if (pI2CxHandle->RxSize == 1){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6a1b      	ldr	r3, [r3, #32]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d11f      	bne.n	80006fc <I2C_ClearAddrFlag+0x66>
				// Disable ACKING
				I2C_ManageAcking(pI2CxHandle->pI2Cx, DISABLE);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fa81 	bl	8000bca <I2C_ManageAcking>

				// Clear ADDR flag
				dummy_read = pI2CxHandle->pI2Cx->SR1;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	73fb      	strb	r3, [r7, #15]
		// Clear ADDR flag
		dummy_read = pI2CxHandle->pI2Cx->SR1;
		dummy_read = pI2CxHandle->pI2Cx->SR2;
		(void) dummy_read;
	}
}
 80006d8:	e010      	b.n	80006fc <I2C_ClearAddrFlag+0x66>
			dummy_read = pI2CxHandle->pI2Cx->SR1;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	73fb      	strb	r3, [r7, #15]
}
 80006ea:	e007      	b.n	80006fc <I2C_ClearAddrFlag+0x66>
		dummy_read = pI2CxHandle->pI2Cx->SR1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	73fb      	strb	r3, [r7, #15]
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <I2C_GenerateStopCondition>:
 * @brief			This functions generates the stop condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]

}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
	...

08000724 <I2C_PeriClkCtrl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeriClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d115      	bne.n	8000762 <I2C_PeriClkCtrl+0x3e>
		if (pI2Cx == I2C1) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <I2C_PeriClkCtrl+0x74>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <I2C_PeriClkCtrl+0x28>
			I2C1_PCLK_EN();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000748:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		}
	}
}
 800074a:	e01f      	b.n	800078c <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <I2C_PeriClkCtrl+0x7c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d11b      	bne.n	800078c <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_EN();
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <I2C_PeriClkCtrl+0x78>)
 800075a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800075e:	61d3      	str	r3, [r2, #28]
}
 8000760:	e014      	b.n	800078c <I2C_PeriClkCtrl+0x68>
		if (pI2Cx == I2C1) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <I2C_PeriClkCtrl+0x74>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <I2C_PeriClkCtrl+0x54>
			I2C1_PCLK_DI();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <I2C_PeriClkCtrl+0x78>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000774:	61d3      	str	r3, [r2, #28]
}
 8000776:	e009      	b.n	800078c <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <I2C_PeriClkCtrl+0x7c>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d105      	bne.n	800078c <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_DI();
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <I2C_PeriClkCtrl+0x78>)
 8000786:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800078a:	61d3      	str	r3, [r2, #28]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40005400 	.word	0x40005400
 800079c:	40021000 	.word	0x40021000
 80007a0:	40005800 	.word	0x40005800

080007a4 <RCC_GetPCLK1Value>:
 * @brief			This functions calculates the frequency of the APB1 clock
 * @param [in]		None
 * @return			Frequency of the clock
 * @note 			None
 */
uint32_t RCC_GetPCLK1Value (void){
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
	uint8_t clksrc, temp, ahb1_prescaler, apb1_prescaler;

	/* System clock: Defined on the register CFGR of RCC
	 * Move the bits two positions to the right so they a in the position 0 and 1.
	 * Then mask and get the value */
	clksrc = (RCC ->CFGR >> 2) & 0x3;
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <RCC_GetPCLK1Value+0x94>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	089b      	lsrs	r3, r3, #2
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0){
 80007b8:	7a7b      	ldrb	r3, [r7, #9]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d102      	bne.n	80007c4 <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <RCC_GetPCLK1Value+0x98>)
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	e004      	b.n	80007ce <RCC_GetPCLK1Value+0x2a>
	} else if (clksrc == 1){
 80007c4:	7a7b      	ldrb	r3, [r7, #9]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d101      	bne.n	80007ce <RCC_GetPCLK1Value+0x2a>
		sysclk = 8000000;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <RCC_GetPCLK1Value+0x9c>)
 80007cc:	60fb      	str	r3, [r7, #12]
	}

	// AHB Prescaler: Defined on register CFGR
	temp = (RCC ->CFGR >> 4) & 0xF;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <RCC_GetPCLK1Value+0x94>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	091b      	lsrs	r3, r3, #4
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	723b      	strb	r3, [r7, #8]

	if (temp < 8){
 80007dc:	7a3b      	ldrb	r3, [r7, #8]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d802      	bhi.n	80007e8 <RCC_GetPCLK1Value+0x44>
		ahb1_prescaler = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	72fb      	strb	r3, [r7, #11]
 80007e6:	e005      	b.n	80007f4 <RCC_GetPCLK1Value+0x50>
	} else {
		ahb1_prescaler = AHB1_Prescaler[temp-8];
 80007e8:	7a3b      	ldrb	r3, [r7, #8]
 80007ea:	3b08      	subs	r3, #8
 80007ec:	4a15      	ldr	r2, [pc, #84]	; (8000844 <RCC_GetPCLK1Value+0xa0>)
 80007ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f2:	72fb      	strb	r3, [r7, #11]
		/* Example: temp = 9 -> 1001 -> [1] -> 9-8 */
	}

	// APB1 Prescaler
	temp = (RCC ->CFGR >> 8) & 0x7;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <RCC_GetPCLK1Value+0x94>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	723b      	strb	r3, [r7, #8]

	if (temp < 4){
 8000802:	7a3b      	ldrb	r3, [r7, #8]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d802      	bhi.n	800080e <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	72bb      	strb	r3, [r7, #10]
 800080c:	e005      	b.n	800081a <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = APB1_Prescaler[temp-4];
 800080e:	7a3b      	ldrb	r3, [r7, #8]
 8000810:	3b04      	subs	r3, #4
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <RCC_GetPCLK1Value+0xa4>)
 8000814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000818:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (sysclk/ahb1_prescaler)/apb1_prescaler;
 800081a:	7afb      	ldrb	r3, [r7, #11]
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

	return pclk1;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	00f42400 	.word	0x00f42400
 8000840:	007a1200 	.word	0x007a1200
 8000844:	20000000 	.word	0x20000000
 8000848:	20000010 	.word	0x20000010

0800084c <I2C_Init>:
 * @brief			This functions initializes a given I2C
 * @param [in]		Base Address of the I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_Init(I2C_Handle_t *pI2CxHandle){
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2C peripheral
	I2C_PeriClkCtrl(pI2CxHandle->pI2Cx, ENABLE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ff60 	bl	8000724 <I2C_PeriClkCtrl>
	 * Configuration of ACK bit
	temp |= (pI2CxHandle->I2C_Config.I2C_ACKControl << 10);
	pI2CxHandle->pI2Cx->CR1 = temp; */

	// Configuration of the FREQ
	temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
	temp |= RCC_GetPCLK1Value()/ 1000000U;
 8000868:	f7ff ff9c 	bl	80007a4 <RCC_GetPCLK1Value>
 800086c:	4602      	mov	r2, r0
 800086e:	4b46      	ldr	r3, [pc, #280]	; (8000988 <I2C_Init+0x13c>)
 8000870:	fba3 2302 	umull	r2, r3, r3, r2
 8000874:	0c9b      	lsrs	r3, r3, #18
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->CR2 = (temp & 0x3F); // To mask the rest of the bits
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000886:	605a      	str	r2, [r3, #4]

	// Configuration of the slave address
	temp |= (pI2CxHandle->I2C_Config.I2C_DeviceAddress << 1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7a1b      	ldrb	r3, [r3, #8]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4313      	orrs	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
	temp |= (1 << 14); // Bit 14 must be 1 according to the manual
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089c:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->OAR1 = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	817b      	strh	r3, [r7, #10]
	temp = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	4a36      	ldr	r2, [pc, #216]	; (800098c <I2C_Init+0x140>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d80f      	bhi.n	80008d8 <I2C_Init+0x8c>
		// Standard mode
		ccr_value = RCC_GetPCLK1Value()/(2*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80008b8:	f7ff ff74 	bl	80007a4 <RCC_GetPCLK1Value>
 80008bc:	4602      	mov	r2, r0
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c8:	817b      	strh	r3, [r7, #10]
		temp |= (ccr_value & 0xFFF);
 80008ca:	897b      	ldrh	r3, [r7, #10]
 80008cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e02d      	b.n	8000934 <I2C_Init+0xe8>
	} else{
		// Fast mode
		temp |= (1 << 15);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008de:	60fb      	str	r3, [r7, #12]
		temp |= (pI2CxHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	895b      	ldrh	r3, [r3, #10]
 80008e4:	039b      	lsls	r3, r3, #14
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]

		if (pI2CxHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTYCLYCLE_2){
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	895b      	ldrh	r3, [r3, #10]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10b      	bne.n	800090e <I2C_Init+0xc2>
			ccr_value = RCC_GetPCLK1Value()/(3*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80008f6:	f7ff ff55 	bl	80007a4 <RCC_GetPCLK1Value>
 80008fa:	4601      	mov	r1, r0
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	fbb1 f3f3 	udiv	r3, r1, r3
 800090a:	817b      	strh	r3, [r7, #10]
 800090c:	e00c      	b.n	8000928 <I2C_Init+0xdc>
		} else {
			ccr_value = RCC_GetPCLK1Value()/(25*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 800090e:	f7ff ff49 	bl	80007a4 <RCC_GetPCLK1Value>
 8000912:	4601      	mov	r1, r0
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009a      	lsls	r2, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	fbb1 f3f3 	udiv	r3, r1, r3
 8000926:	817b      	strh	r3, [r7, #10]
		}
		temp |= (ccr_value & 0xFFF);
 8000928:	897b      	ldrh	r3, [r7, #10]
 800092a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->CCR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	61da      	str	r2, [r3, #28]

	// TRISE configuration

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <I2C_Init+0x140>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d809      	bhi.n	800095a <I2C_Init+0x10e>
		// Standard mode

		temp = (RCC_GetPCLK1Value()/ 1000000U) + 1; // This formula comes from the reference manual
 8000946:	f7ff ff2d 	bl	80007a4 <RCC_GetPCLK1Value>
 800094a:	4602      	mov	r2, r0
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <I2C_Init+0x13c>)
 800094e:	fba3 2302 	umull	r2, r3, r3, r2
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e00c      	b.n	8000974 <I2C_Init+0x128>

	} else {
		// Fast mode
		temp = (RCC_GetPCLK1Value()*300/ 1000000U) + 1;
 800095a:	f7ff ff23 	bl	80007a4 <RCC_GetPCLK1Value>
 800095e:	4602      	mov	r2, r0
 8000960:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000964:	fb03 f302 	mul.w	r3, r3, r2
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <I2C_Init+0x13c>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	0c9b      	lsrs	r3, r3, #18
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->TRISE = (temp & 0x3F);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800097e:	621a      	str	r2, [r3, #32]
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	431bde83 	.word	0x431bde83
 800098c:	000186a0 	.word	0x000186a0

08000990 <I2C_GetFlagStatus>:
 * @param [in]		Base Address of the SPI
 * @param [in]		Requested flag
 * @return			None
 * @note
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]

	if(pI2Cx->SR1 & FlagName){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	695a      	ldr	r2, [r3, #20]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <I2C_GetFlagStatus+0x1a>
		return FLAG_SET; // When the bit is one in that register
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <I2C_GetFlagStatus+0x1c>
	}

	return FLAG_RESET; // The programs loops in this state until it changes and the flag is set
 80009aa:	2300      	movs	r3, #0
 }
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr

080009b6 <I2C_MasterSendData>:
 * @param [in]		Length
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CxHandle, uint8_t *pTxBuffer, uint8_t length, uint8_t SlaveAddr, uint8_t Sr){
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b084      	sub	sp, #16
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	4611      	mov	r1, r2
 80009c2:	461a      	mov	r2, r3
 80009c4:	460b      	mov	r3, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71bb      	strb	r3, [r7, #6]

	// Generate start condition
	I2C_GenerateStartCondition(pI2CxHandle->pI2Cx);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fe27 	bl	8000624 <I2C_GenerateStartCondition>

	// Confirm that the START generation is completed by checking the SB flag in the in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_SB_FLAG)));
 80009d6:	bf00      	nop
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffd6 	bl	8000990 <I2C_GetFlagStatus>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f6      	beq.n	80009d8 <I2C_MasterSendData+0x22>

	// Send the address of the slave with the R/NW bit
	I2C_ExecuteAddressPhaseWrite(pI2CxHandle->pI2Cx, SlaveAddr);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe25 	bl	8000642 <I2C_ExecuteAddressPhaseWrite>

	// Confirm that address phase is completed by checking the ADDR flag in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_ADDR_FLAG)));
 80009f8:	bf00      	nop
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2102      	movs	r1, #2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffc5 	bl	8000990 <I2C_GetFlagStatus>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f6      	beq.n	80009fa <I2C_MasterSendData+0x44>

	// Clear ADDR flag
	I2C_ClearAddrFlag(pI2CxHandle);
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe42 	bl	8000696 <I2C_ClearAddrFlag>

	// Send data until length = 0
	while (length > 0){
 8000a12:	e014      	b.n	8000a3e <I2C_MasterSendData+0x88>
		while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_TXE_FLAG)));
 8000a14:	bf00      	nop
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffb7 	bl	8000990 <I2C_GetFlagStatus>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f6      	beq.n	8000a16 <I2C_MasterSendData+0x60>
		pI2CxHandle->pI2Cx->DR = *pTxBuffer;
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	611a      	str	r2, [r3, #16]
		pTxBuffer ++;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
		length--;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
	while (length > 0){
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1e7      	bne.n	8000a14 <I2C_MasterSendData+0x5e>
	}

	// When length = 0, Wait for TXE = 1 and BFT = 1 before generating the STOP condition
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_TXE_FLAG)));
 8000a44:	bf00      	nop
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff9f 	bl	8000990 <I2C_GetFlagStatus>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f6      	beq.n	8000a46 <I2C_MasterSendData+0x90>
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_BTF_FLAG)));
 8000a58:	bf00      	nop
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2104      	movs	r1, #4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff95 	bl	8000990 <I2C_GetFlagStatus>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f6      	beq.n	8000a5a <I2C_MasterSendData+0xa4>

	// Check if a re-start is needed
	if (Sr == I2C_NO_SR){
 8000a6c:	7e3b      	ldrb	r3, [r7, #24]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <I2C_MasterSendData+0xc6>
		// Generate STOP condition
		I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe44 	bl	8000704 <I2C_GenerateStopCondition>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <I2C_MasterReceiveData>:
 * @param [in]		Length
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CxHandle, uint8_t *pRxBuffer, uint8_t length, uint8_t SlaveAddr, uint8_t Sr){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	460b      	mov	r3, r1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	4613      	mov	r3, r2
 8000a98:	71bb      	strb	r3, [r7, #6]

	// Generate start condition
	I2C_GenerateStartCondition(pI2CxHandle->pI2Cx);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fdc0 	bl	8000624 <I2C_GenerateStartCondition>

	// Confirm that the START generation is completed by checking the SB flag in the in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_SB_FLAG)));
 8000aa4:	bf00      	nop
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2101      	movs	r1, #1
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff6f 	bl	8000990 <I2C_GetFlagStatus>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f6      	beq.n	8000aa6 <I2C_MasterReceiveData+0x22>

	// Send the address of the slave with the R/NW bit
	I2C_ExecuteAddressPhaseRead(pI2CxHandle->pI2Cx, SlaveAddr);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fdd3 	bl	800066c <I2C_ExecuteAddressPhaseRead>

	// Confirm that address phase is completed by checking the ADDR flag in the SR1 register
	while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_ADDR_FLAG)));
 8000ac6:	bf00      	nop
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff5e 	bl	8000990 <I2C_GetFlagStatus>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f6      	beq.n	8000ac8 <I2C_MasterReceiveData+0x44>

	// Procedure to read only 1 byte of data
	if (length == 1){
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d117      	bne.n	8000b10 <I2C_MasterReceiveData+0x8c>
		// Disable acking
		I2C_ManageAcking(pI2CxHandle->pI2Cx,I2C_ACK_DISABLE);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f86f 	bl	8000bca <I2C_ManageAcking>

		// Clear the ADDR flag
		I2C_ClearAddrFlag(pI2CxHandle);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f7ff fdd2 	bl	8000696 <I2C_ClearAddrFlag>

		// Check if a re-start is needed
		if (Sr == I2C_NO_SR){
 8000af2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d104      	bne.n	8000b04 <I2C_MasterReceiveData+0x80>
			// Generate STOP condition
			I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe00 	bl	8000704 <I2C_GenerateStopCondition>
		}

		// Read data into buffer
		*pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	701a      	strb	r2, [r3, #0]
	}

	if (length >1){
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d930      	bls.n	8000b78 <I2C_MasterReceiveData+0xf4>
		// Clear the ADDR flag
		I2C_ClearAddrFlag(pI2CxHandle);
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f7ff fdbd 	bl	8000696 <I2C_ClearAddrFlag>

		// Read data until length becomes 0
		for (uint32_t i = length; i > 0; i--){
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e027      	b.n	8000b72 <I2C_MasterReceiveData+0xee>

			// Wait until RXNE becomes 1
			while(!(I2C_GetFlagStatus(pI2CxHandle->pI2Cx, I2C_RXNE_FLAG)));
 8000b22:	bf00      	nop
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff ff30 	bl	8000990 <I2C_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f6      	beq.n	8000b24 <I2C_MasterReceiveData+0xa0>

			if (i == 2){
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d10e      	bne.n	8000b5a <I2C_MasterReceiveData+0xd6>
				// Disable acking
				I2C_ManageAcking(pI2CxHandle->pI2Cx,I2C_ACK_DISABLE);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f841 	bl	8000bca <I2C_ManageAcking>

				// Check if a re-start is needed
				if (Sr == I2C_NO_SR){
 8000b48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <I2C_MasterReceiveData+0xd6>
					// Generate STOP condition
					I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fdd5 	bl	8000704 <I2C_GenerateStopCondition>
				}
			}

			// Read data into buffer
			*pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	701a      	strb	r2, [r3, #0]

			// Increment the buffer address
			pRxBuffer++;
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
		for (uint32_t i = length; i > 0; i--){
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1d4      	bne.n	8000b22 <I2C_MasterReceiveData+0x9e>
		}

	}

	// Re-enable acking
	if (pI2CxHandle->I2C_Config.I2C_ACKControl == 1){
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	7a5b      	ldrb	r3, [r3, #9]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d105      	bne.n	8000b8c <I2C_MasterReceiveData+0x108>
		I2C_ManageAcking(pI2CxHandle->pI2Cx,I2C_ACK_ENABLE);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f81f 	bl	8000bca <I2C_ManageAcking>
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <I2C_PeripheralControl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000bb2:	e005      	b.n	8000bc0 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f023 0201 	bic.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <I2C_ManageAcking>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d106      	bne.n	8000bea <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000be8:	e005      	b.n	8000bf6 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <__libc_init_array>:
 8000c00:	b570      	push	{r4, r5, r6, lr}
 8000c02:	2500      	movs	r5, #0
 8000c04:	4e0c      	ldr	r6, [pc, #48]	; (8000c38 <__libc_init_array+0x38>)
 8000c06:	4c0d      	ldr	r4, [pc, #52]	; (8000c3c <__libc_init_array+0x3c>)
 8000c08:	1ba4      	subs	r4, r4, r6
 8000c0a:	10a4      	asrs	r4, r4, #2
 8000c0c:	42a5      	cmp	r5, r4
 8000c0e:	d109      	bne.n	8000c24 <__libc_init_array+0x24>
 8000c10:	f001 fa44 	bl	800209c <_init>
 8000c14:	2500      	movs	r5, #0
 8000c16:	4e0a      	ldr	r6, [pc, #40]	; (8000c40 <__libc_init_array+0x40>)
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <__libc_init_array+0x44>)
 8000c1a:	1ba4      	subs	r4, r4, r6
 8000c1c:	10a4      	asrs	r4, r4, #2
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d105      	bne.n	8000c2e <__libc_init_array+0x2e>
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
 8000c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c28:	4798      	blx	r3
 8000c2a:	3501      	adds	r5, #1
 8000c2c:	e7ee      	b.n	8000c0c <__libc_init_array+0xc>
 8000c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c32:	4798      	blx	r3
 8000c34:	3501      	adds	r5, #1
 8000c36:	e7f2      	b.n	8000c1e <__libc_init_array+0x1e>
 8000c38:	08002188 	.word	0x08002188
 8000c3c:	08002188 	.word	0x08002188
 8000c40:	08002188 	.word	0x08002188
 8000c44:	0800218c 	.word	0x0800218c

08000c48 <memset>:
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4402      	add	r2, r0
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d100      	bne.n	8000c52 <memset+0xa>
 8000c50:	4770      	bx	lr
 8000c52:	f803 1b01 	strb.w	r1, [r3], #1
 8000c56:	e7f9      	b.n	8000c4c <memset+0x4>

08000c58 <iprintf>:
 8000c58:	b40f      	push	{r0, r1, r2, r3}
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <iprintf+0x2c>)
 8000c5c:	b513      	push	{r0, r1, r4, lr}
 8000c5e:	681c      	ldr	r4, [r3, #0]
 8000c60:	b124      	cbz	r4, 8000c6c <iprintf+0x14>
 8000c62:	69a3      	ldr	r3, [r4, #24]
 8000c64:	b913      	cbnz	r3, 8000c6c <iprintf+0x14>
 8000c66:	4620      	mov	r0, r4
 8000c68:	f000 fa22 	bl	80010b0 <__sinit>
 8000c6c:	ab05      	add	r3, sp, #20
 8000c6e:	9a04      	ldr	r2, [sp, #16]
 8000c70:	68a1      	ldr	r1, [r4, #8]
 8000c72:	4620      	mov	r0, r4
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f000 fbd7 	bl	8001428 <_vfiprintf_r>
 8000c7a:	b002      	add	sp, #8
 8000c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c80:	b004      	add	sp, #16
 8000c82:	4770      	bx	lr
 8000c84:	20000018 	.word	0x20000018

08000c88 <_puts_r>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	460e      	mov	r6, r1
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	b118      	cbz	r0, 8000c98 <_puts_r+0x10>
 8000c90:	6983      	ldr	r3, [r0, #24]
 8000c92:	b90b      	cbnz	r3, 8000c98 <_puts_r+0x10>
 8000c94:	f000 fa0c 	bl	80010b0 <__sinit>
 8000c98:	69ab      	ldr	r3, [r5, #24]
 8000c9a:	68ac      	ldr	r4, [r5, #8]
 8000c9c:	b913      	cbnz	r3, 8000ca4 <_puts_r+0x1c>
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f000 fa06 	bl	80010b0 <__sinit>
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <_puts_r+0xac>)
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	d117      	bne.n	8000cda <_puts_r+0x52>
 8000caa:	686c      	ldr	r4, [r5, #4]
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	071b      	lsls	r3, r3, #28
 8000cb0:	d51d      	bpl.n	8000cee <_puts_r+0x66>
 8000cb2:	6923      	ldr	r3, [r4, #16]
 8000cb4:	b1db      	cbz	r3, 8000cee <_puts_r+0x66>
 8000cb6:	3e01      	subs	r6, #1
 8000cb8:	68a3      	ldr	r3, [r4, #8]
 8000cba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	60a3      	str	r3, [r4, #8]
 8000cc2:	b9e9      	cbnz	r1, 8000d00 <_puts_r+0x78>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	da2e      	bge.n	8000d26 <_puts_r+0x9e>
 8000cc8:	4622      	mov	r2, r4
 8000cca:	210a      	movs	r1, #10
 8000ccc:	4628      	mov	r0, r5
 8000cce:	f000 f83f 	bl	8000d50 <__swbuf_r>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	d011      	beq.n	8000cfa <_puts_r+0x72>
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	e011      	b.n	8000cfe <_puts_r+0x76>
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <_puts_r+0xb0>)
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d101      	bne.n	8000ce4 <_puts_r+0x5c>
 8000ce0:	68ac      	ldr	r4, [r5, #8]
 8000ce2:	e7e3      	b.n	8000cac <_puts_r+0x24>
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_puts_r+0xb4>)
 8000ce6:	429c      	cmp	r4, r3
 8000ce8:	bf08      	it	eq
 8000cea:	68ec      	ldreq	r4, [r5, #12]
 8000cec:	e7de      	b.n	8000cac <_puts_r+0x24>
 8000cee:	4621      	mov	r1, r4
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f000 f87f 	bl	8000df4 <__swsetup_r>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d0dd      	beq.n	8000cb6 <_puts_r+0x2e>
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	da04      	bge.n	8000d0e <_puts_r+0x86>
 8000d04:	69a2      	ldr	r2, [r4, #24]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dc06      	bgt.n	8000d18 <_puts_r+0x90>
 8000d0a:	290a      	cmp	r1, #10
 8000d0c:	d004      	beq.n	8000d18 <_puts_r+0x90>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	6022      	str	r2, [r4, #0]
 8000d14:	7019      	strb	r1, [r3, #0]
 8000d16:	e7cf      	b.n	8000cb8 <_puts_r+0x30>
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f000 f818 	bl	8000d50 <__swbuf_r>
 8000d20:	3001      	adds	r0, #1
 8000d22:	d1c9      	bne.n	8000cb8 <_puts_r+0x30>
 8000d24:	e7e9      	b.n	8000cfa <_puts_r+0x72>
 8000d26:	200a      	movs	r0, #10
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	6022      	str	r2, [r4, #0]
 8000d2e:	7018      	strb	r0, [r3, #0]
 8000d30:	e7e5      	b.n	8000cfe <_puts_r+0x76>
 8000d32:	bf00      	nop
 8000d34:	080020f8 	.word	0x080020f8
 8000d38:	08002118 	.word	0x08002118
 8000d3c:	080020d8 	.word	0x080020d8

08000d40 <puts>:
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <puts+0xc>)
 8000d42:	4601      	mov	r1, r0
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	f7ff bf9f 	b.w	8000c88 <_puts_r>
 8000d4a:	bf00      	nop
 8000d4c:	20000018 	.word	0x20000018

08000d50 <__swbuf_r>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	460e      	mov	r6, r1
 8000d54:	4614      	mov	r4, r2
 8000d56:	4605      	mov	r5, r0
 8000d58:	b118      	cbz	r0, 8000d62 <__swbuf_r+0x12>
 8000d5a:	6983      	ldr	r3, [r0, #24]
 8000d5c:	b90b      	cbnz	r3, 8000d62 <__swbuf_r+0x12>
 8000d5e:	f000 f9a7 	bl	80010b0 <__sinit>
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <__swbuf_r+0x98>)
 8000d64:	429c      	cmp	r4, r3
 8000d66:	d12a      	bne.n	8000dbe <__swbuf_r+0x6e>
 8000d68:	686c      	ldr	r4, [r5, #4]
 8000d6a:	69a3      	ldr	r3, [r4, #24]
 8000d6c:	60a3      	str	r3, [r4, #8]
 8000d6e:	89a3      	ldrh	r3, [r4, #12]
 8000d70:	071a      	lsls	r2, r3, #28
 8000d72:	d52e      	bpl.n	8000dd2 <__swbuf_r+0x82>
 8000d74:	6923      	ldr	r3, [r4, #16]
 8000d76:	b363      	cbz	r3, 8000dd2 <__swbuf_r+0x82>
 8000d78:	6923      	ldr	r3, [r4, #16]
 8000d7a:	6820      	ldr	r0, [r4, #0]
 8000d7c:	b2f6      	uxtb	r6, r6
 8000d7e:	1ac0      	subs	r0, r0, r3
 8000d80:	6963      	ldr	r3, [r4, #20]
 8000d82:	4637      	mov	r7, r6
 8000d84:	4283      	cmp	r3, r0
 8000d86:	dc04      	bgt.n	8000d92 <__swbuf_r+0x42>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f000 f926 	bl	8000fdc <_fflush_r>
 8000d90:	bb28      	cbnz	r0, 8000dde <__swbuf_r+0x8e>
 8000d92:	68a3      	ldr	r3, [r4, #8]
 8000d94:	3001      	adds	r0, #1
 8000d96:	3b01      	subs	r3, #1
 8000d98:	60a3      	str	r3, [r4, #8]
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	6022      	str	r2, [r4, #0]
 8000da0:	701e      	strb	r6, [r3, #0]
 8000da2:	6963      	ldr	r3, [r4, #20]
 8000da4:	4283      	cmp	r3, r0
 8000da6:	d004      	beq.n	8000db2 <__swbuf_r+0x62>
 8000da8:	89a3      	ldrh	r3, [r4, #12]
 8000daa:	07db      	lsls	r3, r3, #31
 8000dac:	d519      	bpl.n	8000de2 <__swbuf_r+0x92>
 8000dae:	2e0a      	cmp	r6, #10
 8000db0:	d117      	bne.n	8000de2 <__swbuf_r+0x92>
 8000db2:	4621      	mov	r1, r4
 8000db4:	4628      	mov	r0, r5
 8000db6:	f000 f911 	bl	8000fdc <_fflush_r>
 8000dba:	b190      	cbz	r0, 8000de2 <__swbuf_r+0x92>
 8000dbc:	e00f      	b.n	8000dde <__swbuf_r+0x8e>
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__swbuf_r+0x9c>)
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	d101      	bne.n	8000dc8 <__swbuf_r+0x78>
 8000dc4:	68ac      	ldr	r4, [r5, #8]
 8000dc6:	e7d0      	b.n	8000d6a <__swbuf_r+0x1a>
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <__swbuf_r+0xa0>)
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	bf08      	it	eq
 8000dce:	68ec      	ldreq	r4, [r5, #12]
 8000dd0:	e7cb      	b.n	8000d6a <__swbuf_r+0x1a>
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f000 f80d 	bl	8000df4 <__swsetup_r>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d0cc      	beq.n	8000d78 <__swbuf_r+0x28>
 8000dde:	f04f 37ff 	mov.w	r7, #4294967295
 8000de2:	4638      	mov	r0, r7
 8000de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	080020f8 	.word	0x080020f8
 8000dec:	08002118 	.word	0x08002118
 8000df0:	080020d8 	.word	0x080020d8

08000df4 <__swsetup_r>:
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <__swsetup_r+0xcc>)
 8000df6:	b570      	push	{r4, r5, r6, lr}
 8000df8:	681d      	ldr	r5, [r3, #0]
 8000dfa:	4606      	mov	r6, r0
 8000dfc:	460c      	mov	r4, r1
 8000dfe:	b125      	cbz	r5, 8000e0a <__swsetup_r+0x16>
 8000e00:	69ab      	ldr	r3, [r5, #24]
 8000e02:	b913      	cbnz	r3, 8000e0a <__swsetup_r+0x16>
 8000e04:	4628      	mov	r0, r5
 8000e06:	f000 f953 	bl	80010b0 <__sinit>
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <__swsetup_r+0xd0>)
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	d10f      	bne.n	8000e30 <__swsetup_r+0x3c>
 8000e10:	686c      	ldr	r4, [r5, #4]
 8000e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	0715      	lsls	r5, r2, #28
 8000e1a:	d42c      	bmi.n	8000e76 <__swsetup_r+0x82>
 8000e1c:	06d0      	lsls	r0, r2, #27
 8000e1e:	d411      	bmi.n	8000e44 <__swsetup_r+0x50>
 8000e20:	2209      	movs	r2, #9
 8000e22:	6032      	str	r2, [r6, #0]
 8000e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e28:	81a3      	strh	r3, [r4, #12]
 8000e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2e:	e03e      	b.n	8000eae <__swsetup_r+0xba>
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <__swsetup_r+0xd4>)
 8000e32:	429c      	cmp	r4, r3
 8000e34:	d101      	bne.n	8000e3a <__swsetup_r+0x46>
 8000e36:	68ac      	ldr	r4, [r5, #8]
 8000e38:	e7eb      	b.n	8000e12 <__swsetup_r+0x1e>
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <__swsetup_r+0xd8>)
 8000e3c:	429c      	cmp	r4, r3
 8000e3e:	bf08      	it	eq
 8000e40:	68ec      	ldreq	r4, [r5, #12]
 8000e42:	e7e6      	b.n	8000e12 <__swsetup_r+0x1e>
 8000e44:	0751      	lsls	r1, r2, #29
 8000e46:	d512      	bpl.n	8000e6e <__swsetup_r+0x7a>
 8000e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e4a:	b141      	cbz	r1, 8000e5e <__swsetup_r+0x6a>
 8000e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e50:	4299      	cmp	r1, r3
 8000e52:	d002      	beq.n	8000e5a <__swsetup_r+0x66>
 8000e54:	4630      	mov	r0, r6
 8000e56:	f000 fa19 	bl	800128c <_free_r>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8000e5e:	89a3      	ldrh	r3, [r4, #12]
 8000e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000e64:	81a3      	strh	r3, [r4, #12]
 8000e66:	2300      	movs	r3, #0
 8000e68:	6063      	str	r3, [r4, #4]
 8000e6a:	6923      	ldr	r3, [r4, #16]
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	89a3      	ldrh	r3, [r4, #12]
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	81a3      	strh	r3, [r4, #12]
 8000e76:	6923      	ldr	r3, [r4, #16]
 8000e78:	b94b      	cbnz	r3, 8000e8e <__swsetup_r+0x9a>
 8000e7a:	89a3      	ldrh	r3, [r4, #12]
 8000e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e84:	d003      	beq.n	8000e8e <__swsetup_r+0x9a>
 8000e86:	4621      	mov	r1, r4
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f000 f9bf 	bl	800120c <__smakebuf_r>
 8000e8e:	89a2      	ldrh	r2, [r4, #12]
 8000e90:	f012 0301 	ands.w	r3, r2, #1
 8000e94:	d00c      	beq.n	8000eb0 <__swsetup_r+0xbc>
 8000e96:	2300      	movs	r3, #0
 8000e98:	60a3      	str	r3, [r4, #8]
 8000e9a:	6963      	ldr	r3, [r4, #20]
 8000e9c:	425b      	negs	r3, r3
 8000e9e:	61a3      	str	r3, [r4, #24]
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	b953      	cbnz	r3, 8000eba <__swsetup_r+0xc6>
 8000ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ea8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000eac:	d1ba      	bne.n	8000e24 <__swsetup_r+0x30>
 8000eae:	bd70      	pop	{r4, r5, r6, pc}
 8000eb0:	0792      	lsls	r2, r2, #30
 8000eb2:	bf58      	it	pl
 8000eb4:	6963      	ldrpl	r3, [r4, #20]
 8000eb6:	60a3      	str	r3, [r4, #8]
 8000eb8:	e7f2      	b.n	8000ea0 <__swsetup_r+0xac>
 8000eba:	2000      	movs	r0, #0
 8000ebc:	e7f7      	b.n	8000eae <__swsetup_r+0xba>
 8000ebe:	bf00      	nop
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	080020f8 	.word	0x080020f8
 8000ec8:	08002118 	.word	0x08002118
 8000ecc:	080020d8 	.word	0x080020d8

08000ed0 <__sflush_r>:
 8000ed0:	898a      	ldrh	r2, [r1, #12]
 8000ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	0710      	lsls	r0, r2, #28
 8000eda:	460c      	mov	r4, r1
 8000edc:	d458      	bmi.n	8000f90 <__sflush_r+0xc0>
 8000ede:	684b      	ldr	r3, [r1, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dc05      	bgt.n	8000ef0 <__sflush_r+0x20>
 8000ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dc02      	bgt.n	8000ef0 <__sflush_r+0x20>
 8000eea:	2000      	movs	r0, #0
 8000eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ef2:	2e00      	cmp	r6, #0
 8000ef4:	d0f9      	beq.n	8000eea <__sflush_r+0x1a>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000efc:	682f      	ldr	r7, [r5, #0]
 8000efe:	6a21      	ldr	r1, [r4, #32]
 8000f00:	602b      	str	r3, [r5, #0]
 8000f02:	d032      	beq.n	8000f6a <__sflush_r+0x9a>
 8000f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f06:	89a3      	ldrh	r3, [r4, #12]
 8000f08:	075a      	lsls	r2, r3, #29
 8000f0a:	d505      	bpl.n	8000f18 <__sflush_r+0x48>
 8000f0c:	6863      	ldr	r3, [r4, #4]
 8000f0e:	1ac0      	subs	r0, r0, r3
 8000f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f12:	b10b      	cbz	r3, 8000f18 <__sflush_r+0x48>
 8000f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f16:	1ac0      	subs	r0, r0, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f1e:	6a21      	ldr	r1, [r4, #32]
 8000f20:	4628      	mov	r0, r5
 8000f22:	47b0      	blx	r6
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	d106      	bne.n	8000f38 <__sflush_r+0x68>
 8000f2a:	6829      	ldr	r1, [r5, #0]
 8000f2c:	291d      	cmp	r1, #29
 8000f2e:	d848      	bhi.n	8000fc2 <__sflush_r+0xf2>
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <__sflush_r+0x108>)
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	07d6      	lsls	r6, r2, #31
 8000f36:	d544      	bpl.n	8000fc2 <__sflush_r+0xf2>
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6062      	str	r2, [r4, #4]
 8000f3c:	6922      	ldr	r2, [r4, #16]
 8000f3e:	04d9      	lsls	r1, r3, #19
 8000f40:	6022      	str	r2, [r4, #0]
 8000f42:	d504      	bpl.n	8000f4e <__sflush_r+0x7e>
 8000f44:	1c42      	adds	r2, r0, #1
 8000f46:	d101      	bne.n	8000f4c <__sflush_r+0x7c>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	b903      	cbnz	r3, 8000f4e <__sflush_r+0x7e>
 8000f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8000f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f50:	602f      	str	r7, [r5, #0]
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d0c9      	beq.n	8000eea <__sflush_r+0x1a>
 8000f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d002      	beq.n	8000f64 <__sflush_r+0x94>
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f000 f994 	bl	800128c <_free_r>
 8000f64:	2000      	movs	r0, #0
 8000f66:	6360      	str	r0, [r4, #52]	; 0x34
 8000f68:	e7c0      	b.n	8000eec <__sflush_r+0x1c>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	47b0      	blx	r6
 8000f70:	1c41      	adds	r1, r0, #1
 8000f72:	d1c8      	bne.n	8000f06 <__sflush_r+0x36>
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0c5      	beq.n	8000f06 <__sflush_r+0x36>
 8000f7a:	2b1d      	cmp	r3, #29
 8000f7c:	d001      	beq.n	8000f82 <__sflush_r+0xb2>
 8000f7e:	2b16      	cmp	r3, #22
 8000f80:	d101      	bne.n	8000f86 <__sflush_r+0xb6>
 8000f82:	602f      	str	r7, [r5, #0]
 8000f84:	e7b1      	b.n	8000eea <__sflush_r+0x1a>
 8000f86:	89a3      	ldrh	r3, [r4, #12]
 8000f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8c:	81a3      	strh	r3, [r4, #12]
 8000f8e:	e7ad      	b.n	8000eec <__sflush_r+0x1c>
 8000f90:	690f      	ldr	r7, [r1, #16]
 8000f92:	2f00      	cmp	r7, #0
 8000f94:	d0a9      	beq.n	8000eea <__sflush_r+0x1a>
 8000f96:	0793      	lsls	r3, r2, #30
 8000f98:	bf18      	it	ne
 8000f9a:	2300      	movne	r3, #0
 8000f9c:	680e      	ldr	r6, [r1, #0]
 8000f9e:	bf08      	it	eq
 8000fa0:	694b      	ldreq	r3, [r1, #20]
 8000fa2:	eba6 0807 	sub.w	r8, r6, r7
 8000fa6:	600f      	str	r7, [r1, #0]
 8000fa8:	608b      	str	r3, [r1, #8]
 8000faa:	f1b8 0f00 	cmp.w	r8, #0
 8000fae:	dd9c      	ble.n	8000eea <__sflush_r+0x1a>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	463a      	mov	r2, r7
 8000fb4:	6a21      	ldr	r1, [r4, #32]
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000fba:	47b0      	blx	r6
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	dc06      	bgt.n	8000fce <__sflush_r+0xfe>
 8000fc0:	89a3      	ldrh	r3, [r4, #12]
 8000fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc6:	81a3      	strh	r3, [r4, #12]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	e78e      	b.n	8000eec <__sflush_r+0x1c>
 8000fce:	4407      	add	r7, r0
 8000fd0:	eba8 0800 	sub.w	r8, r8, r0
 8000fd4:	e7e9      	b.n	8000faa <__sflush_r+0xda>
 8000fd6:	bf00      	nop
 8000fd8:	20400001 	.word	0x20400001

08000fdc <_fflush_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	690b      	ldr	r3, [r1, #16]
 8000fe0:	4605      	mov	r5, r0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	b1db      	cbz	r3, 800101e <_fflush_r+0x42>
 8000fe6:	b118      	cbz	r0, 8000ff0 <_fflush_r+0x14>
 8000fe8:	6983      	ldr	r3, [r0, #24]
 8000fea:	b90b      	cbnz	r3, 8000ff0 <_fflush_r+0x14>
 8000fec:	f000 f860 	bl	80010b0 <__sinit>
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <_fflush_r+0x48>)
 8000ff2:	429c      	cmp	r4, r3
 8000ff4:	d109      	bne.n	800100a <_fflush_r+0x2e>
 8000ff6:	686c      	ldr	r4, [r5, #4]
 8000ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ffc:	b17b      	cbz	r3, 800101e <_fflush_r+0x42>
 8000ffe:	4621      	mov	r1, r4
 8001000:	4628      	mov	r0, r5
 8001002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001006:	f7ff bf63 	b.w	8000ed0 <__sflush_r>
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_fflush_r+0x4c>)
 800100c:	429c      	cmp	r4, r3
 800100e:	d101      	bne.n	8001014 <_fflush_r+0x38>
 8001010:	68ac      	ldr	r4, [r5, #8]
 8001012:	e7f1      	b.n	8000ff8 <_fflush_r+0x1c>
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <_fflush_r+0x50>)
 8001016:	429c      	cmp	r4, r3
 8001018:	bf08      	it	eq
 800101a:	68ec      	ldreq	r4, [r5, #12]
 800101c:	e7ec      	b.n	8000ff8 <_fflush_r+0x1c>
 800101e:	2000      	movs	r0, #0
 8001020:	bd38      	pop	{r3, r4, r5, pc}
 8001022:	bf00      	nop
 8001024:	080020f8 	.word	0x080020f8
 8001028:	08002118 	.word	0x08002118
 800102c:	080020d8 	.word	0x080020d8

08001030 <std>:
 8001030:	2300      	movs	r3, #0
 8001032:	b510      	push	{r4, lr}
 8001034:	4604      	mov	r4, r0
 8001036:	e9c0 3300 	strd	r3, r3, [r0]
 800103a:	6083      	str	r3, [r0, #8]
 800103c:	8181      	strh	r1, [r0, #12]
 800103e:	6643      	str	r3, [r0, #100]	; 0x64
 8001040:	81c2      	strh	r2, [r0, #14]
 8001042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001046:	6183      	str	r3, [r0, #24]
 8001048:	4619      	mov	r1, r3
 800104a:	2208      	movs	r2, #8
 800104c:	305c      	adds	r0, #92	; 0x5c
 800104e:	f7ff fdfb 	bl	8000c48 <memset>
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <std+0x38>)
 8001054:	6224      	str	r4, [r4, #32]
 8001056:	6263      	str	r3, [r4, #36]	; 0x24
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <std+0x3c>)
 800105a:	62a3      	str	r3, [r4, #40]	; 0x28
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <std+0x40>)
 800105e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <std+0x44>)
 8001062:	6323      	str	r3, [r4, #48]	; 0x30
 8001064:	bd10      	pop	{r4, pc}
 8001066:	bf00      	nop
 8001068:	08001985 	.word	0x08001985
 800106c:	080019a7 	.word	0x080019a7
 8001070:	080019df 	.word	0x080019df
 8001074:	08001a03 	.word	0x08001a03

08001078 <_cleanup_r>:
 8001078:	4901      	ldr	r1, [pc, #4]	; (8001080 <_cleanup_r+0x8>)
 800107a:	f000 b885 	b.w	8001188 <_fwalk_reent>
 800107e:	bf00      	nop
 8001080:	08000fdd 	.word	0x08000fdd

08001084 <__sfmoreglue>:
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	2568      	movs	r5, #104	; 0x68
 8001088:	1e4a      	subs	r2, r1, #1
 800108a:	4355      	muls	r5, r2
 800108c:	460e      	mov	r6, r1
 800108e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001092:	f000 f947 	bl	8001324 <_malloc_r>
 8001096:	4604      	mov	r4, r0
 8001098:	b140      	cbz	r0, 80010ac <__sfmoreglue+0x28>
 800109a:	2100      	movs	r1, #0
 800109c:	e9c0 1600 	strd	r1, r6, [r0]
 80010a0:	300c      	adds	r0, #12
 80010a2:	60a0      	str	r0, [r4, #8]
 80010a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80010a8:	f7ff fdce 	bl	8000c48 <memset>
 80010ac:	4620      	mov	r0, r4
 80010ae:	bd70      	pop	{r4, r5, r6, pc}

080010b0 <__sinit>:
 80010b0:	6983      	ldr	r3, [r0, #24]
 80010b2:	b510      	push	{r4, lr}
 80010b4:	4604      	mov	r4, r0
 80010b6:	bb33      	cbnz	r3, 8001106 <__sinit+0x56>
 80010b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80010bc:	6503      	str	r3, [r0, #80]	; 0x50
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <__sinit+0x58>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <__sinit+0x5c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6282      	str	r2, [r0, #40]	; 0x28
 80010c6:	4298      	cmp	r0, r3
 80010c8:	bf04      	itt	eq
 80010ca:	2301      	moveq	r3, #1
 80010cc:	6183      	streq	r3, [r0, #24]
 80010ce:	f000 f81f 	bl	8001110 <__sfp>
 80010d2:	6060      	str	r0, [r4, #4]
 80010d4:	4620      	mov	r0, r4
 80010d6:	f000 f81b 	bl	8001110 <__sfp>
 80010da:	60a0      	str	r0, [r4, #8]
 80010dc:	4620      	mov	r0, r4
 80010de:	f000 f817 	bl	8001110 <__sfp>
 80010e2:	2200      	movs	r2, #0
 80010e4:	60e0      	str	r0, [r4, #12]
 80010e6:	2104      	movs	r1, #4
 80010e8:	6860      	ldr	r0, [r4, #4]
 80010ea:	f7ff ffa1 	bl	8001030 <std>
 80010ee:	2201      	movs	r2, #1
 80010f0:	2109      	movs	r1, #9
 80010f2:	68a0      	ldr	r0, [r4, #8]
 80010f4:	f7ff ff9c 	bl	8001030 <std>
 80010f8:	2202      	movs	r2, #2
 80010fa:	2112      	movs	r1, #18
 80010fc:	68e0      	ldr	r0, [r4, #12]
 80010fe:	f7ff ff97 	bl	8001030 <std>
 8001102:	2301      	movs	r3, #1
 8001104:	61a3      	str	r3, [r4, #24]
 8001106:	bd10      	pop	{r4, pc}
 8001108:	080020d4 	.word	0x080020d4
 800110c:	08001079 	.word	0x08001079

08001110 <__sfp>:
 8001110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <__sfp+0x70>)
 8001114:	4607      	mov	r7, r0
 8001116:	681e      	ldr	r6, [r3, #0]
 8001118:	69b3      	ldr	r3, [r6, #24]
 800111a:	b913      	cbnz	r3, 8001122 <__sfp+0x12>
 800111c:	4630      	mov	r0, r6
 800111e:	f7ff ffc7 	bl	80010b0 <__sinit>
 8001122:	3648      	adds	r6, #72	; 0x48
 8001124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001128:	3b01      	subs	r3, #1
 800112a:	d503      	bpl.n	8001134 <__sfp+0x24>
 800112c:	6833      	ldr	r3, [r6, #0]
 800112e:	b133      	cbz	r3, 800113e <__sfp+0x2e>
 8001130:	6836      	ldr	r6, [r6, #0]
 8001132:	e7f7      	b.n	8001124 <__sfp+0x14>
 8001134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001138:	b16d      	cbz	r5, 8001156 <__sfp+0x46>
 800113a:	3468      	adds	r4, #104	; 0x68
 800113c:	e7f4      	b.n	8001128 <__sfp+0x18>
 800113e:	2104      	movs	r1, #4
 8001140:	4638      	mov	r0, r7
 8001142:	f7ff ff9f 	bl	8001084 <__sfmoreglue>
 8001146:	6030      	str	r0, [r6, #0]
 8001148:	2800      	cmp	r0, #0
 800114a:	d1f1      	bne.n	8001130 <__sfp+0x20>
 800114c:	230c      	movs	r3, #12
 800114e:	4604      	mov	r4, r0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4620      	mov	r0, r4
 8001154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <__sfp+0x74>)
 8001158:	6665      	str	r5, [r4, #100]	; 0x64
 800115a:	e9c4 5500 	strd	r5, r5, [r4]
 800115e:	60a5      	str	r5, [r4, #8]
 8001160:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001164:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001168:	2208      	movs	r2, #8
 800116a:	4629      	mov	r1, r5
 800116c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001170:	f7ff fd6a 	bl	8000c48 <memset>
 8001174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800117c:	e7e9      	b.n	8001152 <__sfp+0x42>
 800117e:	bf00      	nop
 8001180:	080020d4 	.word	0x080020d4
 8001184:	ffff0001 	.word	0xffff0001

08001188 <_fwalk_reent>:
 8001188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800118c:	4680      	mov	r8, r0
 800118e:	4689      	mov	r9, r1
 8001190:	2600      	movs	r6, #0
 8001192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001196:	b914      	cbnz	r4, 800119e <_fwalk_reent+0x16>
 8001198:	4630      	mov	r0, r6
 800119a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800119e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80011a2:	3f01      	subs	r7, #1
 80011a4:	d501      	bpl.n	80011aa <_fwalk_reent+0x22>
 80011a6:	6824      	ldr	r4, [r4, #0]
 80011a8:	e7f5      	b.n	8001196 <_fwalk_reent+0xe>
 80011aa:	89ab      	ldrh	r3, [r5, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d907      	bls.n	80011c0 <_fwalk_reent+0x38>
 80011b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011b4:	3301      	adds	r3, #1
 80011b6:	d003      	beq.n	80011c0 <_fwalk_reent+0x38>
 80011b8:	4629      	mov	r1, r5
 80011ba:	4640      	mov	r0, r8
 80011bc:	47c8      	blx	r9
 80011be:	4306      	orrs	r6, r0
 80011c0:	3568      	adds	r5, #104	; 0x68
 80011c2:	e7ee      	b.n	80011a2 <_fwalk_reent+0x1a>

080011c4 <__swhatbuf_r>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	460e      	mov	r6, r1
 80011c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011cc:	b096      	sub	sp, #88	; 0x58
 80011ce:	2900      	cmp	r1, #0
 80011d0:	4614      	mov	r4, r2
 80011d2:	461d      	mov	r5, r3
 80011d4:	da07      	bge.n	80011e6 <__swhatbuf_r+0x22>
 80011d6:	2300      	movs	r3, #0
 80011d8:	602b      	str	r3, [r5, #0]
 80011da:	89b3      	ldrh	r3, [r6, #12]
 80011dc:	061a      	lsls	r2, r3, #24
 80011de:	d410      	bmi.n	8001202 <__swhatbuf_r+0x3e>
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	e00e      	b.n	8001204 <__swhatbuf_r+0x40>
 80011e6:	466a      	mov	r2, sp
 80011e8:	f000 fc32 	bl	8001a50 <_fstat_r>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	dbf2      	blt.n	80011d6 <__swhatbuf_r+0x12>
 80011f0:	9a01      	ldr	r2, [sp, #4]
 80011f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80011f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80011fa:	425a      	negs	r2, r3
 80011fc:	415a      	adcs	r2, r3
 80011fe:	602a      	str	r2, [r5, #0]
 8001200:	e7ee      	b.n	80011e0 <__swhatbuf_r+0x1c>
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	2000      	movs	r0, #0
 8001206:	6023      	str	r3, [r4, #0]
 8001208:	b016      	add	sp, #88	; 0x58
 800120a:	bd70      	pop	{r4, r5, r6, pc}

0800120c <__smakebuf_r>:
 800120c:	898b      	ldrh	r3, [r1, #12]
 800120e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001210:	079d      	lsls	r5, r3, #30
 8001212:	4606      	mov	r6, r0
 8001214:	460c      	mov	r4, r1
 8001216:	d507      	bpl.n	8001228 <__smakebuf_r+0x1c>
 8001218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	6123      	str	r3, [r4, #16]
 8001220:	2301      	movs	r3, #1
 8001222:	6163      	str	r3, [r4, #20]
 8001224:	b002      	add	sp, #8
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	ab01      	add	r3, sp, #4
 800122a:	466a      	mov	r2, sp
 800122c:	f7ff ffca 	bl	80011c4 <__swhatbuf_r>
 8001230:	9900      	ldr	r1, [sp, #0]
 8001232:	4605      	mov	r5, r0
 8001234:	4630      	mov	r0, r6
 8001236:	f000 f875 	bl	8001324 <_malloc_r>
 800123a:	b948      	cbnz	r0, 8001250 <__smakebuf_r+0x44>
 800123c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001240:	059a      	lsls	r2, r3, #22
 8001242:	d4ef      	bmi.n	8001224 <__smakebuf_r+0x18>
 8001244:	f023 0303 	bic.w	r3, r3, #3
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	e7e3      	b.n	8001218 <__smakebuf_r+0xc>
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <__smakebuf_r+0x7c>)
 8001252:	62b3      	str	r3, [r6, #40]	; 0x28
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	6020      	str	r0, [r4, #0]
 8001258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	6120      	str	r0, [r4, #16]
 8001262:	6163      	str	r3, [r4, #20]
 8001264:	9b01      	ldr	r3, [sp, #4]
 8001266:	b15b      	cbz	r3, 8001280 <__smakebuf_r+0x74>
 8001268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800126c:	4630      	mov	r0, r6
 800126e:	f000 fc01 	bl	8001a74 <_isatty_r>
 8001272:	b128      	cbz	r0, 8001280 <__smakebuf_r+0x74>
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	81a3      	strh	r3, [r4, #12]
 8001280:	89a3      	ldrh	r3, [r4, #12]
 8001282:	431d      	orrs	r5, r3
 8001284:	81a5      	strh	r5, [r4, #12]
 8001286:	e7cd      	b.n	8001224 <__smakebuf_r+0x18>
 8001288:	08001079 	.word	0x08001079

0800128c <_free_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	4605      	mov	r5, r0
 8001290:	2900      	cmp	r1, #0
 8001292:	d043      	beq.n	800131c <_free_r+0x90>
 8001294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001298:	1f0c      	subs	r4, r1, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	bfb8      	it	lt
 800129e:	18e4      	addlt	r4, r4, r3
 80012a0:	f000 fc18 	bl	8001ad4 <__malloc_lock>
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <_free_r+0x94>)
 80012a6:	6813      	ldr	r3, [r2, #0]
 80012a8:	4610      	mov	r0, r2
 80012aa:	b933      	cbnz	r3, 80012ba <_free_r+0x2e>
 80012ac:	6063      	str	r3, [r4, #4]
 80012ae:	6014      	str	r4, [r2, #0]
 80012b0:	4628      	mov	r0, r5
 80012b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012b6:	f000 bc0e 	b.w	8001ad6 <__malloc_unlock>
 80012ba:	42a3      	cmp	r3, r4
 80012bc:	d90b      	bls.n	80012d6 <_free_r+0x4a>
 80012be:	6821      	ldr	r1, [r4, #0]
 80012c0:	1862      	adds	r2, r4, r1
 80012c2:	4293      	cmp	r3, r2
 80012c4:	bf01      	itttt	eq
 80012c6:	681a      	ldreq	r2, [r3, #0]
 80012c8:	685b      	ldreq	r3, [r3, #4]
 80012ca:	1852      	addeq	r2, r2, r1
 80012cc:	6022      	streq	r2, [r4, #0]
 80012ce:	6063      	str	r3, [r4, #4]
 80012d0:	6004      	str	r4, [r0, #0]
 80012d2:	e7ed      	b.n	80012b0 <_free_r+0x24>
 80012d4:	4613      	mov	r3, r2
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	b10a      	cbz	r2, 80012de <_free_r+0x52>
 80012da:	42a2      	cmp	r2, r4
 80012dc:	d9fa      	bls.n	80012d4 <_free_r+0x48>
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	1858      	adds	r0, r3, r1
 80012e2:	42a0      	cmp	r0, r4
 80012e4:	d10b      	bne.n	80012fe <_free_r+0x72>
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	4401      	add	r1, r0
 80012ea:	1858      	adds	r0, r3, r1
 80012ec:	4282      	cmp	r2, r0
 80012ee:	6019      	str	r1, [r3, #0]
 80012f0:	d1de      	bne.n	80012b0 <_free_r+0x24>
 80012f2:	6810      	ldr	r0, [r2, #0]
 80012f4:	6852      	ldr	r2, [r2, #4]
 80012f6:	4401      	add	r1, r0
 80012f8:	6019      	str	r1, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	e7d8      	b.n	80012b0 <_free_r+0x24>
 80012fe:	d902      	bls.n	8001306 <_free_r+0x7a>
 8001300:	230c      	movs	r3, #12
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	e7d4      	b.n	80012b0 <_free_r+0x24>
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	1821      	adds	r1, r4, r0
 800130a:	428a      	cmp	r2, r1
 800130c:	bf01      	itttt	eq
 800130e:	6811      	ldreq	r1, [r2, #0]
 8001310:	6852      	ldreq	r2, [r2, #4]
 8001312:	1809      	addeq	r1, r1, r0
 8001314:	6021      	streq	r1, [r4, #0]
 8001316:	6062      	str	r2, [r4, #4]
 8001318:	605c      	str	r4, [r3, #4]
 800131a:	e7c9      	b.n	80012b0 <_free_r+0x24>
 800131c:	bd38      	pop	{r3, r4, r5, pc}
 800131e:	bf00      	nop
 8001320:	200000a4 	.word	0x200000a4

08001324 <_malloc_r>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	1ccd      	adds	r5, r1, #3
 8001328:	f025 0503 	bic.w	r5, r5, #3
 800132c:	3508      	adds	r5, #8
 800132e:	2d0c      	cmp	r5, #12
 8001330:	bf38      	it	cc
 8001332:	250c      	movcc	r5, #12
 8001334:	2d00      	cmp	r5, #0
 8001336:	4606      	mov	r6, r0
 8001338:	db01      	blt.n	800133e <_malloc_r+0x1a>
 800133a:	42a9      	cmp	r1, r5
 800133c:	d903      	bls.n	8001346 <_malloc_r+0x22>
 800133e:	230c      	movs	r3, #12
 8001340:	6033      	str	r3, [r6, #0]
 8001342:	2000      	movs	r0, #0
 8001344:	bd70      	pop	{r4, r5, r6, pc}
 8001346:	f000 fbc5 	bl	8001ad4 <__malloc_lock>
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <_malloc_r+0xac>)
 800134c:	6814      	ldr	r4, [r2, #0]
 800134e:	4621      	mov	r1, r4
 8001350:	b991      	cbnz	r1, 8001378 <_malloc_r+0x54>
 8001352:	4c20      	ldr	r4, [pc, #128]	; (80013d4 <_malloc_r+0xb0>)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	b91b      	cbnz	r3, 8001360 <_malloc_r+0x3c>
 8001358:	4630      	mov	r0, r6
 800135a:	f000 fb03 	bl	8001964 <_sbrk_r>
 800135e:	6020      	str	r0, [r4, #0]
 8001360:	4629      	mov	r1, r5
 8001362:	4630      	mov	r0, r6
 8001364:	f000 fafe 	bl	8001964 <_sbrk_r>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	d124      	bne.n	80013b6 <_malloc_r+0x92>
 800136c:	230c      	movs	r3, #12
 800136e:	4630      	mov	r0, r6
 8001370:	6033      	str	r3, [r6, #0]
 8001372:	f000 fbb0 	bl	8001ad6 <__malloc_unlock>
 8001376:	e7e4      	b.n	8001342 <_malloc_r+0x1e>
 8001378:	680b      	ldr	r3, [r1, #0]
 800137a:	1b5b      	subs	r3, r3, r5
 800137c:	d418      	bmi.n	80013b0 <_malloc_r+0x8c>
 800137e:	2b0b      	cmp	r3, #11
 8001380:	d90f      	bls.n	80013a2 <_malloc_r+0x7e>
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	18cc      	adds	r4, r1, r3
 8001386:	50cd      	str	r5, [r1, r3]
 8001388:	4630      	mov	r0, r6
 800138a:	f000 fba4 	bl	8001ad6 <__malloc_unlock>
 800138e:	f104 000b 	add.w	r0, r4, #11
 8001392:	1d23      	adds	r3, r4, #4
 8001394:	f020 0007 	bic.w	r0, r0, #7
 8001398:	1ac3      	subs	r3, r0, r3
 800139a:	d0d3      	beq.n	8001344 <_malloc_r+0x20>
 800139c:	425a      	negs	r2, r3
 800139e:	50e2      	str	r2, [r4, r3]
 80013a0:	e7d0      	b.n	8001344 <_malloc_r+0x20>
 80013a2:	684b      	ldr	r3, [r1, #4]
 80013a4:	428c      	cmp	r4, r1
 80013a6:	bf16      	itet	ne
 80013a8:	6063      	strne	r3, [r4, #4]
 80013aa:	6013      	streq	r3, [r2, #0]
 80013ac:	460c      	movne	r4, r1
 80013ae:	e7eb      	b.n	8001388 <_malloc_r+0x64>
 80013b0:	460c      	mov	r4, r1
 80013b2:	6849      	ldr	r1, [r1, #4]
 80013b4:	e7cc      	b.n	8001350 <_malloc_r+0x2c>
 80013b6:	1cc4      	adds	r4, r0, #3
 80013b8:	f024 0403 	bic.w	r4, r4, #3
 80013bc:	42a0      	cmp	r0, r4
 80013be:	d005      	beq.n	80013cc <_malloc_r+0xa8>
 80013c0:	1a21      	subs	r1, r4, r0
 80013c2:	4630      	mov	r0, r6
 80013c4:	f000 face 	bl	8001964 <_sbrk_r>
 80013c8:	3001      	adds	r0, #1
 80013ca:	d0cf      	beq.n	800136c <_malloc_r+0x48>
 80013cc:	6025      	str	r5, [r4, #0]
 80013ce:	e7db      	b.n	8001388 <_malloc_r+0x64>
 80013d0:	200000a4 	.word	0x200000a4
 80013d4:	200000a8 	.word	0x200000a8

080013d8 <__sfputc_r>:
 80013d8:	6893      	ldr	r3, [r2, #8]
 80013da:	b410      	push	{r4}
 80013dc:	3b01      	subs	r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	6093      	str	r3, [r2, #8]
 80013e2:	da07      	bge.n	80013f4 <__sfputc_r+0x1c>
 80013e4:	6994      	ldr	r4, [r2, #24]
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	db01      	blt.n	80013ee <__sfputc_r+0x16>
 80013ea:	290a      	cmp	r1, #10
 80013ec:	d102      	bne.n	80013f4 <__sfputc_r+0x1c>
 80013ee:	bc10      	pop	{r4}
 80013f0:	f7ff bcae 	b.w	8000d50 <__swbuf_r>
 80013f4:	6813      	ldr	r3, [r2, #0]
 80013f6:	1c58      	adds	r0, r3, #1
 80013f8:	6010      	str	r0, [r2, #0]
 80013fa:	7019      	strb	r1, [r3, #0]
 80013fc:	4608      	mov	r0, r1
 80013fe:	bc10      	pop	{r4}
 8001400:	4770      	bx	lr

08001402 <__sfputs_r>:
 8001402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001404:	4606      	mov	r6, r0
 8001406:	460f      	mov	r7, r1
 8001408:	4614      	mov	r4, r2
 800140a:	18d5      	adds	r5, r2, r3
 800140c:	42ac      	cmp	r4, r5
 800140e:	d101      	bne.n	8001414 <__sfputs_r+0x12>
 8001410:	2000      	movs	r0, #0
 8001412:	e007      	b.n	8001424 <__sfputs_r+0x22>
 8001414:	463a      	mov	r2, r7
 8001416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff ffdc 	bl	80013d8 <__sfputc_r>
 8001420:	1c43      	adds	r3, r0, #1
 8001422:	d1f3      	bne.n	800140c <__sfputs_r+0xa>
 8001424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001428 <_vfiprintf_r>:
 8001428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142c:	460c      	mov	r4, r1
 800142e:	b09d      	sub	sp, #116	; 0x74
 8001430:	4617      	mov	r7, r2
 8001432:	461d      	mov	r5, r3
 8001434:	4606      	mov	r6, r0
 8001436:	b118      	cbz	r0, 8001440 <_vfiprintf_r+0x18>
 8001438:	6983      	ldr	r3, [r0, #24]
 800143a:	b90b      	cbnz	r3, 8001440 <_vfiprintf_r+0x18>
 800143c:	f7ff fe38 	bl	80010b0 <__sinit>
 8001440:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <_vfiprintf_r+0x20c>)
 8001442:	429c      	cmp	r4, r3
 8001444:	d158      	bne.n	80014f8 <_vfiprintf_r+0xd0>
 8001446:	6874      	ldr	r4, [r6, #4]
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	0718      	lsls	r0, r3, #28
 800144c:	d55e      	bpl.n	800150c <_vfiprintf_r+0xe4>
 800144e:	6923      	ldr	r3, [r4, #16]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <_vfiprintf_r+0xe4>
 8001454:	2300      	movs	r3, #0
 8001456:	9309      	str	r3, [sp, #36]	; 0x24
 8001458:	2320      	movs	r3, #32
 800145a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800145e:	2330      	movs	r3, #48	; 0x30
 8001460:	f04f 0b01 	mov.w	fp, #1
 8001464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001468:	9503      	str	r5, [sp, #12]
 800146a:	46b8      	mov	r8, r7
 800146c:	4645      	mov	r5, r8
 800146e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001472:	b10b      	cbz	r3, 8001478 <_vfiprintf_r+0x50>
 8001474:	2b25      	cmp	r3, #37	; 0x25
 8001476:	d154      	bne.n	8001522 <_vfiprintf_r+0xfa>
 8001478:	ebb8 0a07 	subs.w	sl, r8, r7
 800147c:	d00b      	beq.n	8001496 <_vfiprintf_r+0x6e>
 800147e:	4653      	mov	r3, sl
 8001480:	463a      	mov	r2, r7
 8001482:	4621      	mov	r1, r4
 8001484:	4630      	mov	r0, r6
 8001486:	f7ff ffbc 	bl	8001402 <__sfputs_r>
 800148a:	3001      	adds	r0, #1
 800148c:	f000 80c2 	beq.w	8001614 <_vfiprintf_r+0x1ec>
 8001490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001492:	4453      	add	r3, sl
 8001494:	9309      	str	r3, [sp, #36]	; 0x24
 8001496:	f898 3000 	ldrb.w	r3, [r8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80ba 	beq.w	8001614 <_vfiprintf_r+0x1ec>
 80014a0:	2300      	movs	r3, #0
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014aa:	9304      	str	r3, [sp, #16]
 80014ac:	9307      	str	r3, [sp, #28]
 80014ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014b2:	931a      	str	r3, [sp, #104]	; 0x68
 80014b4:	46a8      	mov	r8, r5
 80014b6:	2205      	movs	r2, #5
 80014b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80014bc:	485e      	ldr	r0, [pc, #376]	; (8001638 <_vfiprintf_r+0x210>)
 80014be:	f000 fafb 	bl	8001ab8 <memchr>
 80014c2:	9b04      	ldr	r3, [sp, #16]
 80014c4:	bb78      	cbnz	r0, 8001526 <_vfiprintf_r+0xfe>
 80014c6:	06d9      	lsls	r1, r3, #27
 80014c8:	bf44      	itt	mi
 80014ca:	2220      	movmi	r2, #32
 80014cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014d0:	071a      	lsls	r2, r3, #28
 80014d2:	bf44      	itt	mi
 80014d4:	222b      	movmi	r2, #43	; 0x2b
 80014d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014da:	782a      	ldrb	r2, [r5, #0]
 80014dc:	2a2a      	cmp	r2, #42	; 0x2a
 80014de:	d02a      	beq.n	8001536 <_vfiprintf_r+0x10e>
 80014e0:	46a8      	mov	r8, r5
 80014e2:	2000      	movs	r0, #0
 80014e4:	250a      	movs	r5, #10
 80014e6:	9a07      	ldr	r2, [sp, #28]
 80014e8:	4641      	mov	r1, r8
 80014ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014ee:	3b30      	subs	r3, #48	; 0x30
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d969      	bls.n	80015c8 <_vfiprintf_r+0x1a0>
 80014f4:	b360      	cbz	r0, 8001550 <_vfiprintf_r+0x128>
 80014f6:	e024      	b.n	8001542 <_vfiprintf_r+0x11a>
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <_vfiprintf_r+0x214>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d101      	bne.n	8001502 <_vfiprintf_r+0xda>
 80014fe:	68b4      	ldr	r4, [r6, #8]
 8001500:	e7a2      	b.n	8001448 <_vfiprintf_r+0x20>
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <_vfiprintf_r+0x218>)
 8001504:	429c      	cmp	r4, r3
 8001506:	bf08      	it	eq
 8001508:	68f4      	ldreq	r4, [r6, #12]
 800150a:	e79d      	b.n	8001448 <_vfiprintf_r+0x20>
 800150c:	4621      	mov	r1, r4
 800150e:	4630      	mov	r0, r6
 8001510:	f7ff fc70 	bl	8000df4 <__swsetup_r>
 8001514:	2800      	cmp	r0, #0
 8001516:	d09d      	beq.n	8001454 <_vfiprintf_r+0x2c>
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	b01d      	add	sp, #116	; 0x74
 800151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001522:	46a8      	mov	r8, r5
 8001524:	e7a2      	b.n	800146c <_vfiprintf_r+0x44>
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <_vfiprintf_r+0x210>)
 8001528:	4645      	mov	r5, r8
 800152a:	1a80      	subs	r0, r0, r2
 800152c:	fa0b f000 	lsl.w	r0, fp, r0
 8001530:	4318      	orrs	r0, r3
 8001532:	9004      	str	r0, [sp, #16]
 8001534:	e7be      	b.n	80014b4 <_vfiprintf_r+0x8c>
 8001536:	9a03      	ldr	r2, [sp, #12]
 8001538:	1d11      	adds	r1, r2, #4
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	9103      	str	r1, [sp, #12]
 800153e:	2a00      	cmp	r2, #0
 8001540:	db01      	blt.n	8001546 <_vfiprintf_r+0x11e>
 8001542:	9207      	str	r2, [sp, #28]
 8001544:	e004      	b.n	8001550 <_vfiprintf_r+0x128>
 8001546:	4252      	negs	r2, r2
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	9207      	str	r2, [sp, #28]
 800154e:	9304      	str	r3, [sp, #16]
 8001550:	f898 3000 	ldrb.w	r3, [r8]
 8001554:	2b2e      	cmp	r3, #46	; 0x2e
 8001556:	d10e      	bne.n	8001576 <_vfiprintf_r+0x14e>
 8001558:	f898 3001 	ldrb.w	r3, [r8, #1]
 800155c:	2b2a      	cmp	r3, #42	; 0x2a
 800155e:	d138      	bne.n	80015d2 <_vfiprintf_r+0x1aa>
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	f108 0802 	add.w	r8, r8, #2
 8001566:	1d1a      	adds	r2, r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	9203      	str	r2, [sp, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	bfb8      	it	lt
 8001570:	f04f 33ff 	movlt.w	r3, #4294967295
 8001574:	9305      	str	r3, [sp, #20]
 8001576:	4d33      	ldr	r5, [pc, #204]	; (8001644 <_vfiprintf_r+0x21c>)
 8001578:	2203      	movs	r2, #3
 800157a:	f898 1000 	ldrb.w	r1, [r8]
 800157e:	4628      	mov	r0, r5
 8001580:	f000 fa9a 	bl	8001ab8 <memchr>
 8001584:	b140      	cbz	r0, 8001598 <_vfiprintf_r+0x170>
 8001586:	2340      	movs	r3, #64	; 0x40
 8001588:	1b40      	subs	r0, r0, r5
 800158a:	fa03 f000 	lsl.w	r0, r3, r0
 800158e:	9b04      	ldr	r3, [sp, #16]
 8001590:	f108 0801 	add.w	r8, r8, #1
 8001594:	4303      	orrs	r3, r0
 8001596:	9304      	str	r3, [sp, #16]
 8001598:	f898 1000 	ldrb.w	r1, [r8]
 800159c:	2206      	movs	r2, #6
 800159e:	482a      	ldr	r0, [pc, #168]	; (8001648 <_vfiprintf_r+0x220>)
 80015a0:	f108 0701 	add.w	r7, r8, #1
 80015a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80015a8:	f000 fa86 	bl	8001ab8 <memchr>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d037      	beq.n	8001620 <_vfiprintf_r+0x1f8>
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <_vfiprintf_r+0x224>)
 80015b2:	bb1b      	cbnz	r3, 80015fc <_vfiprintf_r+0x1d4>
 80015b4:	9b03      	ldr	r3, [sp, #12]
 80015b6:	3307      	adds	r3, #7
 80015b8:	f023 0307 	bic.w	r3, r3, #7
 80015bc:	3308      	adds	r3, #8
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015c2:	444b      	add	r3, r9
 80015c4:	9309      	str	r3, [sp, #36]	; 0x24
 80015c6:	e750      	b.n	800146a <_vfiprintf_r+0x42>
 80015c8:	fb05 3202 	mla	r2, r5, r2, r3
 80015cc:	2001      	movs	r0, #1
 80015ce:	4688      	mov	r8, r1
 80015d0:	e78a      	b.n	80014e8 <_vfiprintf_r+0xc0>
 80015d2:	2300      	movs	r3, #0
 80015d4:	250a      	movs	r5, #10
 80015d6:	4619      	mov	r1, r3
 80015d8:	f108 0801 	add.w	r8, r8, #1
 80015dc:	9305      	str	r3, [sp, #20]
 80015de:	4640      	mov	r0, r8
 80015e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015e4:	3a30      	subs	r2, #48	; 0x30
 80015e6:	2a09      	cmp	r2, #9
 80015e8:	d903      	bls.n	80015f2 <_vfiprintf_r+0x1ca>
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0c3      	beq.n	8001576 <_vfiprintf_r+0x14e>
 80015ee:	9105      	str	r1, [sp, #20]
 80015f0:	e7c1      	b.n	8001576 <_vfiprintf_r+0x14e>
 80015f2:	fb05 2101 	mla	r1, r5, r1, r2
 80015f6:	2301      	movs	r3, #1
 80015f8:	4680      	mov	r8, r0
 80015fa:	e7f0      	b.n	80015de <_vfiprintf_r+0x1b6>
 80015fc:	ab03      	add	r3, sp, #12
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4622      	mov	r2, r4
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_vfiprintf_r+0x228>)
 8001604:	a904      	add	r1, sp, #16
 8001606:	4630      	mov	r0, r6
 8001608:	f3af 8000 	nop.w
 800160c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001610:	4681      	mov	r9, r0
 8001612:	d1d5      	bne.n	80015c0 <_vfiprintf_r+0x198>
 8001614:	89a3      	ldrh	r3, [r4, #12]
 8001616:	065b      	lsls	r3, r3, #25
 8001618:	f53f af7e 	bmi.w	8001518 <_vfiprintf_r+0xf0>
 800161c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800161e:	e77d      	b.n	800151c <_vfiprintf_r+0xf4>
 8001620:	ab03      	add	r3, sp, #12
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4622      	mov	r2, r4
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <_vfiprintf_r+0x228>)
 8001628:	a904      	add	r1, sp, #16
 800162a:	4630      	mov	r0, r6
 800162c:	f000 f888 	bl	8001740 <_printf_i>
 8001630:	e7ec      	b.n	800160c <_vfiprintf_r+0x1e4>
 8001632:	bf00      	nop
 8001634:	080020f8 	.word	0x080020f8
 8001638:	08002138 	.word	0x08002138
 800163c:	08002118 	.word	0x08002118
 8001640:	080020d8 	.word	0x080020d8
 8001644:	0800213e 	.word	0x0800213e
 8001648:	08002142 	.word	0x08002142
 800164c:	00000000 	.word	0x00000000
 8001650:	08001403 	.word	0x08001403

08001654 <_printf_common>:
 8001654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001658:	4691      	mov	r9, r2
 800165a:	461f      	mov	r7, r3
 800165c:	688a      	ldr	r2, [r1, #8]
 800165e:	690b      	ldr	r3, [r1, #16]
 8001660:	4606      	mov	r6, r0
 8001662:	4293      	cmp	r3, r2
 8001664:	bfb8      	it	lt
 8001666:	4613      	movlt	r3, r2
 8001668:	f8c9 3000 	str.w	r3, [r9]
 800166c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001670:	460c      	mov	r4, r1
 8001672:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001676:	b112      	cbz	r2, 800167e <_printf_common+0x2a>
 8001678:	3301      	adds	r3, #1
 800167a:	f8c9 3000 	str.w	r3, [r9]
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	0699      	lsls	r1, r3, #26
 8001682:	bf42      	ittt	mi
 8001684:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001688:	3302      	addmi	r3, #2
 800168a:	f8c9 3000 	strmi.w	r3, [r9]
 800168e:	6825      	ldr	r5, [r4, #0]
 8001690:	f015 0506 	ands.w	r5, r5, #6
 8001694:	d107      	bne.n	80016a6 <_printf_common+0x52>
 8001696:	f104 0a19 	add.w	sl, r4, #25
 800169a:	68e3      	ldr	r3, [r4, #12]
 800169c:	f8d9 2000 	ldr.w	r2, [r9]
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	42ab      	cmp	r3, r5
 80016a4:	dc29      	bgt.n	80016fa <_printf_common+0xa6>
 80016a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80016aa:	6822      	ldr	r2, [r4, #0]
 80016ac:	3300      	adds	r3, #0
 80016ae:	bf18      	it	ne
 80016b0:	2301      	movne	r3, #1
 80016b2:	0692      	lsls	r2, r2, #26
 80016b4:	d42e      	bmi.n	8001714 <_printf_common+0xc0>
 80016b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016ba:	4639      	mov	r1, r7
 80016bc:	4630      	mov	r0, r6
 80016be:	47c0      	blx	r8
 80016c0:	3001      	adds	r0, #1
 80016c2:	d021      	beq.n	8001708 <_printf_common+0xb4>
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	68e5      	ldr	r5, [r4, #12]
 80016c8:	f003 0306 	and.w	r3, r3, #6
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	bf18      	it	ne
 80016d0:	2500      	movne	r5, #0
 80016d2:	f8d9 2000 	ldr.w	r2, [r9]
 80016d6:	f04f 0900 	mov.w	r9, #0
 80016da:	bf08      	it	eq
 80016dc:	1aad      	subeq	r5, r5, r2
 80016de:	68a3      	ldr	r3, [r4, #8]
 80016e0:	6922      	ldr	r2, [r4, #16]
 80016e2:	bf08      	it	eq
 80016e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016e8:	4293      	cmp	r3, r2
 80016ea:	bfc4      	itt	gt
 80016ec:	1a9b      	subgt	r3, r3, r2
 80016ee:	18ed      	addgt	r5, r5, r3
 80016f0:	341a      	adds	r4, #26
 80016f2:	454d      	cmp	r5, r9
 80016f4:	d11a      	bne.n	800172c <_printf_common+0xd8>
 80016f6:	2000      	movs	r0, #0
 80016f8:	e008      	b.n	800170c <_printf_common+0xb8>
 80016fa:	2301      	movs	r3, #1
 80016fc:	4652      	mov	r2, sl
 80016fe:	4639      	mov	r1, r7
 8001700:	4630      	mov	r0, r6
 8001702:	47c0      	blx	r8
 8001704:	3001      	adds	r0, #1
 8001706:	d103      	bne.n	8001710 <_printf_common+0xbc>
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001710:	3501      	adds	r5, #1
 8001712:	e7c2      	b.n	800169a <_printf_common+0x46>
 8001714:	2030      	movs	r0, #48	; 0x30
 8001716:	18e1      	adds	r1, r4, r3
 8001718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001722:	4422      	add	r2, r4
 8001724:	3302      	adds	r3, #2
 8001726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800172a:	e7c4      	b.n	80016b6 <_printf_common+0x62>
 800172c:	2301      	movs	r3, #1
 800172e:	4622      	mov	r2, r4
 8001730:	4639      	mov	r1, r7
 8001732:	4630      	mov	r0, r6
 8001734:	47c0      	blx	r8
 8001736:	3001      	adds	r0, #1
 8001738:	d0e6      	beq.n	8001708 <_printf_common+0xb4>
 800173a:	f109 0901 	add.w	r9, r9, #1
 800173e:	e7d8      	b.n	80016f2 <_printf_common+0x9e>

08001740 <_printf_i>:
 8001740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001744:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001748:	460c      	mov	r4, r1
 800174a:	7e09      	ldrb	r1, [r1, #24]
 800174c:	b085      	sub	sp, #20
 800174e:	296e      	cmp	r1, #110	; 0x6e
 8001750:	4617      	mov	r7, r2
 8001752:	4606      	mov	r6, r0
 8001754:	4698      	mov	r8, r3
 8001756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001758:	f000 80b3 	beq.w	80018c2 <_printf_i+0x182>
 800175c:	d822      	bhi.n	80017a4 <_printf_i+0x64>
 800175e:	2963      	cmp	r1, #99	; 0x63
 8001760:	d036      	beq.n	80017d0 <_printf_i+0x90>
 8001762:	d80a      	bhi.n	800177a <_printf_i+0x3a>
 8001764:	2900      	cmp	r1, #0
 8001766:	f000 80b9 	beq.w	80018dc <_printf_i+0x19c>
 800176a:	2958      	cmp	r1, #88	; 0x58
 800176c:	f000 8083 	beq.w	8001876 <_printf_i+0x136>
 8001770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001774:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001778:	e032      	b.n	80017e0 <_printf_i+0xa0>
 800177a:	2964      	cmp	r1, #100	; 0x64
 800177c:	d001      	beq.n	8001782 <_printf_i+0x42>
 800177e:	2969      	cmp	r1, #105	; 0x69
 8001780:	d1f6      	bne.n	8001770 <_printf_i+0x30>
 8001782:	6820      	ldr	r0, [r4, #0]
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	0605      	lsls	r5, r0, #24
 8001788:	f103 0104 	add.w	r1, r3, #4
 800178c:	d52a      	bpl.n	80017e4 <_printf_i+0xa4>
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6011      	str	r1, [r2, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da03      	bge.n	800179e <_printf_i+0x5e>
 8001796:	222d      	movs	r2, #45	; 0x2d
 8001798:	425b      	negs	r3, r3
 800179a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800179e:	486f      	ldr	r0, [pc, #444]	; (800195c <_printf_i+0x21c>)
 80017a0:	220a      	movs	r2, #10
 80017a2:	e039      	b.n	8001818 <_printf_i+0xd8>
 80017a4:	2973      	cmp	r1, #115	; 0x73
 80017a6:	f000 809d 	beq.w	80018e4 <_printf_i+0x1a4>
 80017aa:	d808      	bhi.n	80017be <_printf_i+0x7e>
 80017ac:	296f      	cmp	r1, #111	; 0x6f
 80017ae:	d020      	beq.n	80017f2 <_printf_i+0xb2>
 80017b0:	2970      	cmp	r1, #112	; 0x70
 80017b2:	d1dd      	bne.n	8001770 <_printf_i+0x30>
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6023      	str	r3, [r4, #0]
 80017bc:	e003      	b.n	80017c6 <_printf_i+0x86>
 80017be:	2975      	cmp	r1, #117	; 0x75
 80017c0:	d017      	beq.n	80017f2 <_printf_i+0xb2>
 80017c2:	2978      	cmp	r1, #120	; 0x78
 80017c4:	d1d4      	bne.n	8001770 <_printf_i+0x30>
 80017c6:	2378      	movs	r3, #120	; 0x78
 80017c8:	4865      	ldr	r0, [pc, #404]	; (8001960 <_printf_i+0x220>)
 80017ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017ce:	e055      	b.n	800187c <_printf_i+0x13c>
 80017d0:	6813      	ldr	r3, [r2, #0]
 80017d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017d6:	1d19      	adds	r1, r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6011      	str	r1, [r2, #0]
 80017dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017e0:	2301      	movs	r3, #1
 80017e2:	e08c      	b.n	80018fe <_printf_i+0x1be>
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017ea:	6011      	str	r1, [r2, #0]
 80017ec:	bf18      	it	ne
 80017ee:	b21b      	sxthne	r3, r3
 80017f0:	e7cf      	b.n	8001792 <_printf_i+0x52>
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	6825      	ldr	r5, [r4, #0]
 80017f6:	1d18      	adds	r0, r3, #4
 80017f8:	6010      	str	r0, [r2, #0]
 80017fa:	0628      	lsls	r0, r5, #24
 80017fc:	d501      	bpl.n	8001802 <_printf_i+0xc2>
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e002      	b.n	8001808 <_printf_i+0xc8>
 8001802:	0668      	lsls	r0, r5, #25
 8001804:	d5fb      	bpl.n	80017fe <_printf_i+0xbe>
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	296f      	cmp	r1, #111	; 0x6f
 800180a:	bf14      	ite	ne
 800180c:	220a      	movne	r2, #10
 800180e:	2208      	moveq	r2, #8
 8001810:	4852      	ldr	r0, [pc, #328]	; (800195c <_printf_i+0x21c>)
 8001812:	2100      	movs	r1, #0
 8001814:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001818:	6865      	ldr	r5, [r4, #4]
 800181a:	2d00      	cmp	r5, #0
 800181c:	60a5      	str	r5, [r4, #8]
 800181e:	f2c0 8095 	blt.w	800194c <_printf_i+0x20c>
 8001822:	6821      	ldr	r1, [r4, #0]
 8001824:	f021 0104 	bic.w	r1, r1, #4
 8001828:	6021      	str	r1, [r4, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d13d      	bne.n	80018aa <_printf_i+0x16a>
 800182e:	2d00      	cmp	r5, #0
 8001830:	f040 808e 	bne.w	8001950 <_printf_i+0x210>
 8001834:	4665      	mov	r5, ip
 8001836:	2a08      	cmp	r2, #8
 8001838:	d10b      	bne.n	8001852 <_printf_i+0x112>
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	07db      	lsls	r3, r3, #31
 800183e:	d508      	bpl.n	8001852 <_printf_i+0x112>
 8001840:	6923      	ldr	r3, [r4, #16]
 8001842:	6862      	ldr	r2, [r4, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	bfde      	ittt	le
 8001848:	2330      	movle	r3, #48	; 0x30
 800184a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800184e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001852:	ebac 0305 	sub.w	r3, ip, r5
 8001856:	6123      	str	r3, [r4, #16]
 8001858:	f8cd 8000 	str.w	r8, [sp]
 800185c:	463b      	mov	r3, r7
 800185e:	aa03      	add	r2, sp, #12
 8001860:	4621      	mov	r1, r4
 8001862:	4630      	mov	r0, r6
 8001864:	f7ff fef6 	bl	8001654 <_printf_common>
 8001868:	3001      	adds	r0, #1
 800186a:	d14d      	bne.n	8001908 <_printf_i+0x1c8>
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	b005      	add	sp, #20
 8001872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001876:	4839      	ldr	r0, [pc, #228]	; (800195c <_printf_i+0x21c>)
 8001878:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800187c:	6813      	ldr	r3, [r2, #0]
 800187e:	6821      	ldr	r1, [r4, #0]
 8001880:	1d1d      	adds	r5, r3, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6015      	str	r5, [r2, #0]
 8001886:	060a      	lsls	r2, r1, #24
 8001888:	d50b      	bpl.n	80018a2 <_printf_i+0x162>
 800188a:	07ca      	lsls	r2, r1, #31
 800188c:	bf44      	itt	mi
 800188e:	f041 0120 	orrmi.w	r1, r1, #32
 8001892:	6021      	strmi	r1, [r4, #0]
 8001894:	b91b      	cbnz	r3, 800189e <_printf_i+0x15e>
 8001896:	6822      	ldr	r2, [r4, #0]
 8001898:	f022 0220 	bic.w	r2, r2, #32
 800189c:	6022      	str	r2, [r4, #0]
 800189e:	2210      	movs	r2, #16
 80018a0:	e7b7      	b.n	8001812 <_printf_i+0xd2>
 80018a2:	064d      	lsls	r5, r1, #25
 80018a4:	bf48      	it	mi
 80018a6:	b29b      	uxthmi	r3, r3
 80018a8:	e7ef      	b.n	800188a <_printf_i+0x14a>
 80018aa:	4665      	mov	r5, ip
 80018ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80018b0:	fb02 3311 	mls	r3, r2, r1, r3
 80018b4:	5cc3      	ldrb	r3, [r0, r3]
 80018b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80018ba:	460b      	mov	r3, r1
 80018bc:	2900      	cmp	r1, #0
 80018be:	d1f5      	bne.n	80018ac <_printf_i+0x16c>
 80018c0:	e7b9      	b.n	8001836 <_printf_i+0xf6>
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	6825      	ldr	r5, [r4, #0]
 80018c6:	1d18      	adds	r0, r3, #4
 80018c8:	6961      	ldr	r1, [r4, #20]
 80018ca:	6010      	str	r0, [r2, #0]
 80018cc:	0628      	lsls	r0, r5, #24
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	d501      	bpl.n	80018d6 <_printf_i+0x196>
 80018d2:	6019      	str	r1, [r3, #0]
 80018d4:	e002      	b.n	80018dc <_printf_i+0x19c>
 80018d6:	066a      	lsls	r2, r5, #25
 80018d8:	d5fb      	bpl.n	80018d2 <_printf_i+0x192>
 80018da:	8019      	strh	r1, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	4665      	mov	r5, ip
 80018e0:	6123      	str	r3, [r4, #16]
 80018e2:	e7b9      	b.n	8001858 <_printf_i+0x118>
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	1d19      	adds	r1, r3, #4
 80018e8:	6011      	str	r1, [r2, #0]
 80018ea:	681d      	ldr	r5, [r3, #0]
 80018ec:	6862      	ldr	r2, [r4, #4]
 80018ee:	2100      	movs	r1, #0
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 f8e1 	bl	8001ab8 <memchr>
 80018f6:	b108      	cbz	r0, 80018fc <_printf_i+0x1bc>
 80018f8:	1b40      	subs	r0, r0, r5
 80018fa:	6060      	str	r0, [r4, #4]
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	6123      	str	r3, [r4, #16]
 8001900:	2300      	movs	r3, #0
 8001902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001906:	e7a7      	b.n	8001858 <_printf_i+0x118>
 8001908:	6923      	ldr	r3, [r4, #16]
 800190a:	462a      	mov	r2, r5
 800190c:	4639      	mov	r1, r7
 800190e:	4630      	mov	r0, r6
 8001910:	47c0      	blx	r8
 8001912:	3001      	adds	r0, #1
 8001914:	d0aa      	beq.n	800186c <_printf_i+0x12c>
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	079b      	lsls	r3, r3, #30
 800191a:	d413      	bmi.n	8001944 <_printf_i+0x204>
 800191c:	68e0      	ldr	r0, [r4, #12]
 800191e:	9b03      	ldr	r3, [sp, #12]
 8001920:	4298      	cmp	r0, r3
 8001922:	bfb8      	it	lt
 8001924:	4618      	movlt	r0, r3
 8001926:	e7a3      	b.n	8001870 <_printf_i+0x130>
 8001928:	2301      	movs	r3, #1
 800192a:	464a      	mov	r2, r9
 800192c:	4639      	mov	r1, r7
 800192e:	4630      	mov	r0, r6
 8001930:	47c0      	blx	r8
 8001932:	3001      	adds	r0, #1
 8001934:	d09a      	beq.n	800186c <_printf_i+0x12c>
 8001936:	3501      	adds	r5, #1
 8001938:	68e3      	ldr	r3, [r4, #12]
 800193a:	9a03      	ldr	r2, [sp, #12]
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	42ab      	cmp	r3, r5
 8001940:	dcf2      	bgt.n	8001928 <_printf_i+0x1e8>
 8001942:	e7eb      	b.n	800191c <_printf_i+0x1dc>
 8001944:	2500      	movs	r5, #0
 8001946:	f104 0919 	add.w	r9, r4, #25
 800194a:	e7f5      	b.n	8001938 <_printf_i+0x1f8>
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ac      	bne.n	80018aa <_printf_i+0x16a>
 8001950:	7803      	ldrb	r3, [r0, #0]
 8001952:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800195a:	e76c      	b.n	8001836 <_printf_i+0xf6>
 800195c:	08002149 	.word	0x08002149
 8001960:	0800215a 	.word	0x0800215a

08001964 <_sbrk_r>:
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	2300      	movs	r3, #0
 8001968:	4c05      	ldr	r4, [pc, #20]	; (8001980 <_sbrk_r+0x1c>)
 800196a:	4605      	mov	r5, r0
 800196c:	4608      	mov	r0, r1
 800196e:	6023      	str	r3, [r4, #0]
 8001970:	f000 f9ca 	bl	8001d08 <_sbrk>
 8001974:	1c43      	adds	r3, r0, #1
 8001976:	d102      	bne.n	800197e <_sbrk_r+0x1a>
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	b103      	cbz	r3, 800197e <_sbrk_r+0x1a>
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	200001a4 	.word	0x200001a4

08001984 <__sread>:
 8001984:	b510      	push	{r4, lr}
 8001986:	460c      	mov	r4, r1
 8001988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198c:	f000 f8a4 	bl	8001ad8 <_read_r>
 8001990:	2800      	cmp	r0, #0
 8001992:	bfab      	itete	ge
 8001994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001996:	89a3      	ldrhlt	r3, [r4, #12]
 8001998:	181b      	addge	r3, r3, r0
 800199a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800199e:	bfac      	ite	ge
 80019a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80019a2:	81a3      	strhlt	r3, [r4, #12]
 80019a4:	bd10      	pop	{r4, pc}

080019a6 <__swrite>:
 80019a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019aa:	461f      	mov	r7, r3
 80019ac:	898b      	ldrh	r3, [r1, #12]
 80019ae:	4605      	mov	r5, r0
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	460c      	mov	r4, r1
 80019b4:	4616      	mov	r6, r2
 80019b6:	d505      	bpl.n	80019c4 <__swrite+0x1e>
 80019b8:	2302      	movs	r3, #2
 80019ba:	2200      	movs	r2, #0
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	f000 f868 	bl	8001a94 <_lseek_r>
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	4632      	mov	r2, r6
 80019c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019cc:	81a3      	strh	r3, [r4, #12]
 80019ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019d2:	463b      	mov	r3, r7
 80019d4:	4628      	mov	r0, r5
 80019d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019da:	f000 b817 	b.w	8001a0c <_write_r>

080019de <__sseek>:
 80019de:	b510      	push	{r4, lr}
 80019e0:	460c      	mov	r4, r1
 80019e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e6:	f000 f855 	bl	8001a94 <_lseek_r>
 80019ea:	1c43      	adds	r3, r0, #1
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	bf15      	itete	ne
 80019f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80019f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019fa:	81a3      	strheq	r3, [r4, #12]
 80019fc:	bf18      	it	ne
 80019fe:	81a3      	strhne	r3, [r4, #12]
 8001a00:	bd10      	pop	{r4, pc}

08001a02 <__sclose>:
 8001a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a06:	f000 b813 	b.w	8001a30 <_close_r>
	...

08001a0c <_write_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4605      	mov	r5, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	4c05      	ldr	r4, [pc, #20]	; (8001a2c <_write_r+0x20>)
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f000 f91f 	bl	8001c5e <_write>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_write_r+0x1e>
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_write_r+0x1e>
 8001a28:	602b      	str	r3, [r5, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	200001a4 	.word	0x200001a4

08001a30 <_close_r>:
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	2300      	movs	r3, #0
 8001a34:	4c05      	ldr	r4, [pc, #20]	; (8001a4c <_close_r+0x1c>)
 8001a36:	4605      	mov	r5, r0
 8001a38:	4608      	mov	r0, r1
 8001a3a:	6023      	str	r3, [r4, #0]
 8001a3c:	f000 f93e 	bl	8001cbc <_close>
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	d102      	bne.n	8001a4a <_close_r+0x1a>
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	b103      	cbz	r3, 8001a4a <_close_r+0x1a>
 8001a48:	602b      	str	r3, [r5, #0]
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	200001a4 	.word	0x200001a4

08001a50 <_fstat_r>:
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	2300      	movs	r3, #0
 8001a54:	4c06      	ldr	r4, [pc, #24]	; (8001a70 <_fstat_r+0x20>)
 8001a56:	4605      	mov	r5, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	f000 f998 	bl	8001d92 <_fstat>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d102      	bne.n	8001a6c <_fstat_r+0x1c>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	b103      	cbz	r3, 8001a6c <_fstat_r+0x1c>
 8001a6a:	602b      	str	r3, [r5, #0]
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001a4 	.word	0x200001a4

08001a74 <_isatty_r>:
 8001a74:	b538      	push	{r3, r4, r5, lr}
 8001a76:	2300      	movs	r3, #0
 8001a78:	4c05      	ldr	r4, [pc, #20]	; (8001a90 <_isatty_r+0x1c>)
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	f000 faea 	bl	8002058 <_isatty>
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	d102      	bne.n	8001a8e <_isatty_r+0x1a>
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	b103      	cbz	r3, 8001a8e <_isatty_r+0x1a>
 8001a8c:	602b      	str	r3, [r5, #0]
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	200001a4 	.word	0x200001a4

08001a94 <_lseek_r>:
 8001a94:	b538      	push	{r3, r4, r5, lr}
 8001a96:	4605      	mov	r5, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4c05      	ldr	r4, [pc, #20]	; (8001ab4 <_lseek_r+0x20>)
 8001aa0:	6022      	str	r2, [r4, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f000 f8c9 	bl	8001c3a <_lseek>
 8001aa8:	1c43      	adds	r3, r0, #1
 8001aaa:	d102      	bne.n	8001ab2 <_lseek_r+0x1e>
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	b103      	cbz	r3, 8001ab2 <_lseek_r+0x1e>
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	200001a4 	.word	0x200001a4

08001ab8 <memchr>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	b2c9      	uxtb	r1, r1
 8001abc:	4402      	add	r2, r0
 8001abe:	4290      	cmp	r0, r2
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	d101      	bne.n	8001ac8 <memchr+0x10>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e003      	b.n	8001ad0 <memchr+0x18>
 8001ac8:	781c      	ldrb	r4, [r3, #0]
 8001aca:	3001      	adds	r0, #1
 8001acc:	428c      	cmp	r4, r1
 8001ace:	d1f6      	bne.n	8001abe <memchr+0x6>
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <__malloc_lock>:
 8001ad4:	4770      	bx	lr

08001ad6 <__malloc_unlock>:
 8001ad6:	4770      	bx	lr

08001ad8 <_read_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	4605      	mov	r5, r0
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4c05      	ldr	r4, [pc, #20]	; (8001af8 <_read_r+0x20>)
 8001ae4:	6022      	str	r2, [r4, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f000 f850 	bl	8001b8c <_read>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_read_r+0x1e>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_read_r+0x1e>
 8001af4:	602b      	str	r3, [r5, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	200001a4 	.word	0x200001a4

08001afc <findslot>:
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <findslot+0x2c>)
 8001afe:	b510      	push	{r4, lr}
 8001b00:	4604      	mov	r4, r0
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	b118      	cbz	r0, 8001b0e <findslot+0x12>
 8001b06:	6983      	ldr	r3, [r0, #24]
 8001b08:	b90b      	cbnz	r3, 8001b0e <findslot+0x12>
 8001b0a:	f7ff fad1 	bl	80010b0 <__sinit>
 8001b0e:	2c13      	cmp	r4, #19
 8001b10:	d807      	bhi.n	8001b22 <findslot+0x26>
 8001b12:	4806      	ldr	r0, [pc, #24]	; (8001b2c <findslot+0x30>)
 8001b14:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	d002      	beq.n	8001b22 <findslot+0x26>
 8001b1c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	2000      	movs	r0, #0
 8001b24:	e7fc      	b.n	8001b20 <findslot+0x24>
 8001b26:	bf00      	nop
 8001b28:	20000018 	.word	0x20000018
 8001b2c:	200000bc 	.word	0x200000bc

08001b30 <checkerror>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	1c43      	adds	r3, r0, #1
 8001b34:	4605      	mov	r5, r0
 8001b36:	d109      	bne.n	8001b4c <checkerror+0x1c>
 8001b38:	f000 faaa 	bl	8002090 <__errno>
 8001b3c:	2413      	movs	r4, #19
 8001b3e:	4606      	mov	r6, r0
 8001b40:	2700      	movs	r7, #0
 8001b42:	4620      	mov	r0, r4
 8001b44:	4639      	mov	r1, r7
 8001b46:	beab      	bkpt	0x00ab
 8001b48:	4604      	mov	r4, r0
 8001b4a:	6034      	str	r4, [r6, #0]
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b50 <error>:
 8001b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b52:	4605      	mov	r5, r0
 8001b54:	f000 fa9c 	bl	8002090 <__errno>
 8001b58:	2413      	movs	r4, #19
 8001b5a:	4606      	mov	r6, r0
 8001b5c:	2700      	movs	r7, #0
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4639      	mov	r1, r7
 8001b62:	beab      	bkpt	0x00ab
 8001b64:	4604      	mov	r4, r0
 8001b66:	6034      	str	r4, [r6, #0]
 8001b68:	4628      	mov	r0, r5
 8001b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b6c <_swiread>:
 8001b6c:	b530      	push	{r4, r5, lr}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001b74:	9203      	str	r2, [sp, #12]
 8001b76:	2406      	movs	r4, #6
 8001b78:	ad01      	add	r5, sp, #4
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	beab      	bkpt	0x00ab
 8001b80:	4604      	mov	r4, r0
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff ffd4 	bl	8001b30 <checkerror>
 8001b88:	b005      	add	sp, #20
 8001b8a:	bd30      	pop	{r4, r5, pc}

08001b8c <_read>:
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	460e      	mov	r6, r1
 8001b90:	4615      	mov	r5, r2
 8001b92:	f7ff ffb3 	bl	8001afc <findslot>
 8001b96:	4604      	mov	r4, r0
 8001b98:	b930      	cbnz	r0, 8001ba8 <_read+0x1c>
 8001b9a:	f000 fa79 	bl	8002090 <__errno>
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	6003      	str	r3, [r0, #0]
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
 8001ba8:	462a      	mov	r2, r5
 8001baa:	4631      	mov	r1, r6
 8001bac:	6800      	ldr	r0, [r0, #0]
 8001bae:	f7ff ffdd 	bl	8001b6c <_swiread>
 8001bb2:	1c43      	adds	r3, r0, #1
 8001bb4:	bf1f      	itttt	ne
 8001bb6:	6863      	ldrne	r3, [r4, #4]
 8001bb8:	1a28      	subne	r0, r5, r0
 8001bba:	181b      	addne	r3, r3, r0
 8001bbc:	6063      	strne	r3, [r4, #4]
 8001bbe:	e7f2      	b.n	8001ba6 <_read+0x1a>

08001bc0 <_swilseek>:
 8001bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	4616      	mov	r6, r2
 8001bc6:	f7ff ff99 	bl	8001afc <findslot>
 8001bca:	4605      	mov	r5, r0
 8001bcc:	b940      	cbnz	r0, 8001be0 <_swilseek+0x20>
 8001bce:	f000 fa5f 	bl	8002090 <__errno>
 8001bd2:	2309      	movs	r3, #9
 8001bd4:	6003      	str	r3, [r0, #0]
 8001bd6:	f04f 34ff 	mov.w	r4, #4294967295
 8001bda:	4620      	mov	r0, r4
 8001bdc:	b003      	add	sp, #12
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be0:	2e02      	cmp	r6, #2
 8001be2:	d903      	bls.n	8001bec <_swilseek+0x2c>
 8001be4:	f000 fa54 	bl	8002090 <__errno>
 8001be8:	2316      	movs	r3, #22
 8001bea:	e7f3      	b.n	8001bd4 <_swilseek+0x14>
 8001bec:	2e01      	cmp	r6, #1
 8001bee:	d112      	bne.n	8001c16 <_swilseek+0x56>
 8001bf0:	6843      	ldr	r3, [r0, #4]
 8001bf2:	18e4      	adds	r4, r4, r3
 8001bf4:	d4f6      	bmi.n	8001be4 <_swilseek+0x24>
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	260a      	movs	r6, #10
 8001bfa:	e9cd 3400 	strd	r3, r4, [sp]
 8001bfe:	466f      	mov	r7, sp
 8001c00:	4630      	mov	r0, r6
 8001c02:	4639      	mov	r1, r7
 8001c04:	beab      	bkpt	0x00ab
 8001c06:	4606      	mov	r6, r0
 8001c08:	4630      	mov	r0, r6
 8001c0a:	f7ff ff91 	bl	8001b30 <checkerror>
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	dbe1      	blt.n	8001bd6 <_swilseek+0x16>
 8001c12:	606c      	str	r4, [r5, #4]
 8001c14:	e7e1      	b.n	8001bda <_swilseek+0x1a>
 8001c16:	2e02      	cmp	r6, #2
 8001c18:	d1ed      	bne.n	8001bf6 <_swilseek+0x36>
 8001c1a:	6803      	ldr	r3, [r0, #0]
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001c22:	260c      	movs	r6, #12
 8001c24:	4630      	mov	r0, r6
 8001c26:	4639      	mov	r1, r7
 8001c28:	beab      	bkpt	0x00ab
 8001c2a:	4606      	mov	r6, r0
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f7ff ff7f 	bl	8001b30 <checkerror>
 8001c32:	1c43      	adds	r3, r0, #1
 8001c34:	d0cf      	beq.n	8001bd6 <_swilseek+0x16>
 8001c36:	4404      	add	r4, r0
 8001c38:	e7dd      	b.n	8001bf6 <_swilseek+0x36>

08001c3a <_lseek>:
 8001c3a:	f7ff bfc1 	b.w	8001bc0 <_swilseek>

08001c3e <_swiwrite>:
 8001c3e:	b530      	push	{r4, r5, lr}
 8001c40:	b085      	sub	sp, #20
 8001c42:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c46:	9203      	str	r2, [sp, #12]
 8001c48:	2405      	movs	r4, #5
 8001c4a:	ad01      	add	r5, sp, #4
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	beab      	bkpt	0x00ab
 8001c52:	4604      	mov	r4, r0
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff ff6b 	bl	8001b30 <checkerror>
 8001c5a:	b005      	add	sp, #20
 8001c5c:	bd30      	pop	{r4, r5, pc}

08001c5e <_write>:
 8001c5e:	b570      	push	{r4, r5, r6, lr}
 8001c60:	460e      	mov	r6, r1
 8001c62:	4615      	mov	r5, r2
 8001c64:	f7ff ff4a 	bl	8001afc <findslot>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	b930      	cbnz	r0, 8001c7a <_write+0x1c>
 8001c6c:	f000 fa10 	bl	8002090 <__errno>
 8001c70:	2309      	movs	r3, #9
 8001c72:	6003      	str	r3, [r0, #0]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	bd70      	pop	{r4, r5, r6, pc}
 8001c7a:	462a      	mov	r2, r5
 8001c7c:	4631      	mov	r1, r6
 8001c7e:	6800      	ldr	r0, [r0, #0]
 8001c80:	f7ff ffdd 	bl	8001c3e <_swiwrite>
 8001c84:	1e02      	subs	r2, r0, #0
 8001c86:	dbf5      	blt.n	8001c74 <_write+0x16>
 8001c88:	6863      	ldr	r3, [r4, #4]
 8001c8a:	1aa8      	subs	r0, r5, r2
 8001c8c:	4403      	add	r3, r0
 8001c8e:	42aa      	cmp	r2, r5
 8001c90:	6063      	str	r3, [r4, #4]
 8001c92:	d1f1      	bne.n	8001c78 <_write+0x1a>
 8001c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff bf59 	b.w	8001b50 <error>

08001c9e <_swiclose>:
 8001c9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ca0:	ad02      	add	r5, sp, #8
 8001ca2:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001ca6:	2402      	movs	r4, #2
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	beab      	bkpt	0x00ab
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff ff3d 	bl	8001b30 <checkerror>
 8001cb6:	b003      	add	sp, #12
 8001cb8:	bd30      	pop	{r4, r5, pc}
	...

08001cbc <_close>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4605      	mov	r5, r0
 8001cc0:	f7ff ff1c 	bl	8001afc <findslot>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	b930      	cbnz	r0, 8001cd6 <_close+0x1a>
 8001cc8:	f000 f9e2 	bl	8002090 <__errno>
 8001ccc:	2309      	movs	r3, #9
 8001cce:	6003      	str	r3, [r0, #0]
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
 8001cd6:	3d01      	subs	r5, #1
 8001cd8:	2d01      	cmp	r5, #1
 8001cda:	d809      	bhi.n	8001cf0 <_close+0x34>
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <_close+0x48>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d104      	bne.n	8001cf0 <_close+0x34>
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	6003      	str	r3, [r0, #0]
 8001cec:	2000      	movs	r0, #0
 8001cee:	e7f1      	b.n	8001cd4 <_close+0x18>
 8001cf0:	6820      	ldr	r0, [r4, #0]
 8001cf2:	f7ff ffd4 	bl	8001c9e <_swiclose>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <_close+0x18>
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	e7e8      	b.n	8001cd4 <_close+0x18>
 8001d02:	bf00      	nop
 8001d04:	200000bc 	.word	0x200000bc

08001d08 <_sbrk>:
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <_sbrk+0x38>)
 8001d0a:	b510      	push	{r4, lr}
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	4602      	mov	r2, r0
 8001d10:	b909      	cbnz	r1, 8001d16 <_sbrk+0xe>
 8001d12:	490c      	ldr	r1, [pc, #48]	; (8001d44 <_sbrk+0x3c>)
 8001d14:	6019      	str	r1, [r3, #0]
 8001d16:	4669      	mov	r1, sp
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	4402      	add	r2, r0
 8001d1c:	428a      	cmp	r2, r1
 8001d1e:	d806      	bhi.n	8001d2e <_sbrk+0x26>
 8001d20:	4909      	ldr	r1, [pc, #36]	; (8001d48 <_sbrk+0x40>)
 8001d22:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <_sbrk+0x44>)
 8001d24:	6809      	ldr	r1, [r1, #0]
 8001d26:	42a1      	cmp	r1, r4
 8001d28:	d008      	beq.n	8001d3c <_sbrk+0x34>
 8001d2a:	428a      	cmp	r2, r1
 8001d2c:	d906      	bls.n	8001d3c <_sbrk+0x34>
 8001d2e:	f000 f9af 	bl	8002090 <__errno>
 8001d32:	230c      	movs	r3, #12
 8001d34:	6003      	str	r3, [r0, #0]
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3a:	bd10      	pop	{r4, pc}
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e7fc      	b.n	8001d3a <_sbrk+0x32>
 8001d40:	200000ac 	.word	0x200000ac
 8001d44:	200001a8 	.word	0x200001a8
 8001d48:	2000007c 	.word	0x2000007c
 8001d4c:	cafedead 	.word	0xcafedead

08001d50 <_swistat>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	460c      	mov	r4, r1
 8001d54:	f7ff fed2 	bl	8001afc <findslot>
 8001d58:	4606      	mov	r6, r0
 8001d5a:	b930      	cbnz	r0, 8001d6a <_swistat+0x1a>
 8001d5c:	f000 f998 	bl	8002090 <__errno>
 8001d60:	2309      	movs	r3, #9
 8001d62:	6003      	str	r3, [r0, #0]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	bd70      	pop	{r4, r5, r6, pc}
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	250c      	movs	r5, #12
 8001d6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d72:	6063      	str	r3, [r4, #4]
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	6463      	str	r3, [r4, #68]	; 0x44
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	beab      	bkpt	0x00ab
 8001d80:	4605      	mov	r5, r0
 8001d82:	4628      	mov	r0, r5
 8001d84:	f7ff fed4 	bl	8001b30 <checkerror>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	bf1c      	itt	ne
 8001d8c:	6120      	strne	r0, [r4, #16]
 8001d8e:	2000      	movne	r0, #0
 8001d90:	e7ea      	b.n	8001d68 <_swistat+0x18>

08001d92 <_fstat>:
 8001d92:	460b      	mov	r3, r1
 8001d94:	b510      	push	{r4, lr}
 8001d96:	2100      	movs	r1, #0
 8001d98:	4604      	mov	r4, r0
 8001d9a:	2258      	movs	r2, #88	; 0x58
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe ff53 	bl	8000c48 <memset>
 8001da2:	4601      	mov	r1, r0
 8001da4:	4620      	mov	r0, r4
 8001da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001daa:	f7ff bfd1 	b.w	8001d50 <_swistat>

08001dae <_stat>:
 8001dae:	b538      	push	{r3, r4, r5, lr}
 8001db0:	460d      	mov	r5, r1
 8001db2:	4604      	mov	r4, r0
 8001db4:	2258      	movs	r2, #88	; 0x58
 8001db6:	2100      	movs	r1, #0
 8001db8:	4628      	mov	r0, r5
 8001dba:	f7fe ff45 	bl	8000c48 <memset>
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f000 f811 	bl	8001de8 <_swiopen>
 8001dc6:	1c43      	adds	r3, r0, #1
 8001dc8:	4604      	mov	r4, r0
 8001dca:	d00b      	beq.n	8001de4 <_stat+0x36>
 8001dcc:	686b      	ldr	r3, [r5, #4]
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001dd4:	606b      	str	r3, [r5, #4]
 8001dd6:	f7ff ffbb 	bl	8001d50 <_swistat>
 8001dda:	4605      	mov	r5, r0
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff ff6d 	bl	8001cbc <_close>
 8001de2:	462c      	mov	r4, r5
 8001de4:	4620      	mov	r0, r4
 8001de6:	bd38      	pop	{r3, r4, r5, pc}

08001de8 <_swiopen>:
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <_swiopen+0xb0>)
 8001dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dee:	4682      	mov	sl, r0
 8001df0:	460e      	mov	r6, r1
 8001df2:	2500      	movs	r5, #0
 8001df4:	4698      	mov	r8, r3
 8001df6:	b096      	sub	sp, #88	; 0x58
 8001df8:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001dfc:	00ef      	lsls	r7, r5, #3
 8001dfe:	1c61      	adds	r1, r4, #1
 8001e00:	d036      	beq.n	8001e70 <_swiopen+0x88>
 8001e02:	3501      	adds	r5, #1
 8001e04:	2d14      	cmp	r5, #20
 8001e06:	d1f7      	bne.n	8001df8 <_swiopen+0x10>
 8001e08:	f000 f942 	bl	8002090 <__errno>
 8001e0c:	2318      	movs	r3, #24
 8001e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8001e12:	6003      	str	r3, [r0, #0]
 8001e14:	e03c      	b.n	8001e90 <_swiopen+0xa8>
 8001e16:	f240 6301 	movw	r3, #1537	; 0x601
 8001e1a:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001e1e:	07b2      	lsls	r2, r6, #30
 8001e20:	bf48      	it	mi
 8001e22:	f044 0402 	orrmi.w	r4, r4, #2
 8001e26:	421e      	tst	r6, r3
 8001e28:	bf18      	it	ne
 8001e2a:	f044 0404 	orrne.w	r4, r4, #4
 8001e2e:	0733      	lsls	r3, r6, #28
 8001e30:	bf48      	it	mi
 8001e32:	f024 0404 	bicmi.w	r4, r4, #4
 8001e36:	4650      	mov	r0, sl
 8001e38:	bf48      	it	mi
 8001e3a:	f044 0408 	orrmi.w	r4, r4, #8
 8001e3e:	f8cd a000 	str.w	sl, [sp]
 8001e42:	f7fe f995 	bl	8000170 <strlen>
 8001e46:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001e4a:	2401      	movs	r4, #1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4649      	mov	r1, r9
 8001e50:	beab      	bkpt	0x00ab
 8001e52:	4604      	mov	r4, r0
 8001e54:	2c00      	cmp	r4, #0
 8001e56:	db06      	blt.n	8001e66 <_swiopen+0x7e>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	4447      	add	r7, r8
 8001e5c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	462c      	mov	r4, r5
 8001e64:	e014      	b.n	8001e90 <_swiopen+0xa8>
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fe72 	bl	8001b50 <error>
 8001e6c:	4604      	mov	r4, r0
 8001e6e:	e00f      	b.n	8001e90 <_swiopen+0xa8>
 8001e70:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001e74:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001e78:	46e9      	mov	r9, sp
 8001e7a:	d1cc      	bne.n	8001e16 <_swiopen+0x2e>
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	4650      	mov	r0, sl
 8001e80:	f7ff ff95 	bl	8001dae <_stat>
 8001e84:	3001      	adds	r0, #1
 8001e86:	d0c6      	beq.n	8001e16 <_swiopen+0x2e>
 8001e88:	f000 f902 	bl	8002090 <__errno>
 8001e8c:	2311      	movs	r3, #17
 8001e8e:	6003      	str	r3, [r0, #0]
 8001e90:	4620      	mov	r0, r4
 8001e92:	b016      	add	sp, #88	; 0x58
 8001e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e98:	200000bc 	.word	0x200000bc

08001e9c <_get_semihosting_exts>:
 8001e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ea0:	4607      	mov	r7, r0
 8001ea2:	4688      	mov	r8, r1
 8001ea4:	4829      	ldr	r0, [pc, #164]	; (8001f4c <_get_semihosting_exts+0xb0>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4615      	mov	r5, r2
 8001eaa:	f7ff ff9d 	bl	8001de8 <_swiopen>
 8001eae:	4604      	mov	r4, r0
 8001eb0:	462a      	mov	r2, r5
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4638      	mov	r0, r7
 8001eb6:	f7fe fec7 	bl	8000c48 <memset>
 8001eba:	1c63      	adds	r3, r4, #1
 8001ebc:	d015      	beq.n	8001eea <_get_semihosting_exts+0x4e>
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fe1c 	bl	8001afc <findslot>
 8001ec4:	260c      	movs	r6, #12
 8001ec6:	4681      	mov	r9, r0
 8001ec8:	4630      	mov	r0, r6
 8001eca:	4649      	mov	r1, r9
 8001ecc:	beab      	bkpt	0x00ab
 8001ece:	4606      	mov	r6, r0
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7ff fe2d 	bl	8001b30 <checkerror>
 8001ed6:	2803      	cmp	r0, #3
 8001ed8:	dd02      	ble.n	8001ee0 <_get_semihosting_exts+0x44>
 8001eda:	3803      	subs	r0, #3
 8001edc:	42a8      	cmp	r0, r5
 8001ede:	dc08      	bgt.n	8001ef2 <_get_semihosting_exts+0x56>
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff feeb 	bl	8001cbc <_close>
 8001ee6:	f04f 34ff 	mov.w	r4, #4294967295
 8001eea:	4620      	mov	r0, r4
 8001eec:	b003      	add	sp, #12
 8001eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	eb0d 0102 	add.w	r1, sp, r2
 8001efa:	f7ff fe47 	bl	8001b8c <_read>
 8001efe:	2803      	cmp	r0, #3
 8001f00:	ddee      	ble.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f06:	2b53      	cmp	r3, #83	; 0x53
 8001f08:	d1ea      	bne.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001f0e:	2b48      	cmp	r3, #72	; 0x48
 8001f10:	d1e6      	bne.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f16:	2b46      	cmp	r3, #70	; 0x46
 8001f18:	d1e2      	bne.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f1e:	2b42      	cmp	r3, #66	; 0x42
 8001f20:	d1de      	bne.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f22:	2201      	movs	r2, #1
 8001f24:	4641      	mov	r1, r8
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fe4a 	bl	8001bc0 <_swilseek>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	dbd7      	blt.n	8001ee0 <_get_semihosting_exts+0x44>
 8001f30:	462a      	mov	r2, r5
 8001f32:	4639      	mov	r1, r7
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff fe29 	bl	8001b8c <_read>
 8001f3a:	4605      	mov	r5, r0
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff febd 	bl	8001cbc <_close>
 8001f42:	4628      	mov	r0, r5
 8001f44:	f7ff fdf4 	bl	8001b30 <checkerror>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	e7ce      	b.n	8001eea <_get_semihosting_exts+0x4e>
 8001f4c:	0800216b 	.word	0x0800216b

08001f50 <initialise_semihosting_exts>:
 8001f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f52:	2100      	movs	r1, #0
 8001f54:	2201      	movs	r2, #1
 8001f56:	4d09      	ldr	r5, [pc, #36]	; (8001f7c <initialise_semihosting_exts+0x2c>)
 8001f58:	4c09      	ldr	r4, [pc, #36]	; (8001f80 <initialise_semihosting_exts+0x30>)
 8001f5a:	a801      	add	r0, sp, #4
 8001f5c:	6029      	str	r1, [r5, #0]
 8001f5e:	6022      	str	r2, [r4, #0]
 8001f60:	f7ff ff9c 	bl	8001e9c <_get_semihosting_exts>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	dd07      	ble.n	8001f78 <initialise_semihosting_exts+0x28>
 8001f68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	602a      	str	r2, [r5, #0]
 8001f76:	6023      	str	r3, [r4, #0]
 8001f78:	b003      	add	sp, #12
 8001f7a:	bd30      	pop	{r4, r5, pc}
 8001f7c:	20000080 	.word	0x20000080
 8001f80:	20000084 	.word	0x20000084

08001f84 <_has_ext_stdout_stderr>:
 8001f84:	b510      	push	{r4, lr}
 8001f86:	4c04      	ldr	r4, [pc, #16]	; (8001f98 <_has_ext_stdout_stderr+0x14>)
 8001f88:	6822      	ldr	r2, [r4, #0]
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	da01      	bge.n	8001f92 <_has_ext_stdout_stderr+0xe>
 8001f8e:	f7ff ffdf 	bl	8001f50 <initialise_semihosting_exts>
 8001f92:	6820      	ldr	r0, [r4, #0]
 8001f94:	bd10      	pop	{r4, pc}
 8001f96:	bf00      	nop
 8001f98:	20000084 	.word	0x20000084

08001f9c <initialise_monitor_handles>:
 8001f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	2400      	movs	r4, #0
 8001fa4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8002054 <initialise_monitor_handles+0xb8>
 8001fa8:	b085      	sub	sp, #20
 8001faa:	f8cd 9004 	str.w	r9, [sp, #4]
 8001fae:	f10d 0804 	add.w	r8, sp, #4
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	2501      	movs	r5, #1
 8001fb6:	9402      	str	r4, [sp, #8]
 8001fb8:	4628      	mov	r0, r5
 8001fba:	4641      	mov	r1, r8
 8001fbc:	beab      	bkpt	0x00ab
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	4a20      	ldr	r2, [pc, #128]	; (8002044 <initialise_monitor_handles+0xa8>)
 8001fc2:	4623      	mov	r3, r4
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	4614      	mov	r4, r2
 8001fca:	4e1f      	ldr	r6, [pc, #124]	; (8002048 <initialise_monitor_handles+0xac>)
 8001fcc:	6035      	str	r5, [r6, #0]
 8001fce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	2b14      	cmp	r3, #20
 8001fd6:	d1fa      	bne.n	8001fce <initialise_monitor_handles+0x32>
 8001fd8:	f7ff ffd4 	bl	8001f84 <_has_ext_stdout_stderr>
 8001fdc:	4d1b      	ldr	r5, [pc, #108]	; (800204c <initialise_monitor_handles+0xb0>)
 8001fde:	b1d0      	cbz	r0, 8002016 <initialise_monitor_handles+0x7a>
 8001fe0:	f04f 0a03 	mov.w	sl, #3
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	f8cd 9004 	str.w	r9, [sp, #4]
 8001fea:	2701      	movs	r7, #1
 8001fec:	f8cd a00c 	str.w	sl, [sp, #12]
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	4641      	mov	r1, r8
 8001ff6:	beab      	bkpt	0x00ab
 8001ff8:	4683      	mov	fp, r0
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <initialise_monitor_handles+0xb4>)
 8001ffc:	f8cd 9004 	str.w	r9, [sp, #4]
 8002000:	f8c3 b000 	str.w	fp, [r3]
 8002004:	2308      	movs	r3, #8
 8002006:	f8cd a00c 	str.w	sl, [sp, #12]
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	4638      	mov	r0, r7
 800200e:	4641      	mov	r1, r8
 8002010:	beab      	bkpt	0x00ab
 8002012:	4607      	mov	r7, r0
 8002014:	602f      	str	r7, [r5, #0]
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	bf02      	ittt	eq
 800201c:	4b0c      	ldreq	r3, [pc, #48]	; (8002050 <initialise_monitor_handles+0xb4>)
 800201e:	681b      	ldreq	r3, [r3, #0]
 8002020:	602b      	streq	r3, [r5, #0]
 8002022:	6833      	ldr	r3, [r6, #0]
 8002024:	2600      	movs	r6, #0
 8002026:	6023      	str	r3, [r4, #0]
 8002028:	6066      	str	r6, [r4, #4]
 800202a:	f7ff ffab 	bl	8001f84 <_has_ext_stdout_stderr>
 800202e:	b130      	cbz	r0, 800203e <initialise_monitor_handles+0xa2>
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <initialise_monitor_handles+0xb4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800203e:	b005      	add	sp, #20
 8002040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002044:	200000bc 	.word	0x200000bc
 8002048:	200000b4 	.word	0x200000b4
 800204c:	200000b0 	.word	0x200000b0
 8002050:	200000b8 	.word	0x200000b8
 8002054:	08002181 	.word	0x08002181

08002058 <_isatty>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	f7ff fd4f 	bl	8001afc <findslot>
 800205e:	2509      	movs	r5, #9
 8002060:	4604      	mov	r4, r0
 8002062:	b920      	cbnz	r0, 800206e <_isatty+0x16>
 8002064:	f000 f814 	bl	8002090 <__errno>
 8002068:	6005      	str	r5, [r0, #0]
 800206a:	4620      	mov	r0, r4
 800206c:	bd70      	pop	{r4, r5, r6, pc}
 800206e:	4628      	mov	r0, r5
 8002070:	4621      	mov	r1, r4
 8002072:	beab      	bkpt	0x00ab
 8002074:	4604      	mov	r4, r0
 8002076:	2c01      	cmp	r4, #1
 8002078:	d0f7      	beq.n	800206a <_isatty+0x12>
 800207a:	f000 f809 	bl	8002090 <__errno>
 800207e:	2400      	movs	r4, #0
 8002080:	4606      	mov	r6, r0
 8002082:	2513      	movs	r5, #19
 8002084:	4628      	mov	r0, r5
 8002086:	4621      	mov	r1, r4
 8002088:	beab      	bkpt	0x00ab
 800208a:	4605      	mov	r5, r0
 800208c:	6035      	str	r5, [r6, #0]
 800208e:	e7ec      	b.n	800206a <_isatty+0x12>

08002090 <__errno>:
 8002090:	4b01      	ldr	r3, [pc, #4]	; (8002098 <__errno+0x8>)
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000018 	.word	0x20000018

0800209c <_init>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	bf00      	nop
 80020a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a2:	bc08      	pop	{r3}
 80020a4:	469e      	mov	lr, r3
 80020a6:	4770      	bx	lr

080020a8 <_fini>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	bf00      	nop
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr

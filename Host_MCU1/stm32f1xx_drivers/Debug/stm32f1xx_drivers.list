
stm32f1xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ed0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001000  08001000  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001000  08001000  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08001000  08001000  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001000  08001000  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001000  08001000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001004  08001004  00011004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08001008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000038  08001040  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001040  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cfe  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005b3  00000000  00000000  00021d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00022318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00022508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000299c  00000000  00000000  000226c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015dd  00000000  00000000  0002505c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a5c1  00000000  00000000  00026639  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000774  00000000  00000000  00030c78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000038 	.word	0x20000038
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fe8 	.word	0x08000fe8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000003c 	.word	0x2000003c
 800016c:	08000fe8 	.word	0x08000fe8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <I2C_GPIOInits>:
void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

void I2C_GPIOInits(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0

	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 8000186:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <I2C_GPIOInits+0x3c>)
 8000188:	603b      	str	r3, [r7, #0]

	// SCL -> B6
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 800018a:	2301      	movs	r3, #1
 800018c:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 800018e:	2303      	movs	r3, #3
 8000190:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000192:	2306      	movs	r3, #6
 8000194:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 8000196:	463b      	mov	r3, r7
 8000198:	4618      	mov	r0, r3
 800019a:	f000 f981 	bl	80004a0 <GPIO_Init>

	// SDA -> B7
	I2CPins.GPIO_PinConfig.GPIO_PinMode = 1; // Speed = 10 MHz
 800019e:	2301      	movs	r3, #1
 80001a0:	717b      	strb	r3, [r7, #5]
	I2CPins.GPIO_PinConfig.GPIO_Config = 3; // Alternate function Open Drain
 80001a2:	2303      	movs	r3, #3
 80001a4:	71bb      	strb	r3, [r7, #6]
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80001a6:	2307      	movs	r3, #7
 80001a8:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&I2CPins);
 80001aa:	463b      	mov	r3, r7
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f977 	bl	80004a0 <GPIO_Init>
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010c00 	.word	0x40010c00

080001c0 <I2C_Inits>:

void I2C_Inits(void){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0

	I2C1Handle.pI2Cx= I2C1;
 80001c4:	4b09      	ldr	r3, [pc, #36]	; (80001ec <I2C_Inits+0x2c>)
 80001c6:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <I2C_Inits+0x30>)
 80001c8:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <I2C_Inits+0x2c>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = SLAVE_ADDR; // This doesn't matter in this application bc MCU is acting like master
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <I2C_Inits+0x2c>)
 80001d2:	2268      	movs	r2, #104	; 0x68
 80001d4:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTYCLYCLE_2; // Not used
 80001d6:	4b05      	ldr	r3, [pc, #20]	; (80001ec <I2C_Inits+0x2c>)
 80001d8:	2200      	movs	r2, #0
 80001da:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_CLK_SPEED_SM; // Standard mode
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <I2C_Inits+0x2c>)
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <I2C_Inits+0x34>)
 80001e0:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <I2C_Inits+0x2c>)
 80001e4:	f000 fb1c 	bl	8000820 <I2C_Init>
}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	20000058 	.word	0x20000058
 80001f0:	40005400 	.word	0x40005400
 80001f4:	000186a0 	.word	0x000186a0

080001f8 <main>:
	gpioBtn.GPIO_PinConfig.GPIO_Config = GPIO_IN_TYPE_PP;

	GPIO_Init(&gpioBtn);
}

int main (void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	// Initialize GPIOs a IC2 pins
	I2C_GPIOInits();
 80001fc:	f7ff ffc0 	bl	8000180 <I2C_GPIOInits>

	// Configure I2C
	I2C_Inits();
 8000200:	f7ff ffde 	bl	80001c0 <I2C_Inits>

	// IRQ Config for events and errors
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000204:	2101      	movs	r1, #1
 8000206:	201f      	movs	r0, #31
 8000208:	f000 fbac 	bl	8000964 <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 800020c:	2101      	movs	r1, #1
 800020e:	2020      	movs	r0, #32
 8000210:	f000 fba8 	bl	8000964 <I2C_IRQConfig>

	// Enable I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000214:	2101      	movs	r1, #1
 8000216:	4806      	ldr	r0, [pc, #24]	; (8000230 <main+0x38>)
 8000218:	f000 fc28 	bl	8000a6c <I2C_PeripheralControl>

	// Enable acking after PE = 1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 800021c:	2101      	movs	r1, #1
 800021e:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x38>)
 8000220:	f000 fc3f 	bl	8000aa2 <I2C_ManageAcking>

	I2C_SlaveManageCallbackEvents(I2C1, ENABLE);
 8000224:	2101      	movs	r1, #1
 8000226:	4802      	ldr	r0, [pc, #8]	; (8000230 <main+0x38>)
 8000228:	f000 fe86 	bl	8000f38 <I2C_SlaveManageCallbackEvents>

	while (1);
 800022c:	e7fe      	b.n	800022c <main+0x34>
 800022e:	bf00      	nop
 8000230:	40005400 	.word	0x40005400

08000234 <I2C1_EV_IRQHandler>:
}

// Whenever an event happens, this function will be called
void I2C1_EV_IRQHandler (void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <I2C1_EV_IRQHandler+0x10>)
 800023a:	f000 fccb 	bl	8000bd4 <I2C_EV_IRQHandling>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000058 	.word	0x20000058

08000248 <I2C1_ER_IRQHandler>:

// Whenever an error happens, this function will be called
void I2C1_ER_IRQHandler (void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <I2C1_ER_IRQHandler+0x10>)
 800024e:	f000 fded 	bl	8000e2c <I2C_ER_IRQHandling>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000058 	.word	0x20000058

0800025c <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback (I2C_Handle_t *pI2CxHandle, uint8_t AppEv){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	460b      	mov	r3, r1
 8000266:	70fb      	strb	r3, [r7, #3]

	static uint8_t command_code = 0;
	static uint8_t cnt = 0;

	if (AppEv == I2C_EV_DATA_REQUEST){
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	2b03      	cmp	r3, #3
 800026c:	d11f      	bne.n	80002ae <I2C_ApplicationEventCallback+0x52>
		// Master is requesting data and slave must send it
		if (command_code == 0x51){
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <I2C_ApplicationEventCallback+0x84>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b51      	cmp	r3, #81	; 0x51
 8000274:	d109      	bne.n	800028a <I2C_ApplicationEventCallback+0x2e>
			// Send length info
			I2C_SlaveSendData(I2C1, strlen((char*)tx_buff));
 8000276:	481b      	ldr	r0, [pc, #108]	; (80002e4 <I2C_ApplicationEventCallback+0x88>)
 8000278:	f7ff ff7a 	bl	8000170 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	b2db      	uxtb	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	4819      	ldr	r0, [pc, #100]	; (80002e8 <I2C_ApplicationEventCallback+0x8c>)
 8000284:	f000 fc8c 	bl	8000ba0 <I2C_SlaveSendData>
		cnt = 0;
	} else if (AppEv == I2C_EV_STOP){
		// Only happens in slave reception
		// Masters has ended I2C communication
	}
}
 8000288:	e025      	b.n	80002d6 <I2C_ApplicationEventCallback+0x7a>
		} else if (command_code == 0x52){
 800028a:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <I2C_ApplicationEventCallback+0x84>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b52      	cmp	r3, #82	; 0x52
 8000290:	d121      	bne.n	80002d6 <I2C_ApplicationEventCallback+0x7a>
			I2C_SlaveSendData(I2C1, tx_buff[cnt++]);
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <I2C_ApplicationEventCallback+0x90>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	b2d1      	uxtb	r1, r2
 800029a:	4a14      	ldr	r2, [pc, #80]	; (80002ec <I2C_ApplicationEventCallback+0x90>)
 800029c:	7011      	strb	r1, [r2, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <I2C_ApplicationEventCallback+0x88>)
 80002a2:	5c9b      	ldrb	r3, [r3, r2]
 80002a4:	4619      	mov	r1, r3
 80002a6:	4810      	ldr	r0, [pc, #64]	; (80002e8 <I2C_ApplicationEventCallback+0x8c>)
 80002a8:	f000 fc7a 	bl	8000ba0 <I2C_SlaveSendData>
}
 80002ac:	e013      	b.n	80002d6 <I2C_ApplicationEventCallback+0x7a>
	} else if (AppEv == I2C_EV_DATA_RECEIVED){
 80002ae:	78fb      	ldrb	r3, [r7, #3]
 80002b0:	2b04      	cmp	r3, #4
 80002b2:	d107      	bne.n	80002c4 <I2C_ApplicationEventCallback+0x68>
		command_code = I2C_SlaveReceiveData(I2C1);
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <I2C_ApplicationEventCallback+0x8c>)
 80002b6:	f000 fc81 	bl	8000bbc <I2C_SlaveReceiveData>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <I2C_ApplicationEventCallback+0x84>)
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	e008      	b.n	80002d6 <I2C_ApplicationEventCallback+0x7a>
	} else if (AppEv == I2C_ERROR_AF){
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	d105      	bne.n	80002d6 <I2C_ApplicationEventCallback+0x7a>
		command_code = 0xFF;
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <I2C_ApplicationEventCallback+0x84>)
 80002cc:	22ff      	movs	r2, #255	; 0xff
 80002ce:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <I2C_ApplicationEventCallback+0x90>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	701a      	strb	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000054 	.word	0x20000054
 80002e4:	20000000 	.word	0x20000000
 80002e8:	40005400 	.word	0x40005400
 80002ec:	20000055 	.word	0x20000055

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490e      	ldr	r1, [pc, #56]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0b      	ldr	r4, [pc, #44]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800031a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 fe3f 	bl	8000fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff69 	bl	80001f8 <main>

08000326 <LoopForever>:

LoopForever:
    b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000334:	08001008 	.word	0x08001008
  ldr r2, =_sbss
 8000338:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800033c:	20000080 	.word	0x20000080

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <GPIO_PeriClkCtrl>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d148      	bne.n	80003e8 <GPIO_PeriClkCtrl+0xa4>
		if (pGPIOx == GPIOA) {
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a4a      	ldr	r2, [pc, #296]	; (8000484 <GPIO_PeriClkCtrl+0x140>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClkCtrl+0x28>
			GPIOA_PCLK_EN();
 800035e:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a49      	ldr	r2, [pc, #292]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
			GPIOF_PCLK_DI();
		} else {
			GPIOG_PCLK_DI();
		}
	}
}
 800036a:	e085      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a47      	ldr	r2, [pc, #284]	; (800048c <GPIO_PeriClkCtrl+0x148>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000374:	4b44      	ldr	r3, [pc, #272]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a43      	ldr	r2, [pc, #268]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
}
 8000380:	e07a      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a42      	ldr	r2, [pc, #264]	; (8000490 <GPIO_PeriClkCtrl+0x14c>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800038a:	4b3f      	ldr	r3, [pc, #252]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a3e      	ldr	r2, [pc, #248]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000390:	f043 0310 	orr.w	r3, r3, #16
 8000394:	6193      	str	r3, [r2, #24]
}
 8000396:	e06f      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <GPIO_PeriClkCtrl+0x150>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a38      	ldr	r2, [pc, #224]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6193      	str	r3, [r2, #24]
}
 80003ac:	e064      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a39      	ldr	r2, [pc, #228]	; (8000498 <GPIO_PeriClkCtrl+0x154>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClkCtrl+0x80>
			GPIOE_PCLK_EN();
 80003b6:	4b34      	ldr	r3, [pc, #208]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c0:	6193      	str	r3, [r2, #24]
}
 80003c2:	e059      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a35      	ldr	r2, [pc, #212]	; (800049c <GPIO_PeriClkCtrl+0x158>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80003cc:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d6:	6193      	str	r3, [r2, #24]
}
 80003d8:	e04e      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_EN();
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e4:	6193      	str	r3, [r2, #24]
}
 80003e6:	e047      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		if (pGPIOx == GPIOA) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a26      	ldr	r2, [pc, #152]	; (8000484 <GPIO_PeriClkCtrl+0x140>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClkCtrl+0xba>
			GPIOA_PCLK_DI();
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a24      	ldr	r2, [pc, #144]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 80003f6:	f023 0304 	bic.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
}
 80003fc:	e03c      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOB) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a22      	ldr	r2, [pc, #136]	; (800048c <GPIO_PeriClkCtrl+0x148>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClkCtrl+0xd0>
			GPIOB_PCLK_DI();
 8000406:	4b20      	ldr	r3, [pc, #128]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	4a1f      	ldr	r2, [pc, #124]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800040c:	f023 0308 	bic.w	r3, r3, #8
 8000410:	6193      	str	r3, [r2, #24]
}
 8000412:	e031      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOC) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a1e      	ldr	r2, [pc, #120]	; (8000490 <GPIO_PeriClkCtrl+0x14c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClkCtrl+0xe6>
			GPIOC_PCLK_DI();
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a19      	ldr	r2, [pc, #100]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000422:	f023 0310 	bic.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
}
 8000428:	e026      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOD) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <GPIO_PeriClkCtrl+0x150>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClkCtrl+0xfc>
			GPIOD_PCLK_DI();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000438:	f023 0320 	bic.w	r3, r3, #32
 800043c:	6193      	str	r3, [r2, #24]
}
 800043e:	e01b      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOE) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <GPIO_PeriClkCtrl+0x154>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClkCtrl+0x112>
			GPIOE_PCLK_DI();
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800044e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000452:	6193      	str	r3, [r2, #24]
}
 8000454:	e010      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
		} else if (pGPIOx == GPIOF) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a10      	ldr	r2, [pc, #64]	; (800049c <GPIO_PeriClkCtrl+0x158>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClkCtrl+0x128>
			GPIOF_PCLK_DI();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a09      	ldr	r2, [pc, #36]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000468:	6193      	str	r3, [r2, #24]
}
 800046a:	e005      	b.n	8000478 <GPIO_PeriClkCtrl+0x134>
			GPIOG_PCLK_DI();
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a05      	ldr	r2, [pc, #20]	; (8000488 <GPIO_PeriClkCtrl+0x144>)
 8000472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000476:	6193      	str	r3, [r2, #24]
}
 8000478:	bf00      	nop
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40010800 	.word	0x40010800
 8000488:	40021000 	.word	0x40021000
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40011000 	.word	0x40011000
 8000494:	40011400 	.word	0x40011400
 8000498:	40011800 	.word	0x40011800
 800049c:	40011c00 	.word	0x40011c00

080004a0 <GPIO_Init>:
 * @param [in]		Base Address of the GPIO Handle
 * @return			None
 * @note 			None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08c      	sub	sp, #48	; 0x30
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	//Enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff48 	bl	8000344 <GPIO_PeriClkCtrl>

	// Configuration of the pin mode
	uint32_t temp_mode = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t temp_config = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7){ // Configuration of Pins 0-7
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	d84b      	bhi.n	800055c <GPIO_Init+0xbc>

		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	75fb      	strb	r3, [r7, #23]
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	795b      	ldrb	r3, [r3, #5]
 80004ce:	75bb      	strb	r3, [r7, #22]
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	799b      	ldrb	r3, [r3, #6]
 80004d4:	757b      	strb	r3, [r7, #21]
		uint8_t positions_mode = 4*aux;
 80004d6:	7dfb      	ldrb	r3, [r7, #23]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	753b      	strb	r3, [r7, #20]
		uint8_t positions_config = (2 + (4 * aux));
 80004dc:	7dfb      	ldrb	r3, [r7, #23]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	3302      	adds	r3, #2
 80004e4:	74fb      	strb	r3, [r7, #19]
		uint32_t clear_mode = (0x03 << positions_mode);
 80004e6:	7d3b      	ldrb	r3, [r7, #20]
 80004e8:	2203      	movs	r2, #3
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	60fb      	str	r3, [r7, #12]
		uint32_t clear_config = (0x03 << positions_config);
 80004f0:	7cfb      	ldrb	r3, [r7, #19]
 80004f2:	2203      	movs	r2, #3
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	60bb      	str	r3, [r7, #8]

		temp_mode = value_mode << positions_mode;
 80004fa:	7dba      	ldrb	r2, [r7, #22]
 80004fc:	7d3b      	ldrb	r3, [r7, #20]
 80004fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000502:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRL &= ~(clear_mode); // Clearing
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6819      	ldr	r1, [r3, #0]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	43da      	mvns	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	400a      	ands	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_mode; // Setting. CAREFUL: Use | to change just the position of the pin number
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	6819      	ldr	r1, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000522:	430a      	orrs	r2, r1
 8000524:	601a      	str	r2, [r3, #0]

		temp_mode = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	62fb      	str	r3, [r7, #44]	; 0x2c

		temp_config = value_config << positions_config;
 800052a:	7d7a      	ldrb	r2, [r7, #21]
 800052c:	7cfb      	ldrb	r3, [r7, #19]
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRL &= ~(clear_config); //Clearing
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6819      	ldr	r1, [r3, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	43da      	mvns	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->CRL |= temp_config; //Setting
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6819      	ldr	r1, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]

		temp_config = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting

		temp_config = 0;
	}

}
 800055a:	e058      	b.n	800060e <GPIO_Init+0x16e>
		uint8_t aux = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	3b08      	subs	r3, #8
 8000562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t value_mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	795b      	ldrb	r3, [r3, #5]
 800056a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t value_config = pGPIOHandle->GPIO_PinConfig.GPIO_Config;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	799b      	ldrb	r3, [r3, #6]
 8000572:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t positions_mode = 4*aux;
 8000576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t positions_config = (2 + (4 * aux));
 8000580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	b2db      	uxtb	r3, r3
 8000588:	3302      	adds	r3, #2
 800058a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uint32_t clear_mode = ~(0x03 << positions_mode);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	2203      	movs	r2, #3
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	61fb      	str	r3, [r7, #28]
		uint32_t clear_config = ~(0x03 << positions_config);
 800059c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005a0:	2203      	movs	r2, #3
 80005a2:	fa02 f303 	lsl.w	r3, r2, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	61bb      	str	r3, [r7, #24]
		temp_mode = value_mode << positions_mode;
 80005aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80005ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		pGPIOHandle->pGPIOx->CRH &= clear_mode; // Clearing
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	69fa      	ldr	r2, [r7, #28]
 80005c4:	400a      	ands	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_mode; //Setting
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6859      	ldr	r1, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005d4:	430a      	orrs	r2, r1
 80005d6:	605a      	str	r2, [r3, #4]
		temp_mode = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
		temp_config = value_config << positions_config;
 80005dc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80005e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
		pGPIOHandle->pGPIOx->CRH &= clear_config; //Clearing
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	400a      	ands	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->CRH |= temp_config; // Setting
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6859      	ldr	r1, [r3, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000606:	430a      	orrs	r2, r1
 8000608:	605a      	str	r2, [r3, #4]
		temp_config = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <I2C_ExecuteAddressPhaseWrite>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	460b      	mov	r3, r1
 8000620:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); // Set 0 to write
 8000628:	78fb      	ldrb	r3, [r7, #3]
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000630:	78fa      	ldrb	r2, [r7, #3]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	611a      	str	r2, [r3, #16]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <I2C_ExecuteAddressPhaseRead>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr){
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]

	SlaveAddr = SlaveAddr << 1;
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; // Set 1 to write
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800065a:	78fa      	ldrb	r2, [r7, #3]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	611a      	str	r2, [r3, #16]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <I2C_ClearAddrFlag>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Slave address
 * @return			None
 * @note 			None
 */
static void I2C_ClearAddrFlag(I2C_Handle_t *pI2CxHandle){
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]

	uint8_t dummy_read;

	// Check mode
	if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d01f      	beq.n	80006c0 <I2C_ClearAddrFlag+0x56>
		//Device in master mode
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7f1b      	ldrb	r3, [r3, #28]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d112      	bne.n	80006ae <I2C_ClearAddrFlag+0x44>
			if (pI2CxHandle->RxSize == 1){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6a1b      	ldr	r3, [r3, #32]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d11f      	bne.n	80006d0 <I2C_ClearAddrFlag+0x66>
				// Disable ACKING
				I2C_ManageAcking(pI2CxHandle->pI2Cx, DISABLE);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fa03 	bl	8000aa2 <I2C_ManageAcking>

				// Clear ADDR flag
				dummy_read = pI2CxHandle->pI2Cx->SR1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	73fb      	strb	r3, [r7, #15]
		// Clear ADDR flag
		dummy_read = pI2CxHandle->pI2Cx->SR1;
		dummy_read = pI2CxHandle->pI2Cx->SR2;
		(void) dummy_read;
	}
}
 80006ac:	e010      	b.n	80006d0 <I2C_ClearAddrFlag+0x66>
			dummy_read = pI2CxHandle->pI2Cx->SR1;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	73fb      	strb	r3, [r7, #15]
}
 80006be:	e007      	b.n	80006d0 <I2C_ClearAddrFlag+0x66>
		dummy_read = pI2CxHandle->pI2Cx->SR1;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CxHandle->pI2Cx->SR2;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	73fb      	strb	r3, [r7, #15]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <I2C_GenerateStopCondition>:
 * @brief			This functions generates the stop condition
 * @param [in]		Base Address of the I2C Peripheral
 * @return			None
 * @note 			None
 */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]

}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <I2C_PeriClkCtrl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeriClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d115      	bne.n	8000736 <I2C_PeriClkCtrl+0x3e>
		if (pI2Cx == I2C1) {
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a17      	ldr	r2, [pc, #92]	; (800076c <I2C_PeriClkCtrl+0x74>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <I2C_PeriClkCtrl+0x28>
			I2C1_PCLK_EN();
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071c:	61d3      	str	r3, [r2, #28]
			I2C1_PCLK_DI();
		} else if (pI2Cx == I2C2) {
			I2C2_PCLK_DI();
		}
	}
}
 800071e:	e01f      	b.n	8000760 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <I2C_PeriClkCtrl+0x7c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d11b      	bne.n	8000760 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_EN();
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a10      	ldr	r2, [pc, #64]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 800072e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000732:	61d3      	str	r3, [r2, #28]
}
 8000734:	e014      	b.n	8000760 <I2C_PeriClkCtrl+0x68>
		if (pI2Cx == I2C1) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <I2C_PeriClkCtrl+0x74>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <I2C_PeriClkCtrl+0x54>
			I2C1_PCLK_DI();
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 8000744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000748:	61d3      	str	r3, [r2, #28]
}
 800074a:	e009      	b.n	8000760 <I2C_PeriClkCtrl+0x68>
		} else if (pI2Cx == I2C2) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <I2C_PeriClkCtrl+0x7c>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d105      	bne.n	8000760 <I2C_PeriClkCtrl+0x68>
			I2C2_PCLK_DI();
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <I2C_PeriClkCtrl+0x78>)
 800075a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800075e:	61d3      	str	r3, [r2, #28]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40005400 	.word	0x40005400
 8000770:	40021000 	.word	0x40021000
 8000774:	40005800 	.word	0x40005800

08000778 <RCC_GetPCLK1Value>:
 * @brief			This functions calculates the frequency of the APB1 clock
 * @param [in]		None
 * @return			Frequency of the clock
 * @note 			None
 */
uint32_t RCC_GetPCLK1Value (void){
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
	uint8_t clksrc, temp, ahb1_prescaler, apb1_prescaler;

	/* System clock: Defined on the register CFGR of RCC
	 * Move the bits two positions to the right so they a in the position 0 and 1.
	 * Then mask and get the value */
	clksrc = (RCC ->CFGR >> 2) & 0x3;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <RCC_GetPCLK1Value+0x94>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 0303 	and.w	r3, r3, #3
 800078a:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0){
 800078c:	7a7b      	ldrb	r3, [r7, #9]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <RCC_GetPCLK1Value+0x20>
		sysclk = 16000000;
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <RCC_GetPCLK1Value+0x98>)
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e004      	b.n	80007a2 <RCC_GetPCLK1Value+0x2a>
	} else if (clksrc == 1){
 8000798:	7a7b      	ldrb	r3, [r7, #9]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d101      	bne.n	80007a2 <RCC_GetPCLK1Value+0x2a>
		sysclk = 8000000;
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <RCC_GetPCLK1Value+0x9c>)
 80007a0:	60fb      	str	r3, [r7, #12]
	}

	// AHB Prescaler: Defined on register CFGR
	temp = (RCC ->CFGR >> 4) & 0xF;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <RCC_GetPCLK1Value+0x94>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	091b      	lsrs	r3, r3, #4
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	723b      	strb	r3, [r7, #8]

	if (temp < 8){
 80007b0:	7a3b      	ldrb	r3, [r7, #8]
 80007b2:	2b07      	cmp	r3, #7
 80007b4:	d802      	bhi.n	80007bc <RCC_GetPCLK1Value+0x44>
		ahb1_prescaler = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	72fb      	strb	r3, [r7, #11]
 80007ba:	e005      	b.n	80007c8 <RCC_GetPCLK1Value+0x50>
	} else {
		ahb1_prescaler = AHB1_Prescaler[temp-8];
 80007bc:	7a3b      	ldrb	r3, [r7, #8]
 80007be:	3b08      	subs	r3, #8
 80007c0:	4a15      	ldr	r2, [pc, #84]	; (8000818 <RCC_GetPCLK1Value+0xa0>)
 80007c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c6:	72fb      	strb	r3, [r7, #11]
		/* Example: temp = 9 -> 1001 -> [1] -> 9-8 */
	}

	// APB1 Prescaler
	temp = (RCC ->CFGR >> 8) & 0x7;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <RCC_GetPCLK1Value+0x94>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	723b      	strb	r3, [r7, #8]

	if (temp < 4){
 80007d6:	7a3b      	ldrb	r3, [r7, #8]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d802      	bhi.n	80007e2 <RCC_GetPCLK1Value+0x6a>
		apb1_prescaler = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	72bb      	strb	r3, [r7, #10]
 80007e0:	e005      	b.n	80007ee <RCC_GetPCLK1Value+0x76>
	} else {
		apb1_prescaler = APB1_Prescaler[temp-4];
 80007e2:	7a3b      	ldrb	r3, [r7, #8]
 80007e4:	3b04      	subs	r3, #4
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <RCC_GetPCLK1Value+0xa4>)
 80007e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ec:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (sysclk/ahb1_prescaler)/apb1_prescaler;
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f6:	7abb      	ldrb	r3, [r7, #10]
 80007f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fc:	607b      	str	r3, [r7, #4]

	return pclk1;
 80007fe:	687b      	ldr	r3, [r7, #4]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	00f42400 	.word	0x00f42400
 8000814:	007a1200 	.word	0x007a1200
 8000818:	20000020 	.word	0x20000020
 800081c:	20000030 	.word	0x20000030

08000820 <I2C_Init>:
 * @brief			This functions initializes a given I2C
 * @param [in]		Base Address of the I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_Init(I2C_Handle_t *pI2CxHandle){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2C peripheral
	I2C_PeriClkCtrl(pI2CxHandle->pI2Cx, ENABLE);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2101      	movs	r1, #1
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff60 	bl	80006f8 <I2C_PeriClkCtrl>
	 * Configuration of ACK bit
	temp |= (pI2CxHandle->I2C_Config.I2C_ACKControl << 10);
	pI2CxHandle->pI2Cx->CR1 = temp; */

	// Configuration of the FREQ
	temp = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	temp |= RCC_GetPCLK1Value()/ 1000000U;
 800083c:	f7ff ff9c 	bl	8000778 <RCC_GetPCLK1Value>
 8000840:	4602      	mov	r2, r0
 8000842:	4b46      	ldr	r3, [pc, #280]	; (800095c <I2C_Init+0x13c>)
 8000844:	fba3 2302 	umull	r2, r3, r3, r2
 8000848:	0c9b      	lsrs	r3, r3, #18
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	4313      	orrs	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->CR2 = (temp & 0x3F); // To mask the rest of the bits
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800085a:	605a      	str	r2, [r3, #4]

	// Configuration of the slave address
	temp |= (pI2CxHandle->I2C_Config.I2C_DeviceAddress << 1);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7a1b      	ldrb	r3, [r3, #8]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	461a      	mov	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4313      	orrs	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
	temp |= (1 << 14); // Bit 14 must be 1 according to the manual
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	60fb      	str	r3, [r7, #12]
	pI2CxHandle->pI2Cx->OAR1 = temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	817b      	strh	r3, [r7, #10]
	temp = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4a36      	ldr	r2, [pc, #216]	; (8000960 <I2C_Init+0x140>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d80f      	bhi.n	80008ac <I2C_Init+0x8c>
		// Standard mode
		ccr_value = RCC_GetPCLK1Value()/(2*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 800088c:	f7ff ff74 	bl	8000778 <RCC_GetPCLK1Value>
 8000890:	4602      	mov	r2, r0
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fbb2 f3f3 	udiv	r3, r2, r3
 800089c:	817b      	strh	r3, [r7, #10]
		temp |= (ccr_value & 0xFFF);
 800089e:	897b      	ldrh	r3, [r7, #10]
 80008a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e02d      	b.n	8000908 <I2C_Init+0xe8>
	} else{
		// Fast mode
		temp |= (1 << 15);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b2:	60fb      	str	r3, [r7, #12]
		temp |= (pI2CxHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	895b      	ldrh	r3, [r3, #10]
 80008b8:	039b      	lsls	r3, r3, #14
 80008ba:	461a      	mov	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4313      	orrs	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]

		if (pI2CxHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTYCLYCLE_2){
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	895b      	ldrh	r3, [r3, #10]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10b      	bne.n	80008e2 <I2C_Init+0xc2>
			ccr_value = RCC_GetPCLK1Value()/(3*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80008ca:	f7ff ff55 	bl	8000778 <RCC_GetPCLK1Value>
 80008ce:	4601      	mov	r1, r0
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	fbb1 f3f3 	udiv	r3, r1, r3
 80008de:	817b      	strh	r3, [r7, #10]
 80008e0:	e00c      	b.n	80008fc <I2C_Init+0xdc>
		} else {
			ccr_value = RCC_GetPCLK1Value()/(25*pI2CxHandle->I2C_Config.I2C_SCLSpeed);
 80008e2:	f7ff ff49 	bl	8000778 <RCC_GetPCLK1Value>
 80008e6:	4601      	mov	r1, r0
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	009a      	lsls	r2, r3, #2
 80008f4:	4413      	add	r3, r2
 80008f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80008fa:	817b      	strh	r3, [r7, #10]
		}
		temp |= (ccr_value & 0xFFF);
 80008fc:	897b      	ldrh	r3, [r7, #10]
 80008fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4313      	orrs	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->CCR = temp;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	61da      	str	r2, [r3, #28]

	// TRISE configuration

	if(pI2CxHandle->I2C_Config.I2C_SCLSpeed <= I2C_CLK_SPEED_SM){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a12      	ldr	r2, [pc, #72]	; (8000960 <I2C_Init+0x140>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d809      	bhi.n	800092e <I2C_Init+0x10e>
		// Standard mode

		temp = (RCC_GetPCLK1Value()/ 1000000U) + 1; // This formula comes from the reference manual
 800091a:	f7ff ff2d 	bl	8000778 <RCC_GetPCLK1Value>
 800091e:	4602      	mov	r2, r0
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <I2C_Init+0x13c>)
 8000922:	fba3 2302 	umull	r2, r3, r3, r2
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3301      	adds	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e00c      	b.n	8000948 <I2C_Init+0x128>

	} else {
		// Fast mode
		temp = (RCC_GetPCLK1Value()*300/ 1000000U) + 1;
 800092e:	f7ff ff23 	bl	8000778 <RCC_GetPCLK1Value>
 8000932:	4602      	mov	r2, r0
 8000934:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000938:	fb03 f302 	mul.w	r3, r3, r2
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <I2C_Init+0x13c>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
	}

	pI2CxHandle->pI2Cx->TRISE = (temp & 0x3F);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000952:	621a      	str	r2, [r3, #32]
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	431bde83 	.word	0x431bde83
 8000960:	000186a0 	.word	0x000186a0

08000964 <I2C_IRQConfig>:
 * @param [in]		IRQ Priority
 * @param [in]		Enable or disable
 * @return			None
 * @note 			None
 */
void I2C_IRQConfig(uint8_t IRQNumber, uint8_t EnOrDi){
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	460a      	mov	r2, r1
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	71bb      	strb	r3, [r7, #6]

	if (EnOrDi == ENABLE){
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d133      	bne.n	80009e2 <I2C_IRQConfig+0x7e>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b1f      	cmp	r3, #31
 800097e:	d80a      	bhi.n	8000996 <I2C_IRQConfig+0x32>
				*NVIC_ISER0 |= (1<< IRQNumber); // Set ISER0
 8000980:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <I2C_IRQConfig+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	2101      	movs	r1, #1
 8000988:	fa01 f202 	lsl.w	r2, r1, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <I2C_IRQConfig+0xf0>)
 8000990:	430b      	orrs	r3, r1
 8000992:	6013      	str	r3, [r2, #0]
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
			}
		}
}
 8000994:	e059      	b.n	8000a4a <I2C_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b1f      	cmp	r3, #31
 800099a:	d90f      	bls.n	80009bc <I2C_IRQConfig+0x58>
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b3f      	cmp	r3, #63	; 0x3f
 80009a0:	d80c      	bhi.n	80009bc <I2C_IRQConfig+0x58>
				*NVIC_ISER1 |= (1<< (IRQNumber%32)); // Set ISER1
 80009a2:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <I2C_IRQConfig+0xf4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	f002 021f 	and.w	r2, r2, #31
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <I2C_IRQConfig+0xf4>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e046      	b.n	8000a4a <I2C_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b3f      	cmp	r3, #63	; 0x3f
 80009c0:	d943      	bls.n	8000a4a <I2C_IRQConfig+0xe6>
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b5f      	cmp	r3, #95	; 0x5f
 80009c6:	d840      	bhi.n	8000a4a <I2C_IRQConfig+0xe6>
				*NVIC_ISER2 |= (1<< (IRQNumber%64)); // Set ISER2
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <I2C_IRQConfig+0xf8>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <I2C_IRQConfig+0xf8>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	e033      	b.n	8000a4a <I2C_IRQConfig+0xe6>
			if (IRQNumber <= 31){ // IRQ Number 0-31
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	d80a      	bhi.n	80009fe <I2C_IRQConfig+0x9a>
				*NVIC_ICER0 |= (1<< IRQNumber); // Set ICER0
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <I2C_IRQConfig+0xfc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	2101      	movs	r1, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <I2C_IRQConfig+0xfc>)
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	e025      	b.n	8000a4a <I2C_IRQConfig+0xe6>
			} else if (IRQNumber > 31 && IRQNumber < 64){ // IRQ Number 32-63
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b1f      	cmp	r3, #31
 8000a02:	d90f      	bls.n	8000a24 <I2C_IRQConfig+0xc0>
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b3f      	cmp	r3, #63	; 0x3f
 8000a08:	d80c      	bhi.n	8000a24 <I2C_IRQConfig+0xc0>
				*NVIC_ICER1 |= (1<< (IRQNumber%32)); // Set ICER1
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <I2C_IRQConfig+0x100>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	79fa      	ldrb	r2, [r7, #7]
 8000a10:	f002 021f 	and.w	r2, r2, #31
 8000a14:	2101      	movs	r1, #1
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <I2C_IRQConfig+0x100>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6013      	str	r3, [r2, #0]
 8000a22:	e012      	b.n	8000a4a <I2C_IRQConfig+0xe6>
			} else if (IRQNumber >= 64 && IRQNumber < 96){ // IRQ Number 64-95
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b3f      	cmp	r3, #63	; 0x3f
 8000a28:	d90f      	bls.n	8000a4a <I2C_IRQConfig+0xe6>
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b5f      	cmp	r3, #95	; 0x5f
 8000a2e:	d80c      	bhi.n	8000a4a <I2C_IRQConfig+0xe6>
				*NVIC_ICER2 |= (1<< (IRQNumber%64)); // Set ICER2
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <I2C_IRQConfig+0x104>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <I2C_IRQConfig+0x104>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	e7ff      	b.n	8000a4a <I2C_IRQConfig+0xe6>
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000e104 	.word	0xe000e104
 8000a5c:	e000e108 	.word	0xe000e108
 8000a60:	e000e180 	.word	0xe000e180
 8000a64:	e000e184 	.word	0xe000e184
 8000a68:	e000e188 	.word	0xe000e188

08000a6c <I2C_PeripheralControl>:
 * @param [in]		Base Address of the I2C Peripheral
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE){
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f043 0201 	orr.w	r2, r3, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000a8a:	e005      	b.n	8000a98 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f023 0201 	bic.w	r2, r3, #1
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr

08000aa2 <I2C_ManageAcking>:
 * @param [in]		Enable/Disable Macros
 * @return			None
 * @note 			None
 */
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000ac0:	e005      	b.n	8000ace <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <I2C_MasterHandleTXEIT>:
 * @brief			This functions sends data implementing interrupts. It handles the interrupt
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
static void I2C_MasterHandleTXEIT(I2C_Handle_t *pI2CxHandle){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	if (pI2CxHandle->TxLen > 0){
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00f      	beq.n	8000b08 <I2C_MasterHandleTXEIT+0x30>
		// Load data into DR
		pI2CxHandle->pI2Cx->DR = *(pI2CxHandle->pRxBuffer);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	611a      	str	r2, [r3, #16]

		// Decrement Tx length
		pI2CxHandle->TxLen--;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	615a      	str	r2, [r3, #20]

		// Increment buffer address
		pI2CxHandle->pTxBuffer++;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60da      	str	r2, [r3, #12]
	}
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <I2C_MasterHandleRXNEIT>:
 * @brief			This functions receives data implementing interrupts. It handles the interrupt
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
static void I2C_MasterHandleRXNEIT(I2C_Handle_t *pI2CxHandle){
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	// Data reception for length = 1
	if (pI2CxHandle->RxSize == 1){
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10b      	bne.n	8000b3a <I2C_MasterHandleRXNEIT+0x28>
		*pI2CxHandle->pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	701a      	strb	r2, [r3, #0]
		pI2CxHandle->RxLen--;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	1e5a      	subs	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	619a      	str	r2, [r3, #24]
	}

	// Data reception for length > 1
	if (pI2CxHandle->RxSize > 1){
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a1b      	ldr	r3, [r3, #32]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d91a      	bls.n	8000b78 <I2C_MasterHandleRXNEIT+0x66>
		if (pI2CxHandle->RxLen == 2){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d105      	bne.n	8000b56 <I2C_MasterHandleRXNEIT+0x44>
			// Clear ACK bit
			I2C_ManageAcking(pI2CxHandle->pI2Cx, DISABLE);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffa6 	bl	8000aa2 <I2C_ManageAcking>
		}

		*pI2CxHandle->pRxBuffer = pI2CxHandle->pI2Cx->DR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	691a      	ldr	r2, [r3, #16]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	701a      	strb	r2, [r3, #0]
		pI2CxHandle->pRxBuffer++;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	611a      	str	r2, [r3, #16]
		pI2CxHandle->RxLen--;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	619a      	str	r2, [r3, #24]
	}

	if (pI2CxHandle->RxLen == 0){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10b      	bne.n	8000b98 <I2C_MasterHandleRXNEIT+0x86>
		// Generate STOP condition
		I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fda7 	bl	80006d8 <I2C_GenerateStopCondition>

		// Close I2C reception
		I2C_CloseReceiveData(pI2CxHandle);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f8fe 	bl	8000d8c <I2C_CloseReceiveData>

		// Notify app
		I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_RX_COMPLETE);
 8000b90:	2101      	movs	r1, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fb62 	bl	800025c <I2C_ApplicationEventCallback>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <I2C_SlaveSendData>:
 * @param [in]		I2C instance
 * @param [in]		Data to be sent
 * @return			None
 * @note 			None
 */
void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = data;
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <I2C_SlaveReceiveData>:
 * @param [in]		I2C instance
 * @param [out]		data received
 * @return			None
 * @note 			sNone
 */
uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx){
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	return (uint8_t)pI2Cx->DR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <I2C_EV_IRQHandling>:
 * @brief			This functions handles each case an interrupt can be triggered for
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CxHandle){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

	uint32_t  temp1, temp2, temp3;

	// Make sure the interrupts are enabled by checking the ITEVTEN bit
	temp1 = pI2CxHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be6:	617b      	str	r3, [r7, #20]

	// Make sure the interrupts are enabled by also checking the ITBUFFEN bit
	temp2 = pI2CxHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf2:	613b      	str	r3, [r7, #16]

	/****************************** Handling interrupt generated by SB event.  **************************************/
	// Note: This is only applicable to master mode

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d01b      	beq.n	8000c3e <I2C_EV_IRQHandling+0x6a>
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d018      	beq.n	8000c3e <I2C_EV_IRQHandling+0x6a>
		//Interrupt happened because of SB event
		//Execute address phase
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7f1b      	ldrb	r3, [r3, #28]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d108      	bne.n	8000c26 <I2C_EV_IRQHandling+0x52>
			I2C_ExecuteAddressPhaseWrite(pI2CxHandle->pI2Cx, pI2CxHandle->devAddr);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f5b      	ldrb	r3, [r3, #29]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4610      	mov	r0, r2
 8000c20:	f7ff fcf9 	bl	8000616 <I2C_ExecuteAddressPhaseWrite>
 8000c24:	e00b      	b.n	8000c3e <I2C_EV_IRQHandling+0x6a>
		} else if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7f1b      	ldrb	r3, [r3, #28]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d107      	bne.n	8000c3e <I2C_EV_IRQHandling+0x6a>
			I2C_ExecuteAddressPhaseRead(pI2CxHandle->pI2Cx, pI2CxHandle->devAddr);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7f5b      	ldrb	r3, [r3, #29]
 8000c36:	4619      	mov	r1, r3
 8000c38:	4610      	mov	r0, r2
 8000c3a:	f7ff fd01 	bl	8000640 <I2C_ExecuteAddressPhaseRead>

	//********************************** Handling interrupt generated by ADDR event ********************************/
	// Master mode: Master received the address
	// Slave mode: The address matched with its own.

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d005      	beq.n	8000c5c <I2C_EV_IRQHandling+0x88>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <I2C_EV_IRQHandling+0x88>
		// Interrupt happened because of ADDR event
		// Clear ADDR flag
		I2C_ClearAddrFlag(pI2CxHandle);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fd07 	bl	800066a <I2C_ClearAddrFlag>
	}

	/********************************** Handling interrupt generated by BTF event **********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d022      	beq.n	8000cb4 <I2C_EV_IRQHandling+0xe0>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01f      	beq.n	8000cb4 <I2C_EV_IRQHandling+0xe0>
		// Interrupt happened because of BTF (Byte Transfer Finished) event

		// Check the application state
		if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7f1b      	ldrb	r3, [r3, #28]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d11b      	bne.n	8000cb4 <I2C_EV_IRQHandling+0xe0>

			//Confirm TXE is also set
			if (pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d014      	beq.n	8000cb4 <I2C_EV_IRQHandling+0xe0>
				if (pI2CxHandle->TxLen == 0){
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d110      	bne.n	8000cb4 <I2C_EV_IRQHandling+0xe0>
					// Check if repeated start is enabled
					if (pI2CxHandle->Sr == I2C_NO_SR){
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <I2C_EV_IRQHandling+0xd2>
						// Generate STOP condition
						I2C_GenerateStopCondition(pI2CxHandle->pI2Cx);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd19 	bl	80006d8 <I2C_GenerateStopCondition>
					}

					// Reset all member elements of the handle structure
					I2C_CloseSendData(pI2CxHandle);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f89e 	bl	8000de8 <I2C_CloseSendData>

					// Notify the app about transmission completion
					I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_TX_COMPLETE);
 8000cac:	2100      	movs	r1, #0
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fad4 	bl	800025c <I2C_ApplicationEventCallback>
	}

	/********************************* Handling interrupt generated by STOPF event *******************************/
	// This code will be only executed when in slave mode

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp3){
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00c      	beq.n	8000ce0 <I2C_EV_IRQHandling+0x10c>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d009      	beq.n	8000ce0 <I2C_EV_IRQHandling+0x10c>
		// Interrupt happened because of STOPF event. Only happens in slave mode

		// Clear STOPF flag -> Read SR1 (done). Write something to CR1
		pI2CxHandle->pI2Cx->CR1 |= 0x0000; // This value will not affect the other values of the register
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	601a      	str	r2, [r3, #0]

		// Notify the app about transmission completion
		I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_STOP);
 8000cd8:	2102      	movs	r1, #2
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff fabe 	bl	800025c <I2C_ApplicationEventCallback>
	}

	/*********************************** Handling interrupt generated by TXE event *********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp2 && temp3){
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d01f      	beq.n	8000d32 <I2C_EV_IRQHandling+0x15e>
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d01c      	beq.n	8000d32 <I2C_EV_IRQHandling+0x15e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d019      	beq.n	8000d32 <I2C_EV_IRQHandling+0x15e>
		//Interrupt happened because of TXE event

		// Check if device is master
		if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <I2C_EV_IRQHandling+0x148>
			// Data transmission
			if (pI2CxHandle->TxRxState == I2C_BUSY_IN_TX){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7f1b      	ldrb	r3, [r3, #28]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10e      	bne.n	8000d32 <I2C_EV_IRQHandling+0x15e>
				I2C_MasterHandleTXEIT(pI2CxHandle);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fedf 	bl	8000ad8 <I2C_MasterHandleTXEIT>
 8000d1a:	e00a      	b.n	8000d32 <I2C_EV_IRQHandling+0x15e>
			}
		} else {
			// The device is in slave mode
			// Make sure slave in in transmitter mode by checking TRA bit
			// TRA = 1 -> Transmitter mode		TRA = 0 -> Receiver mode
			if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <I2C_EV_IRQHandling+0x15e>
				I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_DATA_REQUEST);
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fa95 	bl	800025c <I2C_ApplicationEventCallback>
		}
	}

	/******************************** Handling interrupt generated by RXNE event **********************************/

	temp3 = pI2CxHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3c:	60fb      	str	r3, [r7, #12]

	if (temp1 && temp2 && temp3){
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d01f      	beq.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01c      	beq.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d019      	beq.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
		//Interrupt happened because of RXNE event

		// Check device mode
		if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)){
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <I2C_EV_IRQHandling+0x19a>
			if (pI2CxHandle->TxRxState == I2C_BUSY_IN_RX){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7f1b      	ldrb	r3, [r3, #28]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d10e      	bne.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
				I2C_MasterHandleRXNEIT(pI2CxHandle);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff fed3 	bl	8000b12 <I2C_MasterHandleRXNEIT>
			if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
				I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_DATA_RECEIVED);
			}
		}
	}
}
 8000d6c:	e00a      	b.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
			if (pI2CxHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CxHandle, I2C_EV_DATA_RECEIVED);
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fa6c 	bl	800025c <I2C_ApplicationEventCallback>
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <I2C_CloseReceiveData>:
 * @brief			This functions closes communication after the MCU is done receiving data
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_CloseReceiveData (I2C_Handle_t *pI2CxHandle){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	// Disable ITBUFFEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da2:	605a      	str	r2, [r3, #4]

	// Disable ITEVEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000db2:	605a      	str	r2, [r3, #4]

	pI2CxHandle->TxRxState = I2C_READY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	771a      	strb	r2, [r3, #28]
	pI2CxHandle->pRxBuffer = NULL;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
	pI2CxHandle->RxLen = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
	pI2CxHandle->RxSize = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]

	if (pI2CxHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE){
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	7a5b      	ldrb	r3, [r3, #9]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <I2C_CloseReceiveData+0x54>
		I2C_ManageAcking(pI2CxHandle->pI2Cx, ENABLE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fe61 	bl	8000aa2 <I2C_ManageAcking>
	}
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <I2C_CloseSendData>:
 * @brief			This functions closes communication after the MCU is done transmitting data
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_CloseSendData (I2C_Handle_t *pI2CxHandle){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

	// Disable ITBUFFEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000dfe:	605a      	str	r2, [r3, #4]

	// Disable ITEVEN
	pI2CxHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e0e:	605a      	str	r2, [r3, #4]

	pI2CxHandle->TxRxState = I2C_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	771a      	strb	r2, [r3, #28]
	pI2CxHandle->pTxBuffer = NULL;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
	pI2CxHandle->TxLen = 0;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <I2C_ER_IRQHandling>:
 * @brief			This functions handles each case an error can be triggered for
 * @param [in]		I2C Handle
 * @return			None
 * @note 			None
 */
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CxHandle){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CxHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 ){
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00e      	beq.n	8000e70 <I2C_ER_IRQHandling+0x44>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00b      	beq.n	8000e70 <I2C_ER_IRQHandling+0x44>
		//This is Bus error

		// Clear the bus error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e66:	615a      	str	r2, [r3, #20]

		// Notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_BERR);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff f9f6 	bl	800025c <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e7a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2) {
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00e      	beq.n	8000ea0 <I2C_ER_IRQHandling+0x74>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00b      	beq.n	8000ea0 <I2C_ER_IRQHandling+0x74>
		//This is arbitration lost error

		// Clear the arbitration lost error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e96:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_ARLO);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff f9de 	bl	800025c <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eaa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00e      	beq.n	8000ed0 <I2C_ER_IRQHandling+0xa4>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00b      	beq.n	8000ed0 <I2C_ER_IRQHandling+0xa4>
		//This is ACK failure error

		//Implement the code to clear the ACK failure error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	695a      	ldr	r2, [r3, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ec6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_AF);
 8000ec8:	2102      	movs	r1, #2
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff f9c6 	bl	800025c <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eda:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00e      	beq.n	8000f00 <I2C_ER_IRQHandling+0xd4>
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <I2C_ER_IRQHandling+0xd4>
		//This is Overrun/underrun

		//Implement the code to clear the Overrun/underrun error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef6:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_OVR);
 8000ef8:	2103      	movs	r1, #3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff f9ae 	bl	800025c <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CxHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)	{
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00e      	beq.n	8000f30 <I2C_ER_IRQHandling+0x104>
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <I2C_ER_IRQHandling+0x104>
		//This is Time out error

		//Implement the code to clear the Time out error flag
		pI2CxHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f26:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CxHandle,I2C_ERROR_TIMEOUT);
 8000f28:	2104      	movs	r1, #4
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff f996 	bl	800025c <I2C_ApplicationEventCallback>
	}
}
 8000f30:	bf00      	nop
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <I2C_SlaveManageCallbackEvents>:

void I2C_SlaveManageCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == ENABLE){
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d112      	bne.n	8000f70 <I2C_SlaveManageCallbackEvents+0x38>
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
	} else {
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 8000f6e:	e011      	b.n	8000f94 <I2C_SlaveManageCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <__libc_init_array>:
 8000fa0:	b570      	push	{r4, r5, r6, lr}
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4e0c      	ldr	r6, [pc, #48]	; (8000fd8 <__libc_init_array+0x38>)
 8000fa6:	4c0d      	ldr	r4, [pc, #52]	; (8000fdc <__libc_init_array+0x3c>)
 8000fa8:	1ba4      	subs	r4, r4, r6
 8000faa:	10a4      	asrs	r4, r4, #2
 8000fac:	42a5      	cmp	r5, r4
 8000fae:	d109      	bne.n	8000fc4 <__libc_init_array+0x24>
 8000fb0:	f000 f81a 	bl	8000fe8 <_init>
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	4e0a      	ldr	r6, [pc, #40]	; (8000fe0 <__libc_init_array+0x40>)
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <__libc_init_array+0x44>)
 8000fba:	1ba4      	subs	r4, r4, r6
 8000fbc:	10a4      	asrs	r4, r4, #2
 8000fbe:	42a5      	cmp	r5, r4
 8000fc0:	d105      	bne.n	8000fce <__libc_init_array+0x2e>
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc8:	4798      	blx	r3
 8000fca:	3501      	adds	r5, #1
 8000fcc:	e7ee      	b.n	8000fac <__libc_init_array+0xc>
 8000fce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fd2:	4798      	blx	r3
 8000fd4:	3501      	adds	r5, #1
 8000fd6:	e7f2      	b.n	8000fbe <__libc_init_array+0x1e>
 8000fd8:	08001000 	.word	0x08001000
 8000fdc:	08001000 	.word	0x08001000
 8000fe0:	08001000 	.word	0x08001000
 8000fe4:	08001004 	.word	0x08001004

08000fe8 <_init>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr

08000ff4 <_fini>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr
